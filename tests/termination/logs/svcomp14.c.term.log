Using seed: 1337
[]
Fastest checker: genetic
Program 0:
res1 = id < id;
Program 1:
t1 = id | nondet_2;
t2 = tmp - t1;
t3 = t1 >> nondet_1;
res1 = t3 != nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_1 != 0xf;
Program 1:
t1 = nondet_1 s<= tmp;
res1 = nondet_0 >> tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 & nondet_1;
t2 = maxId >>> nondet_2;
t3 = -nondet_2;
res1 = tmp >> nondet_0;
Program 1:
t1 = id & nondet_1;
t2 = nondet_1 <= nondet_0;
t3 = 0x7 << maxId;
res1 = ~tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 8, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 % 0x8;
res1 = ~nondet_2;
Program 1:
t1 = maxId >>> tmp;
t2 = nondet_0 < id;
t3 = nondet_0 ^ maxId;
t4 = nondet_0 - 0x7;
res1 = t2 <= tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 13, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 << 0x7;
t2 = maxId ^ nondet_2;
res1 = nondet_1 <= t2;
Program 1:
t1 = tmp < nondet_0;
t2 = maxId ^ id;
t3 = nondet_1 == nondet_1;
res1 = tmp * tmp;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 14)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 ? nondet_1 : tmp;
t2 = tmp * maxId;
t3 = tmp == t2;
t4 = max(t3, 0x8);
res1 = ~nondet_1;
Program 1:
t1 = ~nondet_1;
t2 = -maxId;
t3 = -tmp;
res1 = t2 <= maxId;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 1, 14)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 < nondet_2;
t2 = max(id, nondet_1);
t3 = nondet_1 ==> maxId;
res1 = t1 ==> 0x7;
Program 1:
res1 = -tmp;

Fastest checker: cbmc
Fails for (8, 9, 0, 4, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 < id;
t2 = nondet_1 ? id : tmp;
t3 = nondet_0 + t2;
t4 = nondet_2 & nondet_2;
res1 = 0x0 == id;
Program 1:
t1 = max(nondet_1, maxId);
t2 = nondet_0 | tmp;
t3 = id s< maxId;
t4 = ~tmp;
res1 = tmp ? t1 : t3;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 2, 0)

[]
Fastest checker: genetic
Program 0:
res1 = -0x7;
Program 1:
t1 = nondet_1 >>> tmp;
t2 = max(id, nondet_2);
res1 = nondet_2 - tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 8, 0)

[]
Fastest checker: genetic
Program 0:
t1 = tmp | 0x7;
t2 = 0x7 != t1;
res1 = nondet_2 s<= maxId;
Program 1:
t1 = maxId s< nondet_1;
t2 = id - tmp;
t3 = 0x0 + 0x0;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (8, 0, 0, 1, 8, 0)

[]
Fastest checker: genetic
Program 0:
res1 = maxId * maxId;
Program 1:
t1 = nondet_0 | nondet_1;
t2 = 0x8 >> tmp;
t3 = 0x8 + 0x8;
res1 = min(maxId, t1);

Fastest checker: explicit
Fails for (1, 0, 0, 1, 9, 0)

[]
Fastest checker: genetic
Program 0:
res1 = id s<= maxId;
Program 1:
t1 = id ==> nondet_2;
t2 = id / t1;
t3 = tmp ^ 0x7;
res1 = 0x7 % tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 8, 9, 0)

[]
Fastest checker: genetic
Program 0:
t1 = max(nondet_0, nondet_0);
t2 = nondet_1 ? t1 : nondet_2;
res1 = t2 s< maxId;
Program 1:
t1 = ~tmp;
t2 = nondet_2 == maxId;
t3 = 0x0 + 0x0;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (8, 0, 0, 8, 9, 0)

[]
Fastest checker: genetic
Program 0:
t1 = maxId < 0x7;
t2 = t1 >> nondet_1;
res1 = 0x7 ? t1 : maxId;
Program 1:
t1 = 0x7 ^ tmp;
t2 = 0x7 + 0x7;
t3 = id == id;
res1 = nondet_1 + nondet_2;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x0 s< maxId;
Program 1:
t1 = ~tmp;
t2 = nondet_2 & nondet_1;
t3 = nondet_1 * nondet_1;
t4 = 0x0 + 0x0;
res1 = -nondet_1;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 s<= maxId;
Program 1:
t1 = maxId ^ tmp;
t2 = nondet_2 ? 0xf : id;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = nondet_0 - maxId;

Fastest checker: explicit
Fails for (0, 0, 2, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
res1 = maxId < 0x7;
Program 1:
t1 = nondet_2 <= 0x8;
t2 = tmp ==> tmp;
t3 = nondet_1 - tmp;
res1 = max(id, maxId);

Fastest checker: explicit
Fails for (1, 2, 2, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
res1 = maxId < 0x7;
Program 1:
t1 = maxId ^ tmp;
t2 = maxId | 0x0;
t3 = 0x0 + 0x0;
res1 = 0x0 == maxId;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 2, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + 0x7;
t2 = nondet_2 <= nondet_1;
res1 = id <= t2;
Program 1:
t1 = 0xf * tmp;
t2 = -tmp;
res1 = -tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 2, 2)

[]
Fastest checker: genetic
Program 0:
t1 = min(id, nondet_1);
t2 = t1 != id;
res1 = t1 s<= maxId;
Program 1:
res1 = 0xf * tmp;

Fastest checker: cbmc
Fails for (2, 0, 0, 4, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = maxId << 0x1;
t2 = nondet_2 + nondet_0;
res1 = 0x1 s<= maxId;
Program 1:
t1 = -tmp;
res1 = nondet_2 + t1;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 & maxId;
t2 = nondet_1 <= nondet_0;
res1 = maxId < 0x7;
Program 1:
t1 = 0x7 - tmp;
t2 = id - tmp;
res1 = nondet_2 s<= nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 1)

[]
Fastest checker: genetic
Program 0:
res1 = maxId < 0x8;
Program 1:
t1 = 0xf + 0xf;
t2 = id - tmp;
t3 = nondet_0 + nondet_1;
res1 = 0xf + 0xf;

Fastest checker: explicit
Fails for (1, 0, 0, 3, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = maxId s< 0x7;
t2 = id - t1;
t3 = max(nondet_1, nondet_2);
res1 = t2 s< maxId;
Program 1:
res1 = -tmp;

Fastest checker: cbmc
Fails for (8, 9, 0, 6, 7, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 + 0x1;
t2 = nondet_1 + maxId;
t3 = 0x1 + 0x1;
res1 = 0x1 s<= maxId;
Program 1:
t1 = -tmp;
t2 = ~0xf;
t3 = maxId ^ tmp;
t4 = id - tmp;
res1 = 0xf + 0xf;

Fastest checker: cbmc
Fails for (2, 0, 0, 7, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = min(0x7, id);
res1 = t1 s< maxId;
Program 1:
t1 = nondet_2 - tmp;
t2 = id - tmp;
res1 = id - tmp;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc







Finished in 30.83s

Program 0:
t1 = min(0x7fffffff, id);
res1 = t1 s< maxId;
Program 1:
t1 = nondet_2 - tmp;
t2 = id - tmp;
res1 = id - tmp;


Perf counters:
{'genetic': 26, 'cbmc': 7, 'explicit': 21, 'iterations': 26}
Perf timers:
gcc: 0.54s
verify: 10.91s
checker: 30.73s
generalize: 0.97s
synth: 19.91s
_: 30.83s
