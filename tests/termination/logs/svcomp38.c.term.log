Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ==> z;
t2 = x / x;
t3 = nondet_0 * nondet_0;
res1 = max(t2, 0x8);
Program 1:
t1 = z s< n;
res1 = x s<= z;

Fastest checker: explicit
Fails for (0, 10, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y >> 0x1;
res1 = y ^ x;
Program 1:
t1 = x ? n : x;
t2 = ~z;
res1 = t2 <= x;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 != m;
t2 = min(z, t1);
res1 = min(0xf, x);
Program 1:
t1 = m << z;
res1 = t1 < z;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = max(x, nondet_0);
Program 1:
t1 = 0x1 ? x : m;
res1 = -y;

Fastest checker: explicit
Fails for (0, 11, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = ~z;
t2 = x - t1;
t3 = t2 s<= y;
res1 = x * z;
Program 1:
t1 = 0x8 * x;
res1 = z >> z;

Fastest checker: explicit
Fails for (0, 12, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m << z;
t2 = n != n;
res1 = -x;
Program 1:
t1 = z << m;
res1 = z - n;

Fastest checker: explicit
Fails for (0, 13, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 * x;
t2 = z | nondet_0;
t3 = t2 - z;
res1 = -x;
Program 1:
t1 = z ==> 0x7;
t2 = ~t1;
t3 = z * t2;
t4 = nondet_0 << t3;
res1 = n != y;

Fastest checker: explicit
Fails for (4, 13, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z >> y;
t2 = n == m;
res1 = min(n, x);
Program 1:
t1 = m ? y : m;
res1 = 0xf % z;

Fastest checker: explicit
Fails for (0, 1, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x & 0x1;
res1 = x * 0x1;
Program 1:
t1 = n * y;
t2 = y != nondet_0;
t3 = x != t2;
t4 = n != n;
res1 = z s< n;

Fastest checker: explicit
Fails for (8, 1, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m - m;
t2 = z + z;
res1 = x << n;
Program 1:
t1 = y << z;
res1 = ~nondet_0;

Fastest checker: explicit
Fails for (0, 1, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x <= nondet_0;
t2 = x <= nondet_0;
t3 = x s<= 0xf;
t4 = y % 0xf;
res1 = n ? x : t2;
Program 1:
t1 = y + x;
t2 = y - z;
t3 = n / z;
t4 = m ^ t1;
res1 = t1 ? t2 : 0x0;

Fastest checker: explicit
Fails for (0, 8, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = 0x0 != x;
Program 1:
t1 = z >> n;
t2 = 0xf + 0xf;
t3 = nondet_0 << x;
t4 = -t2;
res1 = t1 ^ z;

Fastest checker: explicit
Fails for (0, 14, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z != 0x0;
t2 = -m;
res1 = nondet_0 ^ x;
Program 1:
t1 = x % z;
t2 = y % z;
res1 = 0x7 < nondet_0;

Fastest checker: explicit
Fails for (1, 14, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = max(x, x);
Program 1:
t1 = y % z;
t2 = 0xf < nondet_0;
t3 = nondet_0 < 0xf;
t4 = 0xf + 0xf;
res1 = nondet_0 < 0xf;

Fastest checker: explicit
Fails for (0, 1, 9, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = -x;
Program 1:
t1 = m s<= z;
t2 = max(m, z);
t3 = max(t1, nondet_0);
t4 = x s<= z;
res1 = 0x8 - t2;

Fastest checker: explicit
Fails for (0, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n >> n;
t2 = m < x;
res1 = nondet_0 != t2;
Program 1:
t1 = 0x0 <= nondet_0;
res1 = y % z;

Fastest checker: explicit
Fails for (1, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n | m;
res1 = nondet_0 + x;
Program 1:
t1 = y & nondet_0;
t2 = nondet_0 < 0x7;
t3 = z - n;
res1 = y % x;

Fastest checker: explicit
Fails for (15, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 - z;
t2 = x != 0x1;
res1 = x * x;
Program 1:
t1 = m << z;
res1 = m <= y;

Fastest checker: explicit
Fails for (0, 2, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 & x;
Program 1:
t1 = y - z;
t2 = t1 >>> y;
t3 = m << z;
t4 = x << 0x7;
res1 = z <= n;

Fastest checker: explicit
Fails for (0, 4, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n ==> m;
t2 = n + nondet_0;
t3 = x % n;
res1 = x * x;
Program 1:
t1 = x != x;
t2 = y % z;
t3 = m << z;
res1 = z <= x;

Fastest checker: explicit
Fails for (0, 5, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n <= x;
t2 = min(nondet_0, 0x7);
t3 = 0x7 + 0x7;
t4 = 0x7 + 0x7;
res1 = nondet_0 + t1;
Program 1:
t1 = m + z;
t2 = m << z;
res1 = 0x0 >> y;

Fastest checker: explicit
Fails for (1, 0, 1, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
t2 = nondet_0 == t1;
res1 = x << m;
Program 1:
t1 = m + z;
t2 = z s<= nondet_0;
res1 = t1 - n;

Fastest checker: explicit
Fails for (0, 1, 0, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z s< n;
t2 = n << x;
t3 = max(0x8, m);
res1 = x * x;
Program 1:
t1 = ~y;
t2 = nondet_0 >>> 0x8;
t3 = nondet_0 + n;
res1 = y % x;

Fastest checker: explicit
Fails for (0, 9, 9, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = -y;
t2 = n s<= 0x8;
t3 = ~t1;
res1 = 0x8 * x;
Program 1:
t1 = x + y;
t2 = z * t1;
t3 = -t1;
res1 = t3 s< t3;

Fastest checker: explicit
Fails for (0, 13, 9, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m <= 0xf;
t2 = x != m;
t3 = n * y;
res1 = y ? x : z;
Program 1:
t1 = max(y, m);
t2 = max(x, z);
res1 = z < n;

Fastest checker: explicit
Fails for (0, 0, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 - z;
t2 = n ^ m;
t3 = y ==> x;
res1 = -x;
Program 1:
t1 = z + x;
t2 = ~z;
t3 = z >> y;
t4 = 0x7 + t1;
res1 = 0x7 + 0x7;

Fastest checker: explicit
Fails for (0, 13, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = min(0x7, x);
t2 = n <= x;
res1 = n ? x : x;
Program 1:
t1 = z % n;
t2 = z - n;
res1 = t2 % x;

Fastest checker: explicit
Fails for (0, 1, 0, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y != y;
t2 = z ^ x;
t3 = t1 != m;
t4 = t1 ? x : nondet_0;
res1 = 0x7 * x;
Program 1:
t1 = z | n;
t2 = x >> n;
res1 = t2 ^ z;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = max(t1, m);
res1 = x % n;
Program 1:
t1 = x + z;
t2 = 0x7 ? x : nondet_0;
res1 = t1 <= 0x7;

Fastest checker: explicit
Fails for (0, 8, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n < x;
res1 = nondet_0 ? x : t1;
Program 1:
t1 = z * 0x1;
t2 = z >> y;
t3 = 0x1 + nondet_0;
t4 = max(0x1, t3);
res1 = min(t3, z);

Fastest checker: explicit
Fails for (1, 8, 0, 0, 3, 13)

[]







Timeout
Perf counters:
{'genetic': 30, 'explicit': 30, 'timeout': 1, 'iterations': 31}
Perf timers:
verify: 0.33s
checker: 179.95s
gcc: 0.37s
_: 180.00s
synth: 179.66s
