Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = v >>> z;
t2 = z * x;
res1 = min(w, y);
Program 1:
res1 = x s<= x;

Fastest checker: explicit
Fails for (0, 9, 5, 9, 2, 13, 6)

[]
Fastest checker: genetic
Program 0:
t1 = v % w;
t2 = u s< 0x0;
t3 = v <= c;
t4 = c ? t2 : u;
res1 = x * t2;
Program 1:
t1 = z | 0x7;
res1 = t1 << x;

Fastest checker: explicit
Fails for (8, 9, 5, 9, 2, 13, 6)

[]
Fastest checker: genetic
Program 0:
t1 = v < c;
res1 = 0xf | 0xf;
Program 1:
t1 = u >>> x;
t2 = w <= t1;
res1 = v ^ c;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13, 6)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 + w;
Program 1:
t1 = w s< v;
t2 = -c;
res1 = 0x8 % w;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 14, 6)

[]
Fastest checker: genetic
Program 0:
t1 = v | y;
t2 = x >>> 0x1;
t3 = t2 != t2;
res1 = max(w, u);
Program 1:
t1 = u >>> x;
t2 = u ^ c;
t3 = v << t2;
t4 = ~y;
res1 = u < y;

Fastest checker: explicit
Fails for (1, 1, 0, 1, 0, 14, 6)

[]
Fastest checker: genetic
Program 0:
res1 = max(c, w);
Program 1:
t1 = w & y;
t2 = u * z;
t3 = c >>> y;
res1 = t1 <= y;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 0, 14, 6)

[]
Fastest checker: genetic
Program 0:
res1 = u ==> x;
Program 1:
t1 = y ==> v;
t2 = w s<= y;
t3 = 0xf & y;
res1 = z - t3;

Fastest checker: explicit
Fails for (0, 0, 0, 14, 0, 14, 6)

[]
Fastest checker: genetic
Program 0:
t1 = c & w;
res1 = max(w, v);
Program 1:
t1 = x / 0x8;
t2 = t1 s< x;
t3 = v s<= 0x8;
res1 = t1 - y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 14, 6)

[]
Fastest checker: genetic
Program 0:
t1 = u == c;
res1 = x ==> z;
Program 1:
t1 = min(0x7, 0x7);
res1 = ~c;

Fastest checker: cbmc
Fails for (0, 6, 0, 3, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf & 0xf;
t2 = min(c, 0xf);
t3 = x s<= c;
t4 = x <= x;
res1 = ~x;
Program 1:
t1 = x * v;
t2 = max(z, y);
t3 = z << v;
t4 = -x;
res1 = ~y;

Fastest checker: explicit
Fails for (0, 15, 0, 3, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf >> y;
t2 = v >> 0xf;
t3 = u << x;
t4 = 0xf ? z : t1;
res1 = 0xf - t3;
Program 1:
t1 = min(0x8, z);
res1 = ~y;

Fastest checker: explicit
Fails for (0, 0, 0, 15, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = u s< w;
res1 = c <= w;
Program 1:
t1 = ~v;
t2 = x << c;
res1 = -v;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = c << c;
t2 = -0x8;
t3 = min(w, v);
t4 = -v;
res1 = 0x8 + t1;
Program 1:
t1 = min(w, x);
t2 = max(u, t1);
res1 = v ==> v;

Fastest checker: cbmc
Fails for (5, 4, 10, 0, 8, 1, 5)

[]
Fastest checker: genetic
Program 0:
t1 = c >> c;
res1 = t1 == c;
Program 1:
t1 = min(y, w);
res1 = w + x;

Fastest checker: cbmc
Fails for (0, 3, 0, 2, 4, 9, 0)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 s<= z;
Program 1:
t1 = v ==> 0xf;
t2 = -v;
t3 = 0xf | c;
res1 = ~c;

Fastest checker: cbmc
Fails for (0, 1, 13, 0, 0, 6, 15)

[]
Fastest checker: genetic
Program 0:
t1 = w | v;
t2 = c ==> c;
t3 = ~y;
res1 = t3 s<= t3;
Program 1:
t1 = 0xf << c;
t2 = z >> 0xf;
t3 = -x;
res1 = w == t2;

Fastest checker: explicit
Fails for (0, 0, 14, 0, 0, 6, 15)

[]
Fastest checker: genetic
Program 0:
t1 = min(0xf, w);
t2 = 0xf + 0xf;
t3 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = z - c;
t2 = u == u;
t3 = 0x1 + 0x1;
res1 = 0x1 + 0x1;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 15, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y ==> v;
t2 = c >> t1;
res1 = t1 >> t2;
Program 1:
t1 = min(0x0, c);
res1 = t1 ^ w;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 0, 5, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x <= v;
t2 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = ~c;
t2 = v << u;
t3 = ~t2;
t4 = v <= c;
res1 = x ==> 0x8;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 0, 5, 0)

[]
Fastest checker: genetic
Program 0:
t1 = u >> w;
t2 = t1 == u;
t3 = min(0x1, t1);
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = 0x7 - c;
t2 = 0x7 + 0x7;
t3 = 0x7 + 0x7;
res1 = 0x7 + 0x7;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 1, 1, 7)

[]
Fastest checker: genetic
Program 0:
t1 = w >> c;
res1 = ~w;
Program 1:
t1 = z - c;
t2 = u << z;
res1 = t2 <= v;

Fastest checker: cbmc
Fails for (0, 1, 8, 0, 0, 15, 12)

[]
Fastest checker: genetic
Program 0:
t1 = z >> x;
t2 = 0x7 + 0x7;
t3 = 0x7 + 0x7;
t4 = t3 < z;
res1 = ~c;
Program 1:
res1 = ~c;

Fastest checker: cbmc
Fails for (0, 4, 0, 0, 0, 5, 14)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 == z;
t2 = 0x1 ? y : 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = ~c;
t2 = max(w, z);
res1 = 0x1 + 0x1;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 4, 13, 15)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf >> y;
t2 = 0xf * 0xf;
t3 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = u < z;
t2 = 0x8 + 0x8;
res1 = t1 - c;

Fastest checker: cbmc
Fails for (2, 4, 0, 1, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf & 0xf;
Program 1:
res1 = 0x8 - c;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 0, 1, 8)

[]
Fastest checker: genetic
Program 0:
res1 = z <= w;
Program 1:
t1 = ~c;
res1 = u * u;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 5, 5, 15)

[]
Fastest checker: genetic
Program 0:
t1 = v != u;
res1 = 0xf + 0xf;
Program 1:
t1 = c ^ 0x7;
t2 = z s<= c;
res1 = u + z;

Fastest checker: explicit
Fails for (11, 1, 0, 0, 5, 5, 15)

[]
Fastest checker: genetic
Program 0:
t1 = u == u;
res1 = c <= x;
Program 1:
t1 = 0xf - c;
t2 = c <= 0xf;
t3 = u & c;
res1 = v + z;

Fastest checker: explicit
Fails for (0, 15, 11, 8, 5, 5, 15)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 + 0x1;
t2 = c s<= 0x1;
t3 = v s<= w;
res1 = u | t2;
Program 1:
t1 = z ? u : v;
t2 = 0x7 ^ c;
t3 = 0x7 ==> u;
res1 = w ? u : 0x7;

Fastest checker: cbmc
Fails for (0, 4, 1, 0, 1, 0, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf + 0xf;
Program 1:
t1 = ~c;
t2 = 0x1 + 0x1;
t3 = z >>> 0x1;
t4 = t3 <= c;
res1 = c < c;

Fastest checker: cbmc
Fails for (0, 1, 8, 0, 8, 6, 1)

[]
Fastest checker: genetic
Program 0:
t1 = c <= w;
res1 = z <= w;
Program 1:
t1 = -c;
t2 = max(v, z);
t3 = 0x8 + 0x8;
res1 = max(0x8, v);

Fastest checker: cbmc
Fails for (0, 1, 14, 0, 12, 6, 0)

[]
Fastest checker: genetic
Program 0:
t1 = max(c, z);
t2 = 0x1 + 0x1;
t3 = t2 == w;
res1 = c <= x;
Program 1:
t1 = 0x8 | w;
t2 = 0x8 + 0x8;
t3 = z >> c;
res1 = 0x8 - c;

Fastest checker: explicit
Fails for (0, 11, 0, 8, 12, 6, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x & 0xf;
res1 = z s<= w;
Program 1:
res1 = 0x8 - c;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 2, 12, 8)

[]
Fastest checker: genetic
Program 0:
t1 = x & x;
t2 = u s< w;
t3 = u >> y;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = 0x8 - c;
t2 = v >>> u;
t3 = 0x8 + 0x8;
res1 = y s<= u;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 2, 12, 8)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= u;
res1 = z <= w;
Program 1:
t1 = 0x8 <= 0x8;
res1 = 0x8 - c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 12, 12, 8)

[]
Fastest checker: genetic
Program 0:
res1 = v ==> y;
Program 1:
t1 = min(0x0, 0x0);
t2 = ~c;
res1 = t2 < w;

Fastest checker: explicit
Fails for (0, 0, 1, 15, 12, 12, 8)

[]
Fastest checker: genetic
Program 0:
t1 = c | x;
t2 = y - u;
t3 = ~v;
res1 = 0x7 + 0x7;
Program 1:
t1 = 0x1 - c;
t2 = ~c;
t3 = 0x1 + 0x1;
res1 = t2 <= 0x1;

Fastest checker: cbmc
Fails for (0, 1, 15, 0, 8, 1, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 + 0x1;
t2 = v | u;
t3 = c >> 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = z s< v;
t2 = -c;
t3 = t2 <= z;
res1 = v ? z : t1;

Fastest checker: cbmc
Fails for (6, 4, 1, 0, 0, 14, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x - y;
t2 = 0xf + 0xf;
t3 = -v;
t4 = y & v;
res1 = 0xf + 0xf;
Program 1:
t1 = u - c;
res1 = t1 < 0x7;

Fastest checker: explicit
Fails for (8, 4, 1, 0, 0, 14, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = 0xf + 0xf;
t3 = u | w;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = z - c;
res1 = 0x8 + z;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 0, 8, 8)

[]
Fastest checker: genetic
Program 0:
t1 = c <= v;
res1 = 0xf + 0xf;
Program 1:
t1 = 0x7 - c;
t2 = min(z, 0x7);
t3 = y s<= u;
res1 = z + z;

Fastest checker: explicit
Fails for (0, 7, 0, 7, 0, 8, 8)

[]
Fastest checker: genetic
Program 0:
res1 = z <= w;
Program 1:
t1 = 0xf - c;
t2 = 0xf - c;
t3 = z | z;
res1 = z | z;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 11, 11, 15)

[]
Fastest checker: genetic
Program 0:
t1 = y <= y;
res1 = t1 | z;
Program 1:
t1 = z < u;
t2 = 0x7 != u;
t3 = x - c;
res1 = z / t2;

Fastest checker: explicit
Fails for (7, 1, 0, 0, 11, 11, 15)

[]
Fastest checker: genetic
Program 0:
t1 = z <= u;
t2 = v + c;
t3 = w >> z;
res1 = 0x7 + 0x7;
Program 1:
t1 = ~c;
t2 = w + t1;
t3 = 0x1 + 0x1;
t4 = v & x;
res1 = z + 0x1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 12, 15)

[]
Fastest checker: genetic
Program 0:
t1 = w & w;
res1 = z <= w;
Program 1:
t1 = v ==> x;
t2 = 0xf - c;
t3 = w <= c;
res1 = max(0xf, 0xf);

Fastest checker: cbmc
Fails for (0, 1, 8, 0, 4, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + u;
t2 = x | z;
t3 = c ==> w;
res1 = 0x7 <= 0x7;
Program 1:
t1 = 0x7 | z;
t2 = 0x7 - c;
t3 = 0x7 + 0x7;
res1 = t2 - t3;

Fastest checker: cbmc
Fails for (9, 1, 0, 0, 1, 1, 9)

[]
Fastest checker: genetic
Program 0:
t1 = y s<= 0xf;
t2 = u | y;
t3 = z >>> 0xf;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = u - c;
t2 = x - c;
t3 = 0x1 - 0x1;
t4 = z - u;
res1 = v < w;

Fastest checker: explicit
Fails for (0, 9, 0, 8, 1, 1, 9)

[]
Fastest checker: genetic
Program 0:
t1 = y s<= 0x7;
t2 = z * c;
res1 = 0x7 + 0x7;
Program 1:
t1 = 0xf - c;
t2 = c >>> y;
t3 = x != z;
t4 = 0xf + t1;
res1 = min(0xf, z);

Fastest checker: cbmc
Fails for (0, 0, 0, 11, 0, 1, 14)

[]
Fastest checker: genetic
Program 0:
res1 = z <= w;
Program 1:
t1 = z - c;
t2 = 0x8 ==> x;
res1 = max(t2, z);

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~w;
t2 = 0x1 + 0x1;
t3 = 0x1 + 0x1;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = ~y;
t2 = -c;
t3 = y < x;
res1 = z | u;

Fastest checker: explicit
Fails for (0, 1, 0, 15, 4, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z != v;
t2 = y >>> x;
t3 = w >>> c;
t4 = x ==> u;
res1 = v | t4;
Program 1:
res1 = 0x7 - c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = z <= w;
Program 1:
t1 = -c;
t2 = 0x1 s<= 0x1;
res1 = z >> t2;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 3, 3, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 | 0x1;
t2 = 0x1 * 0x1;
t3 = 0x1 + 0x1;
t4 = max(w, 0x1);
res1 = z <= t4;
Program 1:
t1 = max(y, 0x8);
t2 = -c;
res1 = min(z, w);

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 14, 14, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + 0x7;
t2 = x ? u : t1;
t3 = 0x7 == 0x7;
res1 = z ==> w;
Program 1:
t1 = ~y;
t2 = w - c;
res1 = t2 < c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 15, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + 0x7;
t2 = max(c, t1);
t3 = 0x7 + 0x7;
t4 = v ^ 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = z - c;
t2 = t1 + 0xf;
t3 = z <= c;
t4 = min(z, 0xf);
res1 = u << v;

Fastest checker: cbmc
Fails for (1, 1, 4, 0, 0, 13, 12)

[]
Fastest checker: genetic
Program 0:
t1 = ~c;
res1 = c <= c;
Program 1:
t1 = -c;
t2 = 0x7 - c;
res1 = t2 < z;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 0, 15, 8)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf + 0xf;
Program 1:
t1 = x * 0x7;
t2 = w - c;
t3 = -c;
t4 = t2 + 0x7;
res1 = 0x7 == 0x7;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 15, 8)

[]
Fastest checker: genetic
Program 0:
t1 = z s< y;
res1 = z ==> w;
Program 1:
t1 = z - y;
res1 = w - y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1, 15, 8)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 << c;
Program 1:
t1 = v - c;
t2 = ~y;
t3 = 0x7 + z;
t4 = 0x7 <= y;
res1 = v * t4;

Fastest checker: explicit
Fails for (0, 6, 0, 6, 1, 15, 8)

[]
Fastest checker: genetic
Program 0:
t1 = w - c;
t2 = 0x0 + 0x0;
res1 = w ==> z;
Program 1:
t1 = w - c;
t2 = 0x0 | z;
t3 = 0x0 + 0x0;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 8, 15, 8)

[]







Timeout
Perf counters:
{'genetic': 60, 'cbmc': 29, 'explicit': 31, 'timeout': 1, 'iterations': 61}
Perf timers:
verify: 30.51s
checker: 179.83s
gcc: 0.39s
_: 180.00s
synth: 149.47s
