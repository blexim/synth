Using seed: 1337
[]
Fastest checker: genetic
Program 0:
res1 = 0x0 s<= y;
Program 1:
res1 = x & x;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf - y;
t2 = t1 < t1;
t3 = t2 - y;
t4 = t3 != 0xf;
res1 = t4 s<= t2;
Program 1:
t1 = 0x7 % 0x7;
t2 = y s< 0x7;
t3 = 0x7 == y;
t4 = t1 >>> t3;
res1 = y <= x;

Fastest checker: explicit
Fails for (2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = y << 0x7;
Program 1:
t1 = 0x8 - 0x8;
t2 = t1 < 0x8;
t3 = x / y;
t4 = t3 < y;
res1 = t1 & x;

Fastest checker: explicit
Fails for (9, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 == y;
res1 = y & t1;
Program 1:
t1 = 0x7 & x;
t2 = 0x7 & y;
res1 = max(0x7, t2);

Fastest checker: explicit
Fails for (8, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 * x;
t2 = y >> y;
res1 = y << 0x7;
Program 1:
t1 = x >> 0x1;
t2 = 0x1 + 0x1;
t3 = min(t2, 0x1);
res1 = 0x1 * 0x1;

Fastest checker: explicit
Fails for (9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, y);
res1 = 0x1 s<= y;
Program 1:
t1 = 0x1 / 0x1;
t2 = 0x1 == t1;
t3 = t1 != x;
t4 = x + 0x1;
res1 = t2 < 0x1;

Fastest checker: explicit
Fails for (15, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y % 0x8;
t2 = min(t1, y);
t3 = y < y;
t4 = t2 < y;
res1 = t1 * 0x8;
Program 1:
t1 = y ^ x;
res1 = x / y;

Fastest checker: explicit
Fails for (1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 == y;
res1 = t1 + t1;
Program 1:
t1 = 0x0 < x;
res1 = x ^ 0x0;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 1.85s

Program 0:
t1 = 0x1 == y;
res1 = t1 + t1;
Program 1:
t1 = 0x0 < x;
res1 = x ^ 0x0;


Perf counters:
{'genetic': 8, 'cbmc': 1, 'explicit': 8, 'iterations': 8}
Perf timers:
verify: 1.08s
checker: 1.83s
gcc: 0.53s
_: 1.85s
synth: 0.76s
