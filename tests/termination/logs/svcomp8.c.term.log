Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = z >> y;
res1 = z ^ 0x1;
Program 1:
t1 = z ? x : 0x0;
t2 = ~t1;
res1 = t2 <= t2;

Fastest checker: explicit
Fails for (7, 9, 12)

[]
Fastest checker: genetic
Program 0:
t1 = z % y;
t2 = t1 ? 0xf : t1;
t3 = t1 ? t1 : 0xf;
res1 = t2 + 0xf;
Program 1:
t1 = -z;
t2 = y + y;
t3 = -x;
res1 = x | t3;

Fastest checker: explicit
Fails for (4, 10, 12)

[]
Fastest checker: genetic
Program 0:
res1 = y * 0x7;
Program 1:
t1 = y <= y;
t2 = 0x1 << y;
t3 = z ==> x;
t4 = y * t2;
res1 = -x;

Fastest checker: explicit
Fails for (7, 10, 12)

[]
Fastest checker: genetic
Program 0:
res1 = x ==> y;
Program 1:
t1 = 0xf ==> z;
t2 = z s<= z;
t3 = 0xf & y;
res1 = t2 - x;

Fastest checker: explicit
Fails for (1, 11, 12)

[]
Fastest checker: genetic
Program 0:
t1 = x == y;
t2 = x >>> z;
res1 = t1 ? y : z;
Program 1:
t1 = z s< z;
t2 = x >>> 0x8;
t3 = t1 ==> 0x8;
res1 = 0x8 + x;

Fastest checker: explicit
Fails for (0, 0, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y | y;
t2 = ~z;
t3 = max(0x0, 0x0);
t4 = y != t3;
res1 = t3 + t2;
Program 1:
t1 = 0x8 != z;
res1 = 0x8 ^ x;

Fastest checker: explicit
Fails for (1, 0, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x == x;
t2 = min(z, t1);
res1 = z >> y;
Program 1:
t1 = z + y;
res1 = ~t1;

Fastest checker: explicit
Fails for (1, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z ? 0x7 : 0x7;
t2 = y & y;
t3 = t2 s< t2;
t4 = 0x7 s< y;
res1 = 0x7 ? 0x7 : t3;
Program 1:
t1 = ~y;
t2 = z % t1;
res1 = t2 % z;

Fastest checker: explicit
Fails for (1, 14, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 - z;
t2 = y <= y;
res1 = z / t2;
Program 1:
t1 = y <= z;
t2 = 0xf + 0xf;
t3 = 0xf + 0xf;
t4 = 0xf s< x;
res1 = 0xf + 0xf;

Fastest checker: explicit
Fails for (2, 14, 13)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 * z;
Program 1:
t1 = y ^ z;
t2 = z >> y;
t3 = x ==> t2;
t4 = 0x0 + 0x0;
res1 = 0x0 - t1;

Fastest checker: explicit
Fails for (1, 14, 14)

[]
Fastest checker: genetic
Program 0:
t1 = z & z;
t2 = z s< z;
res1 = -z;
Program 1:
t1 = x * x;
t2 = x ==> t1;
t3 = ~0x7;
t4 = 0x7 / z;
res1 = t4 - x;

Fastest checker: explicit
Fails for (1, 0, 15)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x1;
t2 = y + x;
t3 = max(x, x);
t4 = y ==> z;
res1 = 0x1 + 0x1;
Program 1:
t1 = max(z, 0x7);
res1 = 0x7 == x;

Fastest checker: explicit
Fails for (6, 1, 15)

[]
Fastest checker: genetic
Program 0:
t1 = max(0xf, x);
t2 = z ^ x;
t3 = z != z;
res1 = 0xf | t1;
Program 1:
t1 = x - y;
t2 = z s< y;
res1 = x <= 0x8;

Fastest checker: explicit
Fails for (1, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y >> x;
t2 = ~z;
t3 = 0x7 + 0x7;
t4 = 0x7 + 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = 0x1 * y;
t2 = ~y;
t3 = 0x1 + 0x1;
t4 = z != t2;
res1 = t3 * 0x1;

Fastest checker: explicit
Fails for (1, 15, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + 0x7;
t2 = 0x7 + 0x7;
res1 = z == z;
Program 1:
t1 = z >>> y;
t2 = 0x0 s< x;
t3 = 0x0 + 0x0;
t4 = 0x0 + 0x0;
res1 = y == z;

Fastest checker: explicit
Fails for (2, 15, 0)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf + 0xf;
Program 1:
t1 = z == 0x0;
t2 = x + y;
t3 = 0x0 + 0x0;
res1 = z s<= x;

Fastest checker: explicit
Fails for (1, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = y >>> z;
t3 = z | x;
res1 = 0xf + 0xf;
Program 1:
t1 = x + z;
t2 = ~z;
t3 = x - z;
res1 = t2 != y;

Fastest checker: explicit
Fails for (1, 14, 1)

[]







Timeout
Perf counters:
{'genetic': 17, 'explicit': 17, 'timeout': 1, 'iterations': 18}
Perf timers:
verify: 0.23s
checker: 179.97s
gcc: 0.36s
_: 180.00s
synth: 179.77s
