Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = i >> i;
t2 = i != i;
t3 = j & t2;
t4 = j / 0xf;
res1 = j >>> i;
Program 1:
res1 = min(i, i);

Fastest checker: explicit
Fails for (8, 0)

[]
Fastest checker: genetic
Program 0:
t1 = i + i;
t2 = 0x1 % j;
t3 = t2 != t1;
res1 = 0x1 >> t3;
Program 1:
res1 = -0x0;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 << 0x8;
Program 1:
t1 = j == 0x7;
t2 = ~j;
res1 = 0x7 == j;

Fastest checker: explicit
Fails for (15, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i * j;
t2 = j + 0x1;
t3 = 0x1 == j;
res1 = min(j, t3);
Program 1:
res1 = i ==> j;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 s<= 0x1;
res1 = t1 + 0x1;
Program 1:
t1 = i ? i : i;
t2 = -0x8;
res1 = t2 == j;

Fastest checker: explicit
Fails for (9, 0)

[]
Fastest checker: genetic
Program 0:
t1 = i + j;
t2 = j * 0x0;
t3 = j >> 0x0;
t4 = t2 == t2;
res1 = i s<= t1;
Program 1:
t1 = i s<= j;
t2 = i >> t1;
res1 = t1 s< j;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Program 0:
t1 = i >> 0x8;
res1 = i s<= j;
Program 1:
res1 = i & i;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 8
[]
Fastest checker: genetic
Program 0:
t1 = 0x1 >> j;
res1 = t1 ^ i;
Program 1:
t1 = j ? i : 0x0;
t2 = ~0x0;
res1 = i <= t2;

Fastest checker: explicit
Fails for (0, 28)

[]
Fastest checker: genetic
Program 0:
t1 = i >> i;
t2 = i != i;
t3 = j & t2;
t4 = j / 0xf;
res1 = j >>> i;
Program 1:
res1 = min(i, i);

Fastest checker: explicit
Fails for (255, 28)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 << j;
Program 1:
t1 = j ? i : i;
t2 = 0x0 s<= 0x0;
t3 = min(t1, t2);
t4 = t2 ? t1 : t3;
res1 = 0x0 & t4;

Fastest checker: explicit
Fails for (4, 29)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf < 0xf;
res1 = 0xf | 0xf;
Program 1:
t1 = i >>> 0xf;
t2 = t1 <= i;
res1 = t1 ^ i;

Fastest checker: explicit
Fails for (128, 129)

[]
Fastest checker: genetic
Program 0:
res1 = j ==> j;
Program 1:
res1 = 0x0 ^ i;

Fastest checker: explicit
Fails for (128, 0)

[]
Fastest checker: genetic
Program 0:
t1 = i * j;
t2 = j + 0x1;
t3 = 0x1 == j;
res1 = min(j, t3);
Program 1:
res1 = i ==> j;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf - 0xf;
t2 = t1 ? j : t1;
t3 = ~i;
res1 = 0xf ==> i;
Program 1:
t1 = max(i, i);
res1 = j / 0x7;

Fastest checker: explicit
Fails for (132, 2)

[]
Fastest checker: genetic
Program 0:
t1 = i / 0x8;
t2 = t1 >> t1;
res1 = t1 | t1;
Program 1:
t1 = j << j;
res1 = i >>> 0x0;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = ~i;
res1 = i * t1;
Program 1:
t1 = max(i, i);
res1 = i - t1;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = j * j;
res1 = t1 >> i;
Program 1:
res1 = i - 0x8;

Fastest checker: explicit
Fails for (143, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i ^ 0x1;
t2 = t1 * i;
res1 = i s<= i;
Program 1:
res1 = i + 0xf;

Fastest checker: explicit
Fails for (128, 241)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = i != 0xf;
t3 = j == t2;
t4 = ~i;
res1 = i | j;
Program 1:
res1 = i + 0x7;

Fastest checker: explicit
Fails for (128, 249)

[]
Fastest checker: genetic
Program 0:
t1 = j <= j;
res1 = 0x8 >> 0x8;
Program 1:
t1 = 0xf >> i;
t2 = t1 << i;
res1 = i % 0xf;

Fastest checker: explicit
Fails for (128, 255)

[]
Fastest checker: genetic
Program 0:
t1 = i s<= 0x0;
t2 = t1 ==> t1;
res1 = t1 s< j;
Program 1:
t1 = max(0x0, 0x0);
t2 = t1 >>> j;
res1 = t2 | i;

Fastest checker: explicit
Correct for wordlen=8
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Couldn't generalize :-(
Increasing wordlen to 16
[]
Fastest checker: genetic
Program 0:
t1 = 0x1 >> j;
res1 = t1 ^ i;
Program 1:
t1 = j ? i : 0x0;
t2 = ~0x0;
res1 = i <= t2;

Fastest checker: cbmc
Fails for (49217, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i >> i;
t2 = i != i;
t3 = j & t2;
t4 = j / 0xf;
res1 = j >>> i;
Program 1:
res1 = min(i, i);

Fastest checker: explicit
Fails for (65535, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 << j;
Program 1:
t1 = j ? i : i;
t2 = 0x0 s<= 0x0;
t3 = min(t1, t2);
t4 = t2 ? t1 : t3;
res1 = 0x0 & t4;

Fastest checker: explicit
Fails for (32780, 2)

[]
Fastest checker: genetic
Program 0:
res1 = j ==> j;
Program 1:
res1 = 0x0 ^ i;

Fastest checker: cbmc
Fails for (63488, 0)

[]
Fastest checker: genetic
Program 0:
t1 = j s< i;
res1 = t1 | 0x7;
Program 1:
res1 = -j;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i * j;
t2 = j + 0x1;
t3 = 0x1 == j;
res1 = min(j, t3);
Program 1:
res1 = i ==> j;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = i + j;
t2 = j * 0x0;
t3 = j >> 0x0;
t4 = t2 == t2;
res1 = i s<= t1;
Program 1:
t1 = i s<= j;
t2 = i >> t1;
res1 = t1 s< j;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Program 0:
t1 = i / 0x8;
t2 = t1 >> t1;
res1 = t1 | t1;
Program 1:
t1 = j << j;
res1 = i >>> 0x0;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = i ^ 0x1;
t2 = t1 * i;
res1 = i s<= i;
Program 1:
res1 = i + 0xf;

Fastest checker: cbmc
Fails for (32768, 65521)

[]
Fastest checker: genetic
Program 0:
t1 = i s< 0x0;
res1 = ~j;
Program 1:
res1 = ~j;

Fastest checker: cbmc
Fails for (65534, 12289)

[]
Fastest checker: genetic
Program 0:
t1 = i ^ j;
t2 = t1 <= t1;
res1 = 0xf < i;
Program 1:
t1 = -j;
t2 = t1 s<= j;
t3 = ~0xf;
res1 = j <= t1;

Fastest checker: explicit
Fails for (65535, 12289)

[]
Fastest checker: genetic
Program 0:
t1 = i | 0x7;
t2 = max(j, t1);
t3 = 0x7 | t1;
t4 = t2 ^ 0x7;
res1 = t3 >>> t3;
Program 1:
t1 = 0x7 >>> 0x7;
t2 = 0x7 & 0x7;
res1 = 0x7 * i;

Fastest checker: cbmc
Fails for (65535, 16400)

[]
Fastest checker: genetic
Program 0:
t1 = i s<= 0x0;
t2 = t1 ==> t1;
res1 = t1 s< j;
Program 1:
t1 = max(0x0, 0x0);
t2 = t1 >>> j;
res1 = t2 | i;

Fastest checker: cbmc
Correct for wordlen=16
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Couldn't generalize :-(
Increasing wordlen to 32
[]
Fastest checker: genetic
Program 0:
t1 = j | i;
t2 = -t1;
res1 = t1 >>> j;
Program 1:
t1 = 0xf << 0xf;
t2 = t1 <= j;
res1 = i >> 0xf;

Fastest checker: cbmc
Fails for (507955, 720896)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 >> j;
res1 = t1 ^ i;
Program 1:
t1 = j ? i : 0x0;
t2 = ~0x0;
res1 = i <= t2;

Fastest checker: cbmc
Fails for (2147585122, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 << j;
Program 1:
t1 = j ? i : i;
t2 = 0x0 s<= 0x0;
t3 = min(t1, t2);
t4 = t2 ? t1 : t3;
res1 = 0x0 & t4;

Fastest checker: explicit
Fails for (-2147382148, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf < 0xf;
res1 = 0xf | 0xf;
Program 1:
t1 = i >>> 0xf;
t2 = t1 <= i;
res1 = t1 ^ i;

Fastest checker: cbmc
Fails for (3221224960, 0)

[]
Fastest checker: genetic
Program 0:
t1 = j s< i;
res1 = t1 | 0x7;
Program 1:
res1 = -j;

Fastest checker: cbmc
Fails for (0, 1073741825)

[]
Fastest checker: genetic
Program 0:
res1 = 0x8 << 0x8;
Program 1:
t1 = j == 0x7;
t2 = ~j;
res1 = 0x7 == j;

Fastest checker: explicit
Fails for (6, 1073741825)

[]
Fastest checker: genetic
Program 0:
t1 = i * j;
t2 = j + 0x1;
t3 = 0x1 == j;
res1 = min(j, t3);
Program 1:
res1 = i ==> j;

Fastest checker: cbmc
Fails for (1, 1610629248)

[]
Fastest checker: genetic
Program 0:
t1 = max(j, i);
t2 = j & t1;
res1 = max(t2, 0x1);
Program 1:
res1 = i - j;

Fastest checker: cbmc
Fails for (1711276032, 1711276033)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf ^ i;
t2 = 0xf ==> j;
t3 = j + i;
t4 = j != j;
res1 = t3 << t2;
Program 1:
t1 = j * j;
t2 = j | 0xf;
t3 = i + t2;
res1 = i ==> 0xf;

Fastest checker: cbmc
Fails for (4294967295, 2)

[]
Fastest checker: genetic
Program 0:
t1 = i / 0x8;
t2 = t1 >> t1;
res1 = t1 | t1;
Program 1:
t1 = j << j;
res1 = i >>> 0x0;

Fastest checker: cbmc
Fails for (3221225471, 8)

[]
Fastest checker: genetic
Program 0:
t1 = i ^ 0x1;
t2 = t1 * i;
res1 = i s<= i;
Program 1:
res1 = i + 0xf;

Fastest checker: cbmc
Fails for (3221224960, 4294967281)

[]
Fastest checker: genetic
Program 0:
t1 = i ^ i;
t2 = t1 s<= j;
res1 = 0x7 * 0x7;
Program 1:
t1 = 0x7 ==> i;
t2 = 0x7 ^ j;
res1 = t2 << 0x7;

Fastest checker: explicit
Fails for (-1073742329, -15)

[]
Fastest checker: genetic
Program 0:
t1 = i s< 0x0;
res1 = ~j;
Program 1:
res1 = ~j;

Fastest checker: cbmc
Fails for (4294967294, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = i != 0xf;
t3 = j == t2;
t4 = ~i;
res1 = i | j;
Program 1:
res1 = i + 0x7;

Fastest checker: cbmc
Fails for (4294967295, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i == i;
t2 = j >> 0xf;
t3 = j | 0xf;
res1 = t3 <= 0xf;
Program 1:
t1 = j ==> 0x1;
t2 = 0x1 / i;
t3 = max(t2, 0x1);
res1 = i + t1;

Fastest checker: cbmc
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = i s<= 0x0;
t2 = t1 ==> t1;
res1 = t1 s< j;
Program 1:
t1 = max(0x0, 0x0);
t2 = t1 >>> j;
res1 = t2 | i;

Fastest checker: cbmc
Fails for (2147483647, 2147483648)

[]
Fastest checker: genetic
Program 0:
t1 = i - 0x8;
t2 = i s<= 0x8;
t3 = t2 s< t1;
res1 = -t3;
Program 1:
t1 = 0x8 ^ 0x8;
res1 = 0x8 | i;

Fastest checker: cbmc
Fails for (3212804096, 9)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 / 0x8;
t2 = max(t1, i);
res1 = max(j, 0x8);
Program 1:
t1 = 0x7 < 0x7;
t2 = i ^ t1;
t3 = i - 0x7;
res1 = t2 + j;

Fastest checker: cbmc
Fails for (3489661312, 7)

[]
Fastest checker: genetic
Program 0:
t1 = j ^ i;
res1 = 0x7 s< t1;
Program 1:
t1 = min(i, i);
res1 = j s< 0x1;

Fastest checker: cbmc
Fails for (2951741543, 2951741552)

[]
Fastest checker: genetic
Program 0:
t1 = j s<= i;
t2 = -0x1;
t3 = t1 | 0x1;
t4 = i << i;
res1 = 0x1 >>> t4;
Program 1:
t1 = j + j;
t2 = i & t1;
t3 = i s<= t2;
res1 = 0xf - t1;

Fastest checker: cbmc
Fails for (2927214595, 8516)

[]
Fastest checker: genetic
Program 0:
t1 = j + 0x7;
t2 = j s< i;
t3 = 0x7 & j;
t4 = i + t1;
res1 = j + t1;
Program 1:
t1 = 0x8 + i;
res1 = t1 >>> 0x8;

Fastest checker: cbmc
Fails for (2952790015, 4294967288)

[]
Fastest checker: genetic
Program 0:
res1 = j <= j;
Program 1:
t1 = 0xf - j;
t2 = 0xf << t1;
t3 = i & 0xf;
res1 = t3 < 0xf;

Fastest checker: cbmc
Fails for (4294865835, 1073741839)

[]
Fastest checker: genetic
Program 0:
res1 = j < 0xf;
Program 1:
t1 = max(i, i);
res1 = j s< t1;

Fastest checker: explicit
Fails for (14, 1073741840)

[]
Fastest checker: genetic
Program 0:
t1 = j + 0x7;
t2 = j s< i;
t3 = 0x7 & j;
t4 = i + t1;
res1 = j + t1;
Program 1:
t1 = 0xf ? i : i;
res1 = t1 < 0xf;

Fastest checker: cbmc
Fails for (3221225472, 15)

[]
Fastest checker: genetic
Program 0:
t1 = j << -0x80000000;
res1 = max(-0x80000000, i);
Program 1:
res1 = 0x1 + i;

Fastest checker: cbmc
Fails for (4294967293, 4294967295)

[]
Fastest checker: genetic
Program 0:
t1 = j <= 0x8;
t2 = t1 != i;
t3 = j < j;
t4 = j == t3;
res1 = i >> 0x8;
Program 1:
res1 = i - 0xf;

Fastest checker: cbmc
Fails for (254, 256)

[]
Fastest checker: genetic
Program 0:
res1 = i + j;
Program 1:
t1 = 0x8 - j;
res1 = i < i;

Fastest checker: cbmc
Fails for (8, 16376)

[]
Fastest checker: genetic
Program 0:
t1 = j s< i;
t2 = -i;
t3 = j ^ i;
res1 = 0x8 + 0x8;
Program 1:
t1 = min(i, 0x7);
t2 = 0x7 & 0x7;
t3 = 0x7 + i;
res1 = t3 <= j;

Fastest checker: cbmc
Correct for wordlen=32







Finished in 35.12s

Program 0:
t1 = j s< i;
t2 = -i;
t3 = j ^ i;
res1 = 0x8 + 0x8;
Program 1:
t1 = min(i, 0x7);
t2 = 0x7 & 0x7;
t3 = 0x7 + i;
res1 = t3 <= j;


Perf counters:
{'genetic': 62, 'cbmc': 34, 'explicit': 37, 'iterations': 62}
Perf timers:
gcc: 1.45s
verify: 32.12s
checker: 34.99s
generalize: 1.85s
synth: 2.97s
_: 35.12s
