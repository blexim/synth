Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
t2 = k s< nondet_0;
t3 = y >> t1;
res1 = d >> t2;
Program 1:
t1 = z ? z : nondet_0;
t2 = 0x8 != nondet_0;
res1 = 0x8 + nondet_2;

Fastest checker: explicit
Fails for (0, 0, 7, 9, 2, 13, 6, 12)

[]
Fastest checker: genetic
Program 0:
t1 = z | k;
t2 = z ^ nondet_0;
res1 = x s<= t2;
Program 1:
res1 = nondet_1 << nondet_1;

Fastest checker: explicit
Fails for (0, 0, 8, 9, 2, 13, 6, 12)

[]
Fastest checker: genetic
Program 0:
t1 = -0xf;
res1 = z == d;
Program 1:
t1 = ~nondet_0;
t2 = y >>> t1;
t3 = t2 ^ t2;
res1 = -k;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 2, 13, 6, 12)

[]
Fastest checker: genetic
Program 0:
t1 = x % 0x7;
t2 = k % 0x7;
res1 = k * t1;
Program 1:
t1 = d s< nondet_2;
t2 = k * z;
t3 = x >> nondet_2;
t4 = d & nondet_1;
res1 = nondet_0 - d;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 13, 6, 12)

[]
Fastest checker: genetic
Program 0:
t1 = ~k;
t2 = nondet_2 < k;
t3 = z < y;
res1 = y >> y;
Program 1:
t1 = nondet_2 ==> y;
t2 = z >> t1;
t3 = min(t1, t1);
t4 = t3 != 0x0;
res1 = k == nondet_2;

Fastest checker: cbmc
Fails for (8, 0, 0, 0, 0, 0, 0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = d <= 0x0;
res1 = ~y;
Program 1:
t1 = nondet_1 s< d;
t2 = z - t1;
t3 = t1 << y;
res1 = k & d;

Fastest checker: explicit
Fails for (0, 8, 0, 0, 0, 0, 0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_2, x);
t2 = k - t1;
res1 = ~nondet_1;
Program 1:
t1 = z >> 0x0;
t2 = y s< d;
t3 = nondet_1 ^ x;
t4 = nondet_1 & t1;
res1 = x | k;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 0, 0, 0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = z < nondet_0;
t2 = 0x0 s< 0x0;
t3 = nondet_1 * nondet_2;
res1 = 0x0 | d;
Program 1:
t1 = z % k;
res1 = d * z;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0, 0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = min(0xf, nondet_1);
t2 = d ? t1 : k;
res1 = 0xf >> 0xf;
Program 1:
t1 = 0x8 ^ k;
t2 = z - nondet_0;
t3 = t2 | 0x8;
t4 = d <= y;
res1 = z ? nondet_1 : k;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 0, 0, 0, 8)

[]
Fastest checker: genetic
Program 0:
res1 = d << 0x1;
Program 1:
t1 = min(d, z);
t2 = y s<= z;
t3 = k != y;
res1 = y + t1;

Fastest checker: cbmc
Fails for (0, 0, 1, 2, 0, 0, 0, 9)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_1, y);
t2 = ~z;
t3 = nondet_0 * d;
res1 = t2 / z;
Program 1:
t1 = nondet_0 >>> z;
t2 = x | k;
t3 = x == nondet_1;
res1 = k <= nondet_2;

Fastest checker: cbmc
Fails for (4, 5, 2, 2, 8, 6, 4, 0)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 s<= z;
Program 1:
t1 = 0x1 ==> z;
t2 = x ? z : x;
res1 = nondet_1 ? nondet_1 : nondet_1;

Fastest checker: cbmc
Fails for (0, 0, 0, 0, 1, 0, 7, 2)

[]
Fastest checker: genetic
Program 0:
t1 = k >> nondet_0;
t2 = nondet_1 >> nondet_1;
t3 = 0x7 <= 0x7;
res1 = d ^ t2;
Program 1:
t1 = x ==> nondet_1;
t2 = nondet_2 ==> d;
t3 = nondet_0 <= z;
res1 = z + nondet_2;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 1, 0, 7, 2)

[]
Fastest checker: genetic
Program 0:
t1 = z == 0x0;
t2 = nondet_1 == nondet_1;
res1 = t2 == z;
Program 1:
t1 = nondet_2 ^ d;
t2 = x < 0x1;
t3 = t2 - x;
t4 = 0x1 ? nondet_2 : x;
res1 = nondet_0 - t1;

Fastest checker: cbmc
Fails for (0, 0, 0, 15, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
res1 = x ==> z;
Program 1:
t1 = nondet_0 - z;
t2 = k >> k;
t3 = 0xf + 0xf;
res1 = z >> k;

Fastest checker: explicit
Fails for (0, 0, 1, 15, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 s< k;
t2 = 0xf ==> 0xf;
t3 = y <= x;
res1 = t3 s<= z;
Program 1:
t1 = y % k;
t2 = d s<= 0x1;
t3 = x - z;
res1 = t1 >>> nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y >>> nondet_2;
t2 = nondet_1 | 0x1;
t3 = x s< t2;
t4 = d << z;
res1 = y ==> z;
Program 1:
t1 = z | y;
t2 = z ^ d;
t3 = 0xf ^ z;
t4 = z >>> k;
res1 = z & nondet_0;

Fastest checker: explicit
Fails for (0, 0, 2, 0, 1, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 != y;
res1 = 0x1 s<= z;
Program 1:
t1 = 0xf + 0xf;
t2 = k ^ z;
res1 = z ==> nondet_2;

Fastest checker: cbmc
Fails for (0, 0, 0, 0, 0, 0, 5, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z <= d;
t2 = y - nondet_0;
res1 = min(z, t1);
Program 1:
t1 = d ^ z;
res1 = d >> nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 0, 0, 5, 4)

[]
Fastest checker: genetic
Program 0:
t1 = k ? y : z;
t2 = 0xf + 0xf;
t3 = z * z;
res1 = t3 * d;
Program 1:
res1 = z ^ d;

Fastest checker: cbmc
Fails for (0, 0, 0, 8, 0, 0, 7, 15)

[]
Fastest checker: genetic
Program 0:
t1 = z < k;
t2 = z <= d;
t3 = nondet_2 ? z : d;
t4 = z <= d;
res1 = t3 * d;
Program 1:
t1 = d ^ z;
t2 = y + d;
res1 = d - z;

Fastest checker: explicit
Fails for (1, 0, 0, 8, 0, 0, 7, 15)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + z;
t2 = z <= d;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = d >>> t1;
Program 1:
t1 = d ^ z;
t2 = d - z;
t3 = d ==> z;
t4 = d ^ z;
res1 = nondet_2 == nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 9, 0, 0, 7, 15)

[]
Fastest checker: genetic
Program 0:
t1 = z s<= d;
t2 = max(k, d);
res1 = z == t1;
Program 1:
t1 = d % nondet_2;
t2 = d - z;
t3 = d ^ z;
res1 = y < z;

Fastest checker: cbmc
Fails for (0, 0, 0, 10, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = d << z;
res1 = d < t1;
Program 1:
t1 = x * k;
res1 = z >> nondet_0;

Fastest checker: cbmc
Fails for (0, 0, 7, 2, 6, 0, 6, 5)

[]







Timeout
Perf counters:
{'genetic': 24, 'cbmc': 9, 'explicit': 15, 'timeout': 1, 'iterations': 25}
Perf timers:
verify: 9.07s
checker: 179.95s
gcc: 0.37s
_: 180.00s
synth: 170.93s
