Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = x + nondet_1;
res1 = t1 - nondet_1;
Program 1:
t1 = y == x;
t2 = max(x, t1);
res1 = nondet_0 - nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 12)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_1 ==> nondet_0;
Program 1:
res1 = x ^ nondet_0;

Fastest checker: explicit
Fails for (1, 0, 0, 12)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 == nondet_0;
t2 = 0x8 + nondet_0;
t3 = x >>> t1;
res1 = 0x8 & 0x8;
Program 1:
t1 = nondet_0 < 0x8;
res1 = x + nondet_0;

Fastest checker: explicit
Fails for (1, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = ~y;
Program 1:
t1 = x s<= nondet_0;
t2 = 0x1 < x;
res1 = y << t2;

Fastest checker: explicit
Fails for (0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y ==> 0x8;
t2 = t1 + nondet_0;
res1 = nondet_1 != 0x8;
Program 1:
t1 = ~y;
t2 = x & y;
t3 = max(t1, x);
t4 = nondet_0 + nondet_1;
res1 = 0x7 & t2;

Fastest checker: explicit
Fails for (8, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 << nondet_1;
Program 1:
t1 = y & y;
t2 = min(y, x);
t3 = y == 0x8;
t4 = min(t2, t3);
res1 = t4 < t3;

Fastest checker: explicit
Fails for (0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> nondet_1;
t2 = y s<= x;
t3 = 0x1 ^ t1;
res1 = nondet_0 ==> y;
Program 1:
res1 = x * y;

Fastest checker: explicit
Fails for (2, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 << x;
t2 = y & nondet_0;
res1 = ~t1;
Program 1:
t1 = x | 0x0;
t2 = t1 != 0x0;
res1 = min(y, y);

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 1.52s

Program 0:
t1 = 0x1 << x;
t2 = y & nondet_0;
res1 = ~t1;
Program 1:
t1 = x | 0x0;
t2 = t1 != 0x0;
res1 = min(y, y);


Perf counters:
{'genetic': 8, 'cbmc': 1, 'explicit': 8, 'iterations': 8}
Perf timers:
verify: 1.16s
checker: 1.50s
gcc: 0.54s
_: 1.52s
synth: 0.36s
