Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ==> z;
t2 = x / x;
t3 = nondet_0 * nondet_0;
res1 = max(t2, 0x8);
Program 1:
t1 = z s< n;
res1 = x s<= z;

Fastest checker: explicit
Fails for (0, 10, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y >> 0x1;
res1 = y ^ x;
Program 1:
t1 = x ? n : x;
t2 = ~z;
res1 = t2 <= x;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 != m;
t2 = min(z, t1);
res1 = min(0xf, x);
Program 1:
t1 = m << z;
res1 = t1 < z;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z << y;
t2 = z * y;
t3 = x >>> y;
t4 = n != y;
res1 = t4 ? t3 : x;
Program 1:
t1 = -y;
t2 = nondet_0 >> z;
t3 = n >>> nondet_0;
res1 = nondet_0 >> t3;

Fastest checker: explicit
Fails for (0, 5, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = max(x, nondet_0);
Program 1:
t1 = 0x1 ? x : m;
res1 = -y;

Fastest checker: explicit
Fails for (0, 11, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m << z;
t2 = n != n;
res1 = -x;
Program 1:
t1 = z << m;
res1 = z - n;

Fastest checker: explicit
Fails for (0, 13, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n ? z : 0xf;
t2 = t1 * m;
t3 = nondet_0 ^ n;
t4 = -z;
res1 = min(0xf, x);
Program 1:
t1 = n % y;
t2 = min(z, z);
t3 = m >>> t2;
res1 = 0xf * t3;

Fastest checker: explicit
Fails for (0, 9, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 * x;
t2 = z | nondet_0;
t3 = t2 - z;
res1 = -x;
Program 1:
t1 = z ==> 0x7;
t2 = ~t1;
t3 = z * t2;
t4 = nondet_0 << t3;
res1 = n != y;

Fastest checker: explicit
Fails for (4, 9, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = max(m, m);
t2 = n - x;
res1 = min(x, m);
Program 1:
t1 = z >>> x;
t2 = y + 0x7;
t3 = n % x;
res1 = m >>> t1;

Fastest checker: explicit
Fails for (0, 2, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = min(0x1, m);
t2 = n ==> x;
res1 = x & 0x1;
Program 1:
t1 = y >> y;
res1 = y << n;

Fastest checker: explicit
Fails for (0, 3, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = min(0x7, x);
Program 1:
t1 = n + y;
t2 = -t1;
t3 = m == z;
res1 = m ^ n;

Fastest checker: explicit
Fails for (0, 7, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m >>> z;
res1 = x % n;
Program 1:
res1 = m - y;

Fastest checker: explicit
Fails for (0, 11, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x - n;
res1 = x >> t1;
Program 1:
t1 = z ^ 0x7;
t2 = m / 0x7;
res1 = t2 & 0x7;

Fastest checker: explicit
Fails for (0, 1, 9, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y <= y;
t2 = m s<= t1;
t3 = m / n;
res1 = x ? m : nondet_0;
Program 1:
t1 = z < n;
t2 = m - y;
t3 = y % x;
t4 = nondet_0 << y;
res1 = min(t3, 0xf);

Fastest checker: explicit
Fails for (1, 1, 9, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ^ z;
t2 = t1 ? t1 : z;
res1 = x % n;
Program 1:
t1 = max(nondet_0, x);
t2 = -m;
t3 = min(z, z);
t4 = x == 0x8;
res1 = z - t2;

Fastest checker: explicit
Fails for (0, 12, 9, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 | z;
t2 = -x;
t3 = nondet_0 + m;
res1 = t2 != x;
Program 1:
t1 = y * 0xf;
t2 = z == y;
t3 = min(y, x);
res1 = z < n;

Fastest checker: explicit
Fails for (0, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x + z;
t2 = nondet_0 ==> m;
res1 = x << nondet_0;
Program 1:
t1 = n + z;
res1 = z s<= t1;

Fastest checker: explicit
Fails for (0, 1, 0, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n ? n : z;
res1 = x % n;
Program 1:
t1 = x << 0x0;
t2 = z - n;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (0, 15, 0, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = m ? x : x;
Program 1:
t1 = z >> y;
t2 = min(n, n);
t3 = 0x0 + 0x0;
res1 = z s< n;

Fastest checker: explicit
Fails for (0, 3, 1, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m ==> m;
t2 = n | nondet_0;
t3 = t1 * x;
res1 = t3 / 0x7;
Program 1:
t1 = 0x8 + 0x8;
t2 = m - z;
t3 = 0x8 + 0x8;
t4 = 0x8 + 0x8;
res1 = z % m;

Fastest checker: explicit
Fails for (0, 8, 1, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 << nondet_0;
t2 = y s< x;
t3 = m ^ 0xf;
t4 = y ? n : m;
res1 = x ? 0xf : nondet_0;
Program 1:
t1 = ~y;
t2 = y % x;
res1 = nondet_0 ==> 0x7;

Fastest checker: explicit
Fails for (1, 0, 2, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = max(n, n);
t2 = 0xf + 0xf;
res1 = -x;
Program 1:
t1 = 0x0 + 0x0;
t2 = 0x0 + 0x0;
t3 = m + m;
t4 = t3 ^ z;
res1 = nondet_0 s< m;

Fastest checker: explicit
Fails for (0, 1, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y + nondet_0;
t2 = n >> nondet_0;
res1 = 0x7 <= x;
Program 1:
t1 = z << z;
t2 = ~y;
t3 = z >> y;
t4 = z s< n;
res1 = 0x8 + 0x8;

Fastest checker: explicit
Fails for (0, 15, 1, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 == y;
t2 = 0x1 + 0x1;
t3 = 0x1 + 0x1;
t4 = min(nondet_0, n);
res1 = -x;
Program 1:
t1 = ~y;
t2 = 0x0 + 0x0;
res1 = y % x;

Fastest checker: explicit
Fails for (0, 8, 8, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = x >>> m;
Program 1:
t1 = y >>> y;
res1 = z * 0x7;

Fastest checker: explicit
Fails for (0, 9, 8, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = max(n, y);
t2 = x ? n : y;
t3 = max(m, x);
res1 = x >>> m;
Program 1:
t1 = min(y, z);
t2 = y + 0x1;
t3 = z s< 0x1;
res1 = min(x, x);

Fastest checker: explicit
Fails for (0, 4, 9, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 | x;
res1 = x >> m;
Program 1:
t1 = z + m;
t2 = 0x8 ^ nondet_0;
t3 = z >> y;
res1 = y % x;

Fastest checker: explicit
Fails for (0, 9, 9, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n & nondet_0;
t2 = z >> 0x1;
res1 = m <= x;
Program 1:
t1 = 0x7 - z;
t2 = 0x7 >> x;
t3 = y s<= x;
res1 = y <= z;

Fastest checker: explicit
Fails for (0, 5, 11, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 + 0x8;
t2 = 0x8 + 0x8;
t3 = ~n;
t4 = 0x8 + 0x8;
res1 = m <= x;
Program 1:
t1 = min(z, n);
t2 = z / x;
t3 = z + m;
t4 = z s<= x;
res1 = t4 & z;

Fastest checker: explicit
Fails for (0, 2, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> z;
t2 = 0xf + 0xf;
t3 = n / n;
t4 = n - x;
res1 = m s< t4;
Program 1:
t1 = 0x8 + 0x8;
t2 = z + m;
res1 = z + m;

Fastest checker: explicit
Fails for (0, 6, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x < n;
res1 = t1 & x;
Program 1:
t1 = z + m;
res1 = 0x1 + 0x1;

Fastest checker: explicit
Fails for (0, 7, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= z;
t2 = t1 + 0x7;
t3 = m - 0x7;
t4 = -m;
res1 = t2 s<= x;
Program 1:
t1 = z >> y;
res1 = z >> y;

Fastest checker: explicit
Fails for (0, 7, 1, 14, 2, 13)

[]







Timeout
Perf counters:
{'genetic': 32, 'explicit': 32, 'timeout': 1, 'iterations': 33}
Perf timers:
verify: 0.31s
checker: 179.95s
gcc: 0.37s
_: 180.00s
synth: 179.68s
