Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x0 >>> r';
t2 = x' * 0x0;
res1 = min(y', y);
Program 1:
res1 = x' s<= y;
Program 2:
t1 = y + y';
res1 = r - t1;

Fastest checker: explicit
Fails for (2, 1, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = r' <= x';
t2 = y == 0x7;
res1 = r' - r;
Program 1:
res1 = r s< 0x7;
Program 2:
t1 = -y;
t2 = r * r;
res1 = r / y;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf >>> y;
t2 = y != x';
t3 = t2 << t1;
res1 = ~x';
Program 1:
t1 = x' <= y';
res1 = 0x8 << 0x8;
Program 2:
t1 = 0x8 s<= x';
t2 = ~r;
t3 = x' != y;
res1 = y <= r;

Fastest checker: explicit
Fails for (0, 7, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x <= r;
res1 = min(y', y);
Program 1:
res1 = y' <= y';
Program 2:
t1 = ~y';
t2 = x - r;
res1 = 0x7 s< x;

Fastest checker: explicit
Fails for (6, 7, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = max(y, x);
Program 1:
res1 = x' != 0x1;
Program 2:
t1 = y - 0x0;
t2 = y + x;
t3 = max(t2, x);
t4 = r - y';
res1 = -r;

Fastest checker: explicit
Fails for (1, 1, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = y ? x' : r';
Program 1:
t1 = 0x7 ^ y';
res1 = r' <= x;
Program 2:
t1 = 0x1 % y;
t2 = 0x1 == y;
t3 = x' & t1;
t4 = x % t2;
res1 = y s< t1;

Fastest checker: explicit
Fails for (13, 1, 7, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = r' >> x;
Program 1:
t1 = r' | y;
t2 = x ? x : x;
t3 = t1 != t1;
res1 = y' ? 0x1 : t2;
Program 2:
res1 = y' s<= r;

Fastest checker: explicit
Fails for (0, 1, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x * r;
t2 = x | x';
t3 = 0xf + y;
res1 = 0xf ==> t2;
Program 1:
t1 = y' == y';
t2 = t1 >> y';
res1 = r != t2;
Program 2:
t1 = 0x7 s<= r;
t2 = y' - r;
t3 = t1 s< y;
t4 = ~y;
res1 = t2 == x;

Fastest checker: explicit
Fails for (0, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = r & y';
Program 1:
t1 = ~y;
t2 = y << x;
res1 = ~t2;
Program 2:
t1 = y * y;
t2 = y + t1;
t3 = y' - y;
res1 = y' s< t1;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 0, 14)

[]
Fastest checker: genetic
Program 0:
t1 = r ^ r';
t2 = y' != r';
res1 = x % x';
Program 1:
res1 = ~x;
Program 2:
t1 = y' << x;
t2 = 0x7 % y;
res1 = t2 s<= y;

Fastest checker: explicit
Fails for (15, 3, 0, 0, 0, 14)

[]
Fastest checker: genetic
Program 0:
res1 = x' >>> y';
Program 1:
res1 = r' <= x';
Program 2:
res1 = x & x;

Fastest checker: explicit
Fails for (0, 1, 0, 14, 0, 14)

[]
Fastest checker: genetic
Program 0:
t1 = y' << 0xf;
t2 = r * x;
res1 = y' & y';
Program 1:
t1 = r' << 0x1;
res1 = ~t1;
Program 2:
t1 = x | x';
t2 = y & r';
t3 = -y';
t4 = y' * y';
res1 = x' s<= y;

Fastest checker: cbmc
Fails for (0, 2, 0, 3, 1, 0)

[]
Fastest checker: genetic
Program 0:
res1 = r * x';
Program 1:
t1 = r' ^ y';
t2 = 0x8 ? y' : x';
t3 = 0x8 + 0x8;
t4 = r <= x';
res1 = t2 + 0x8;
Program 2:
t1 = x' != y';
t2 = r' << y;
t3 = -y;
t4 = y' ^ 0xf;
res1 = r ^ r;

Fastest checker: cbmc
Fails for (8, 5, 2, 4, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 | y;
res1 = r' ^ y';
Program 1:
res1 = max(0x1, 0x1);
Program 2:
t1 = r' == y;
t2 = min(y, y');
res1 = y - r;

Fastest checker: explicit
Fails for (0, 3, 3, 4, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y >> r';
t2 = y == x';
t3 = x >>> t2;
t4 = y' & 0xf;
res1 = t1 | t2;
Program 1:
t1 = x ==> r';
res1 = r != t1;
Program 2:
t1 = y - 0x8;
t2 = y' <= x;
t3 = x & 0x8;
res1 = min(y', 0x8);

Fastest checker: explicit
Fails for (0, 1, 4, 4, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = min(y, x');
t2 = r' % x';
res1 = y' >>> y';
Program 1:
res1 = y | 0x7;
Program 2:
t1 = y | y;
t2 = r s<= 0x0;
t3 = r != y;
res1 = x' * y;

Fastest checker: explicit
Fails for (0, 1, 1, 5, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ~r';
t2 = y >> x';
res1 = t2 >>> y';
Program 1:
t1 = 0x8 ^ y';
t2 = -x;
res1 = r' == x;
Program 2:
t1 = -y;
t2 = x s<= x';
t3 = max(y, y);
t4 = t1 >>> y;
res1 = y' < t1;

Fastest checker: explicit
Fails for (2, 1, 1, 5, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = x' >>> r';
t2 = r != r';
t3 = min(y, r');
t4 = ~x';
res1 = t1 == t2;
Program 1:
t1 = y' < x';
t2 = x >>> r';
t3 = r' < y;
res1 = y' == y;
Program 2:
t1 = 0x7 s< r';
t2 = 0x7 + r;
t3 = min(y', y');
t4 = r == x;
res1 = x + 0x7;

Fastest checker: explicit
Fails for (0, 4, 1, 5, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = r' * r;
t2 = y' ? r : t1;
t3 = y & y;
res1 = max(t1, t1);
Program 1:
t1 = x' == r';
t2 = r' ? x : y;
t3 = -y';
t4 = ~y';
res1 = t1 ^ 0x0;
Program 2:
t1 = min(x, r');
t2 = t1 ^ r;
res1 = ~t2;

Fastest checker: explicit
Fails for (0, 1, 2, 2, 5, 2)

[]
Fastest checker: genetic
Program 0:
t1 = min(y', y');
res1 = r' * x;
Program 1:
res1 = x == x';
Program 2:
t1 = x ? 0xf : x';
res1 = r' - y;

Fastest checker: explicit
Fails for (2, 2, 2, 2, 5, 2)

[]
Fastest checker: genetic
Program 0:
t1 = max(y', 0x0);
t2 = x' s<= x;
t3 = x == r';
res1 = x' % t1;
Program 1:
t1 = r ^ y;
res1 = x == x';
Program 2:
t1 = x <= x;
t2 = x ^ y;
res1 = ~t2;

Fastest checker: explicit
Fails for (2, 5, 2, 2, 5, 2)

[]
Fastest checker: genetic
Program 0:
t1 = x' >> y';
t2 = y * 0x8;
t3 = 0x8 + 0x8;
res1 = 0x8 + 0x8;
Program 1:
t1 = r' * r;
t2 = 0x1 s< y';
res1 = y == y';
Program 2:
t1 = y >>> x';
t2 = t1 << t1;
res1 = t1 ^ r;

Fastest checker: explicit
Fails for (0, 4, 4, 0, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y & x';
res1 = t1 >> t1;
Program 1:
t1 = x' s< r;
t2 = 0x7 s< y';
res1 = y == y';
Program 2:
t1 = r' * x;
res1 = y - r';

Fastest checker: cbmc
Fails for (1, 4, 0, 1, 4, 12)

[]
Fastest checker: genetic
Program 0:
t1 = y' << x;
t2 = y <= 0x0;
res1 = t1 % r;
Program 1:
t1 = ~y;
t2 = max(x', y);
t3 = max(y', t1);
t4 = t1 + y';
res1 = y' < t4;
Program 2:
t1 = x << 0x8;
t2 = r s<= 0x8;
t3 = 0x8 + 0x8;
t4 = 0x8 + 0x8;
res1 = y + 0x8;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc







Finished in 10.87s

Program 0:
t1 = y' << x;
t2 = y <= 0x0;
res1 = t1 % r;
Program 1:
t1 = ~y;
t2 = max(x', y);
t3 = max(y', t1);
t4 = t1 + y';
res1 = y' < t4;
Program 2:
t1 = x << 0x80000000;
t2 = r s<= 0x80000000;
t3 = 0x80000000 + 0x80000000;
t4 = 0x80000000 + 0x80000000;
res1 = y + 0x80000000;


Perf counters:
{'genetic': 24, 'cbmc': 7, 'explicit': 20, 'iterations': 24}
Perf timers:
gcc: 0.55s
verify: 8.97s
checker: 10.81s
generalize: 2.23s
synth: 1.90s
_: 10.87s
