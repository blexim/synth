Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = a1 >>> 0x0;
t2 = 0x0 * 0x0;
res1 = min(a1, a2);

Fastest checker: explicit
Fails for (2, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 ==> 0x1;
t2 = t1 / a2;
t3 = 0x1 * 0x8;
res1 = max(a2, a1);

Fastest checker: explicit
Fails for (0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = a3 s< a3;
t2 = a1 | 0x1;
t3 = 0x0 < t2;
res1 = a2 ? a1 : 0x0;

Fastest checker: explicit
Fails for (1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = a2 <= 0x8;
res1 = 0x1 << a2;

Fastest checker: explicit
Fails for (0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = a2 * 0x0;
res1 = a1 << a3;

Fastest checker: explicit
Fails for (2, 1, 1)

[]
Fastest checker: anneal
Program 0:
t1 = a1 + a1;
t2 = 0x2 s< t1;
t3 = a1 << t1;
t4 = a1 < a2;
res1 = t3 >>> a3;

Fastest checker: explicit
Fails for (1, 1, 0)

[]
Fastest checker: anneal
Program 0:
t1 = 0x1 >> 0x0;
t2 = t1 ^ a1;
t3 = a3 + t1;
t4 = a3 & t3;
res1 = t2 ^ t3;

Fastest checker: explicit
Fails for (0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = a1 << a3;
t2 = a1 << a3;
t3 = a1 >>> a3;
t4 = a1 << a3;
res1 = t3 ? t3 : t1;

Fastest checker: explicit
Fails for (3, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = a1 >>> a3;
t2 = a1 << a3;
t3 = t2 & a1;
t4 = t3 ? a1 : t1;
res1 = t4 ? t4 : t2;

Fastest checker: explicit
Fails for (4, 1, 1)

[]







Timeout
Perf counters:
{'genetic': 7, 'anneal': 2, 'explicit': 9, 'timeout': 1, 'iterations': 10}
Perf timers:
verify: 0.21s
checker: 99.98s
gcc: 2.46s
_: 100.00s
synth: 99.79s
