Running with args: ['./kalashnikov.py', '/tmp/loop39.c', '../../tests/loops/danger.c', '-P3', '--evars', '2', '-a2', '--seed=1337', '--varnames', 'x', 'y', '-v', '--strategy=evolve', '-w7']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 90, 122
Program 0:
res1 = y >>> x;
Program 1:
res1 = y == y;
Program 2:
res1 = y % 0x1;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Evars: 123, 96
Program 0:
t1 = 0x1 - x;
res1 = t1 <= x;
Program 1:
t1 = min(y, x);
t2 = y == 0x1;
res1 = 0x1 ? t1 : 0x0;
Program 2:
t1 = y >>> 0x1;
res1 = 0x0 == y;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Evars: 64, 96
Program 0:
res1 = x s< y;
Program 1:
t1 = 0x0 / y;
res1 = x & 0x0;
Program 2:
t1 = y == 0x1;
t2 = x ? x : 0x1;
res1 = max(0x0, t2);

Fastest checker: explicit
Fails for (0, 2)

[]
Fastest checker: genetic
Evars: 16, 124
Program 0:
t1 = 0x0 ? x : x;
t2 = 0x0 < 0x0;
res1 = min(y, t1);
Program 1:
t1 = 0x1 < 0x0;
t2 = y ==> 0x0;
res1 = 0x0 % 0x0;
Program 2:
t1 = y == x;
res1 = min(t1, t1);

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Evars: 67, 102
Program 0:
res1 = y s< 0x0;
Program 1:
t1 = x s<= x;
res1 = ~(0x1);
Program 2:
res1 = x + x;

Fastest checker: explicit
Fails for (1, 64)

[]
Fastest checker: genetic
Evars: 49, 123
Program 0:
res1 = 0x1 >>> x;
Program 1:
t1 = x == y;
t2 = t1 << 0x0;
res1 = x % x;
Program 2:
t1 = -(y);
t2 = 0x1 < x;
res1 = 0x0 + t2;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Evars: 97, 119
Program 0:
t1 = x + 0x1;
res1 = t1 s<= 0x0;
Program 1:
t1 = y | 0x0;
t2 = 0x1 s<= y;
res1 = max(0x1, y);
Program 2:
t1 = y * 0x1;
t2 = y ^ x;
res1 = min(t2, y);

Fastest checker: explicit
Fails for (63, 0)

[]
Fastest checker: genetic
Evars: 124, 102
Program 0:
t1 = ~(x);
res1 = 0x1 s<= t1;
Program 1:
t1 = y == 0x0;
res1 = t1 & 0x1;
Program 2:
res1 = x != x;

Fastest checker: explicit
Fails for (64, 0)

[]
Fastest checker: genetic
Evars: 70, 40
Program 0:
t1 = y + x;
t2 = y >> y;
res1 = 0x1 != x;
Program 1:
res1 = 0x1 % 0x1;
Program 2:
t1 = ~(y);
res1 = x & 0x0;

Fastest checker: explicit
Correct for wordlen=7
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 8.20s

Evars: 70, 40
Program 0:
t1 = y + x;
t2 = y >> y;
res1 = 0x1 != x;
Program 1:
res1 = 0x1 % 0x1;
Program 2:
t1 = ~(y);
res1 = x & 0x0;


Perf counters:
{'genetic': 9, 'cbmc': 1, 'explicit': 9, 'iterations': 9}
Perf timers:
verify: 4.00s
checker: 8.18s
gcc: 4.60s
_: 8.20s
synth: 4.20s
