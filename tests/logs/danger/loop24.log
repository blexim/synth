Running with args: ['./kalashnikov.py', '/tmp/loop24.c', '../../tests/loops/danger.c', '-P3', '--evars', '3', '-a3', '--seed=1337', '--varnames', 'i', 'c', 'a', '-v', '--strategy=evolve']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 4, 7, 3
Program 0:
t1 = 0x1 <= a;
t2 = 0x0 ==> a;
res1 = 0x1 >> c;
Program 1:
t1 = max(a, 0x1);
t2 = i ? 0x0 : i;
res1 = c >>> c;
Program 2:
res1 = ~(a);

Fastest checker: explicit
Fails for (0, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 2, 7
Program 0:
t1 = ~(a);
t2 = ~(a);
res1 = t1 <= 0x1;
Program 1:
res1 = i - a;
Program 2:
t1 = 0x0 * i;
t2 = 0x1 < 0x0;
res1 = t1 >>> 0x0;

Fastest checker: explicit
Fails for (0, 0, 6)

[]
Fastest checker: genetic
Evars: 2, 1, 7
Program 0:
res1 = c <= 0x1;
Program 1:
res1 = 0x1 s<= i;
Program 2:
res1 = c == i;

Fastest checker: explicit
Fails for (1, 0, 0)

[]
Fastest checker: genetic
Evars: 6, 5, 0
Program 0:
t1 = c != i;
res1 = c <= 0x1;
Program 1:
t1 = 0x0 - i;
res1 = 0x1 ? 0x1 : a;
Program 2:
res1 = ~(i);

Fastest checker: explicit
Fails for (2, 0, 0)

[]
Fastest checker: genetic
Evars: 5, 2, 7
Program 0:
t1 = ~(a);
t2 = i != t1;
res1 = i == t1;
Program 1:
res1 = max(0x0, 0x0);
Program 2:
t1 = 0x1 >>> 0x1;
res1 = t1 / i;

Fastest checker: explicit
Fails for (6, 0, 1)

[]
Fastest checker: genetic
Evars: 5, 1, 3
Program 0:
res1 = 0x1 s< a;
Program 1:
t1 = -(0x0);
t2 = c | i;
res1 = 0x0 << 0x0;
Program 2:
t1 = a ? a : c;
res1 = min(0x1, a);

Fastest checker: explicit
Fails for (0, 0, 2)

[]
Fastest checker: genetic
Evars: 5, 1, 3
Program 0:
t1 = 0x1 s< a;
t2 = a s<= t1;
res1 = t1 & t1;
Program 1:
t1 = 0x1 - 0x0;
t2 = c + 0x1;
res1 = i % 0x1;
Program 2:
t1 = 0x0 == i;
t2 = min(i, a);
res1 = i ^ 0x1;

Fastest checker: explicit
Fails for (1, 0, 2)

[]
Fastest checker: genetic
Evars: 1, 4, 0
Program 0:
res1 = a < 0x1;
Program 1:
t1 = i < i;
res1 = 0x0 + 0x0;
Program 2:
t1 = ~(i);
t2 = c s< a;
res1 = c <= a;

Fastest checker: explicit
Fails for (2, 2, 0)

[]
Fastest checker: genetic
Evars: 1, 4, 0
Program 0:
res1 = 0x1 >> a;
Program 1:
t1 = a << 0x0;
t2 = a << t1;
res1 = c * 0x0;
Program 2:
res1 = ~(i);

Fastest checker: explicit
Fails for (3, 0, 3)

[]
Fastest checker: genetic
Evars: 6, 7, 7
Program 0:
t1 = i <= 0x0;
t2 = t1 / 0x1;
res1 = a & t1;
Program 1:
t1 = 0x0 + 0x0;
res1 = ~(t1);
Program 2:
res1 = 0x1 s<= 0x0;

Fastest checker: explicit
Fails for (0, 0, 1)

[]
Fastest checker: genetic
Evars: 0, 7, 0
Program 0:
t1 = c >> i;
t2 = i <= 0x1;
res1 = a < 0x1;
Program 1:
t1 = c << a;
t2 = a ^ a;
res1 = ~(t2);
Program 2:
t1 = ~(i);
res1 = 0x1 << 0x1;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 8.89s

Evars: 0, 7, 0
Program 0:
t1 = c >> i;
t2 = i <= 0x1;
res1 = a < 0x1;
Program 1:
t1 = c << a;
t2 = a ^ a;
res1 = ~(t2);
Program 2:
t1 = ~(i);
res1 = 0x1 << 0x1;


Perf counters:
{'genetic': 11, 'cbmc': 1, 'explicit': 11, 'iterations': 11}
Perf timers:
verify: 3.97s
checker: 8.86s
gcc: 5.30s
_: 8.89s
synth: 4.91s
