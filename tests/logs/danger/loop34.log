Running with args: ['./kalashnikov.py', '/tmp/loop34.c', '../../tests/loops/danger.c', '-P3', '--evars', '2', '-a2', '--seed=1337', '--varnames', 'x', 'y', '-v', '--strategy=evolve']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 7, 0
Program 0:
t1 = x & y;
res1 = x >> 0x0;
Program 1:
t1 = x & x;
res1 = 0x0 & y;
Program 2:
t1 = 0x1 % y;
res1 = ~(x);

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Evars: 6, 1
Program 0:
t1 = x / 0x1;
t2 = 0x0 >> t1;
res1 = y | 0x0;
Program 1:
res1 = 0x1 s< x;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Fails for (6, 1)

[]
Fastest checker: genetic
Evars: 7, 4
Program 0:
t1 = max(0x1, 0x1);
t2 = ~(0x0);
res1 = t2 == x;
Program 1:
t1 = x ? 0x1 : 0x0;
t2 = x >>> 0x0;
res1 = max(x, x);
Program 2:
t1 = x ==> 0x0;
t2 = x >>> t1;
res1 = max(x, t1);

Fastest checker: explicit
Fails for (7, 0)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = 0x0 | x;
t2 = max(0x1, y);
res1 = y >> 0x1;
Program 1:
t1 = max(y, 0x1);
t2 = max(0x0, t1);
res1 = 0x1 == y;
Program 2:
t1 = -(x);
t2 = 0x0 >>> y;
res1 = x < t2;

Fastest checker: explicit
Fails for (0, 2)

[]
Fastest checker: genetic
Evars: 3, 6
Program 0:
t1 = ~(y);
t2 = 0x1 != y;
res1 = t1 == t2;
Program 1:
res1 = x & x;
Program 2:
t1 = max(0x0, 0x0);
res1 = 0x0 / y;

Fastest checker: explicit
Fails for (0, 6)

[]
Fastest checker: genetic
Evars: 5, 5
Program 0:
res1 = 0x1 < y;
Program 1:
t1 = x != x;
res1 = 0x0 % 0x0;
Program 2:
t1 = 0x0 + 0x0;
t2 = ~(x);
res1 = min(t1, y);

Fastest checker: explicit
Fails for (6, 2)

[]
Fastest checker: genetic
Evars: 0, 7
Program 0:
t1 = x == 0x0;
res1 = t1 & y;
Program 1:
t1 = x >>> y;
res1 = t1 ==> y;
Program 2:
res1 = min(y, 0x1);

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Evars: 1, 5
Program 0:
t1 = min(y, 0x1);
t2 = 0x0 + 0x0;
res1 = x == t1;
Program 1:
t1 = 0x0 + 0x0;
t2 = 0x0 + 0x0;
res1 = y ? 0x0 : 0x0;
Program 2:
t1 = 0x0 >> y;
t2 = y & t1;
res1 = ~(0x1);

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = y s<= 0x0;
t2 = x == 0x1;
res1 = min(y, t2);
Program 1:
t1 = -(y);
res1 = 0x1 ^ y;
Program 2:
t1 = x / x;
res1 = x != 0x0;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = -(0x1);
t2 = x == y;
res1 = t1 == y;
Program 1:
t1 = x | 0x1;
t2 = x % 0x1;
res1 = 0x1 * x;
Program 2:
t1 = 0x1 s< x;
t2 = 0x1 == y;
res1 = t1 != 0x1;

Fastest checker: explicit
Fails for (0, 7)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = y >> 0x1;
t2 = y >>> 0x1;
res1 = t1 >>> y;
Program 1:
res1 = 0x0 ^ 0x1;
Program 2:
t1 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (6, 3)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = 0x1 < y;
t2 = x <= t1;
res1 = min(x, t2);
Program 1:
t1 = x >>> y;
res1 = x ==> y;
Program 2:
t1 = max(0x1, y);
res1 = t1 < x;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = y >> 0x1;
t2 = 0x1 >> y;
res1 = x < t1;
Program 1:
t1 = y >>> y;
t2 = 0x1 * x;
res1 = 0x0 + 0x0;
Program 2:
t1 = ~(x);
t2 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = y >> 0x1;
t2 = t1 >>> t1;
res1 = min(x, t2);
Program 1:
res1 = ~(0x0);
Program 2:
t1 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (1, 6)

[]
Fastest checker: genetic
Evars: 1, 7
Program 0:
t1 = y >> y;
t2 = x <= t1;
res1 = min(x, t2);
Program 1:
res1 = min(0x0, 0x0);
Program 2:
t1 = ~(x);
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (1, 4)

[]
Fastest checker: genetic
Evars: 6, 7
Program 0:
t1 = y >> 0x1;
t2 = min(x, t1);
res1 = t2 >>> t2;
Program 1:
t1 = 0x1 ==> x;
t2 = x <= x;
res1 = 0x0 + 0x0;
Program 2:
t1 = 0x0 + 0x0;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (3, 6)

[]
Fastest checker: genetic
Evars: 6, 7
Program 0:
t1 = ~(0x0);
t2 = t1 == y;
res1 = min(x, t2);
Program 1:
t1 = 0x0 / x;
res1 = 0x0 & y;
Program 2:
t1 = ~(x);
t2 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (1, 7)

[]
Fastest checker: genetic
Evars: 6, 7
Program 0:
t1 = y >> 0x1;
t2 = ~(t1);
res1 = t2 < x;
Program 1:
t1 = y - 0x0;
t2 = y != y;
res1 = t1 != t2;
Program 2:
res1 = x ? 0x0 : y;

Fastest checker: explicit
Fails for (7, 2)

[]
