Using seed: 1337
[]
Fastest checker: genetic
Evars: 2, 2, 6, 0
Program 0:
res1 = x >>> 0x0;
Program 1:
res1 = lockstate == 0x1;
Program 2:
res1 = x % lockstate;

Fastest checker: explicit
Fails for (0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 4, 3, 5, 6
Program 0:
t1 = 0x0 >> y;
res1 = y - lockstate;
Program 1:
res1 = nondet1 <= 0x1;
Program 2:
t1 = max(y, nondet1);
t2 = t1 s<= 0x1;
res1 = nondet1 != t2;

Fastest checker: explicit
Fails for (0, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 0, 3, 4, 0
Program 0:
t1 = y != x;
t2 = lockstate ^ x;
res1 = t1 ? 0x0 : lockstate;
Program 1:
t1 = 0x0 % x;
t2 = min(lockstate, x);
res1 = y < t1;
Program 2:
t1 = x ^ 0x1;
t2 = 0x1 s< t1;
res1 = nondet1 ? x : t1;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 6.51s

Evars: 0, 3, 4, 0
Program 0:
t1 = y != x;
t2 = lockstate ^ x;
res1 = t1 ? 0x0 : lockstate;
Program 1:
t1 = 0x0 % x;
t2 = min(lockstate, x);
res1 = y < t1;
Program 2:
t1 = x ^ 0x1;
t2 = 0x1 s< t1;
res1 = nondet1 ? x : t1;


Perf counters:
{'genetic': 3, 'cbmc': 1, 'explicit': 3, 'iterations': 3}
Perf timers:
verify: 5.01s
checker: 6.50s
gcc: 1.90s
_: 6.51s
synth: 1.50s
