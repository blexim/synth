Running with args: ['./kalashnikov.py', '/tmp/loop35.c', '../../tests/loops/danger.c', '-P3', '--evars', '2', '-a2', '--seed=1337', '--varnames', 'x', 'y', '-v', '--strategy=evolve', '-c1']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 4, 6
Program 0:
t1 = x s<= x;
t2 = min(0x0, x);
res1 = 0x0 ? 0x0 : y;
Program 1:
t1 = 0x0 | 0x1;
res1 = 0x1 % y;
Program 2:
t1 = ~(x);
t2 = 0x3 == 0x3;
res1 = -(x);

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Evars: 2, 6
Program 0:
t1 = x + 0x0;
t2 = 0x0 < x;
res1 = t1 ==> 0x1;
Program 1:
t1 = x / 0x0;
t2 = 0x1 >> y;
res1 = t2 | 0x1;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Fails for (7, 0)

[]
Fastest checker: genetic
Evars: 1, 6
Program 0:
res1 = 0x1 == x;
Program 1:
t1 = 0x0 ? y : y;
res1 = 0x3 ? x : 0x3;
Program 2:
res1 = x <= 0x0;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Evars: 5, 1
Program 0:
res1 = 0x7 - x;
Program 1:
t1 = 0x1 >>> y;
t2 = 0x7 == 0x0;
res1 = 0x7 | x;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 6
[]
Fastest checker: genetic
Evars: 5, 3
Program 0:
res1 = 0x1 & y;
Program 1:
res1 = x ? x : y;
Program 2:
t1 = y ==> x;
res1 = ~(y);

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Evars: 1, 5
Program 0:
t1 = 0x3 s< 0x3;
t2 = 0x3 >> x;
res1 = x == t2;
Program 1:
t1 = ~(y);
t2 = 0x1 <= 0x0;
res1 = 0x0 - 0x0;
Program 2:
res1 = max(y, 0x0);

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Evars: 6, 0
Program 0:
res1 = y == 0x0;
Program 1:
res1 = 0x1 s< 0x1;
Program 2:
t1 = 0x1 >>> 0x0;
t2 = -(x);
res1 = x | t2;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Evars: 4, 7
Program 0:
res1 = 0x7 == y;
Program 1:
res1 = y | y;
Program 2:
t1 = -(0x1);
res1 = 0x7 >> 0x0;

Fastest checker: explicit
Fails for (0, 7)

[]
Fastest checker: genetic
Evars: 1, 4
Program 0:
t1 = x != 0x4;
res1 = 0x4 == y;
Program 1:
t1 = 0x1 - 0x0;
t2 = 0x0 + 0x0;
res1 = t2 - y;
Program 2:
res1 = min(0x0, 0x4);

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Evars: 0, 0
Program 0:
t1 = y % 0x4;
res1 = y < 0x4;
Program 1:
t1 = 0x0 + 0x7;
res1 = y - 0x0;
Program 2:
t1 = ~(x);
t2 = 0x0 + 0x0;
res1 = 0x0 + 0x0;

Fastest checker: explicit
Fails for (7, 0)

[]
Fastest checker: genetic
Evars: 0, 4
Program 0:
res1 = x < 0x4;
Program 1:
res1 = x / 0x0;
Program 2:
t1 = 0x1 >>> x;
res1 = ~(x);

Fastest checker: explicit
Fails for (3, 0)

[]
Fastest checker: genetic
Evars: 4, 7
Program 0:
t1 = 0x7 == y;
t2 = 0x1 >> 0x0;
res1 = x < 0x7;
Program 1:
t1 = 0x0 | 0x1;
res1 = y ? 0x3 : x;
Program 2:
res1 = 0x4 - x;

Fastest checker: explicit
Fails for (4, 0)

[]
Fastest checker: genetic
Evars: 4, 7
Program 0:
res1 = 0x7 s<= y;
Program 1:
t1 = y - 0x0;
res1 = y s<= x;
Program 2:
t1 = y >> y;
res1 = x ==> 0x0;

Fastest checker: explicit
Fails for (1, 7)

[]
Fastest checker: genetic
Evars: 1, 3
Program 0:
t1 = 0x1 & y;
res1 = y == 0x3;
Program 1:
res1 = 0x1 % 0x0;
Program 2:
t1 = 0x0 - 0x0;
t2 = x == 0x1;
res1 = t2 == x;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Evars: 54, 13
Program 0:
t1 = 0x7 s< y;
t2 = x | 0x0;
res1 = -(t1);
Program 1:
t1 = 0x3 >>> 0x1;
t2 = 0x3 << 0x1;
res1 = 0x3 + t1;
Program 2:
res1 = 0x1 * 0x0;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Evars: 4, 4
Program 0:
res1 = x < 0x7;
Program 1:
t1 = x s< 0x0;
res1 = 0x1 + y;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Correct for wordlen=6
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 12.09s

Evars: 4, 4
Program 0:
res1 = x < 0x7;
Program 1:
t1 = x s< 0x0;
res1 = 0x1 + y;
Program 2:
res1 = ~(x);


Perf counters:
{'genetic': 16, 'cbmc': 1, 'explicit': 81, 'iterations': 16}
Perf timers:
gcc: 9.20s
verify: 3.47s
checker: 11.99s
generalize: 0.14s
synth: 8.60s
_: 12.09s
