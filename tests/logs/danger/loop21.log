Running with args: ['./kalashnikov.py', '/tmp/loop21.c', '../../tests/loops/danger.c', '-P3', '--evars', '3', '-a3', '--seed=1337', '--nondet=1', '--varnames', 'nondet0', 'x', 'y', '--strategy=evolve', '-v', '-w4', '-s10', '-c0']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 7, 8, 4
Program 0:
t1 = 0x0 | x;
t2 = t1 <= t1;
res1 = 0x1 >> nondet0;
Program 1:
t1 = 0x1 ^ y;
t2 = nondet0 * 0x0;
res1 = max(x, x);
Program 2:
t1 = -(y);
t2 = y >> 0x1;
res1 = t1 >> x;

Fastest checker: explicit
Fails for (0, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 2, 1
Program 0:
t1 = nondet0 ==> x;
t2 = y != y;
res1 = x <= x;
Program 1:
res1 = y << 0x0;
Program 2:
t1 = nondet0 << 0x1;
t2 = t1 * nondet0;
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 10, 0)

[]
Fastest checker: genetic
Evars: 6, 10, 10
Program 0:
t1 = x s< y;
res1 = t1 & y;
Program 1:
t1 = 0x1 << y;
res1 = x ? x : nondet0;
Program 2:
t1 = x >> nondet0;
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 0, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 12
Program 0:
t1 = ~(x);
t2 = min(nondet0, nondet0);
res1 = max(t2, y);
Program 1:
res1 = 0x1 ==> 0x1;
Program 2:
t1 = 0x1 == x;
t2 = 0x1 >>> nondet0;
res1 = t2 == nondet0;

Fastest checker: explicit
Fails for (0, 10, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 3
Program 0:
t1 = x s< y;
t2 = nondet0 >>> 0x1;
res1 = x < y;
Program 1:
res1 = nondet0 + 0x1;
Program 2:
t1 = nondet0 % 0x1;
t2 = 0x1 >> nondet0;
res1 = 0x1 s< nondet0;

Fastest checker: explicit
Fails for (0, 10, 11)

[]
Fastest checker: genetic
Evars: 10, 9, 7
Program 0:
res1 = x <= 0x1;
Program 1:
res1 = 0x1 s<= nondet0;
Program 2:
res1 = x == nondet0;

Fastest checker: explicit
Fails for (0, 1, 0)

[]
Fastest checker: anneal
Evars: 14, 6, 9
Program 0:
t1 = nondet0 ==> y;
t2 = 0x1 << 0x1;
t3 = t2 < x;
t4 = x | nondet0;
t5 = max(t4, y);
t6 = t4 >>> t4;
t7 = -(t5);
t8 = min(t5, 0x1);
t9 = t2 | 0x1;
res1 = t3 - t8;
Program 1:
t1 = max(0x1, y);
t2 = ~(0x1);
t3 = t2 ==> t2;
t4 = min(0x0, 0x0);
t5 = t3 / t3;
t6 = max(x, t5);
t7 = t5 * t6;
t8 = t3 != 0x0;
t9 = 0x0 % 0x1;
res1 = min(t7, t6);
Program 2:
t1 = 0x1 <= 0x1;
t2 = 0x1 | nondet0;
t3 = 0x0 != y;
t4 = 0x0 == nondet0;
t5 = t4 <= t4;
t6 = nondet0 s<= 0x1;
t7 = x & t3;
t8 = t7 <= x;
t9 = min(x, t6);
res1 = t3 - nondet0;

Fastest checker: explicit
Fails for (0, 2, 0)

[]
Fastest checker: genetic
Evars: 11, 9, 4
Program 0:
res1 = 0x0 s<= x;
Program 1:
t1 = ~(nondet0);
res1 = x == nondet0;
Program 2:
t1 = x << 0x0;
t2 = 0x0 + 0x0;
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 7, 0)

[]
Fastest checker: anneal
Evars: 10, 3, 1
Program 0:
t1 = y ^ x;
t2 = 0x1 ^ 0x0;
t3 = x <= t2;
t4 = 0x0 < nondet0;
t5 = t3 + x;
t6 = ~(t5);
t7 = -(y);
t8 = t7 ? t4 : t7;
t9 = x * nondet0;
res1 = t7 % t6;
Program 1:
t1 = nondet0 ==> x;
t2 = y >>> nondet0;
t3 = 0x1 & t1;
t4 = nondet0 & 0x1;
t5 = y * nondet0;
t6 = t3 % 0x1;
t7 = t1 < 0x1;
t8 = x s< t7;
t9 = t1 < t4;
res1 = 0x1 s<= t3;
Program 2:
t1 = 0x1 | nondet0;
t2 = y s<= x;
t3 = t1 >> 0x1;
t4 = -(x);
t5 = 0x0 / 0x1;
t6 = t1 >>> t2;
t7 = 0x1 + t6;
t8 = t4 != t7;
t9 = t5 & t3;
res1 = t6 >>> nondet0;

Fastest checker: explicit
Fails for (0, 15, 0)

[]
Fastest checker: genetic
Evars: 6, 3, 13
Program 0:
t1 = 0x0 s<= x;
res1 = min(t1, y);
Program 1:
res1 = y == x;
Program 2:
t1 = 0x0 ==> nondet0;
t2 = ~(0x0);
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 7, 1)

[]
Fastest checker: genetic
Evars: 1, 4, 9
Program 0:
t1 = x ==> 0x0;
t2 = x <= 0x1;
res1 = t2 * y;
Program 1:
t1 = 0x0 s<= nondet0;
t2 = nondet0 ^ 0x1;
res1 = 0x0 s<= nondet0;
Program 2:
t1 = ~(x);
res1 = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 1, 1)

[]
Fastest checker: anneal
Evars: 3, 14, 4
Program 0:
t1 = nondet0 s<= 0x1;
t2 = 0x1 ^ t1;
t3 = t2 & t1;
t4 = t3 ? x : nondet0;
t5 = x * t1;
t6 = max(t1, t1);
t7 = t6 <= x;
t8 = ~(x);
t9 = t6 != t4;
res1 = t7 s< y;
Program 1:
t1 = 0x1 - y;
t2 = nondet0 s<= 0x1;
t3 = y >> nondet0;
t4 = y ^ t1;
t5 = -(nondet0);
t6 = ~(nondet0);
t7 = t6 * t4;
t8 = t5 >>> t2;
t9 = t4 >>> t6;
res1 = max(t6, t8);
Program 2:
t1 = nondet0 <= x;
t2 = nondet0 ==> 0x0;
t3 = 0x1 >>> t2;
t4 = min(t2, t3);
t5 = min(x, t1);
t6 = t4 ==> t3;
t7 = t4 << t4;
t8 = 0x0 >>> t1;
t9 = t1 + t8;
res1 = t4 & t6;

Fastest checker: explicit
Fails for (0, 10, 2)

[]
Fastest checker: anneal
Evars: 14, 12, 12
Program 0:
t1 = 0x1 s<= y;
t2 = 0x0 ^ t1;
t3 = x >>> y;
t4 = t3 < t1;
t5 = nondet0 | nondet0;
t6 = t5 - y;
t7 = max(0x0, t2);
t8 = y >>> t5;
t9 = t5 < nondet0;
res1 = t4 ? t4 : 0x0;
Program 1:
t1 = ~(0x1);
t2 = max(0x1, nondet0);
t3 = y < 0x0;
t4 = 0x0 + 0x1;
t5 = nondet0 & x;
t6 = x < t1;
t7 = y s< t5;
t8 = t5 s< t5;
t9 = y != t8;
res1 = ~(t7);
Program 2:
t1 = 0x1 ^ 0x0;
t2 = nondet0 ? t1 : t1;
t3 = t2 s<= x;
t4 = t3 | 0x1;
t5 = x | t2;
t6 = y << 0x1;
t7 = x s<= y;
t8 = 0x0 / t7;
t9 = nondet0 == t8;
res1 = t7 >> 0x0;

Fastest checker: explicit
Fails for (0, 3, 2)

[]
Fastest checker: anneal
Evars: 14, 2, 15
Program 0:
t1 = min(y, nondet0);
t2 = x >> nondet0;
t3 = x s<= t2;
t4 = x >> t2;
t5 = y ==> t2;
t6 = t3 | x;
t7 = 0x0 < t6;
t8 = min(t2, t4);
t9 = -(0x1);
res1 = t3 >> t8;
Program 1:
t1 = 0x1 ^ y;
t2 = x s<= 0x1;
t3 = max(nondet0, 0x1);
t4 = t2 <= 0x0;
t5 = -(t2);
t6 = t4 * t2;
t7 = t1 s< t4;
t8 = 0x0 <= t2;
t9 = t5 ==> 0x0;
res1 = 0x1 - t5;
Program 2:
t1 = 0x1 + y;
t2 = x << nondet0;
t3 = y >> 0x0;
t4 = t2 - nondet0;
t5 = t4 ? x : nondet0;
t6 = -(t1);
t7 = t1 >> t5;
t8 = t6 ? t7 : t3;
t9 = 0x0 - y;
res1 = t9 <= nondet0;

Fastest checker: explicit
Fails for (0, 4, 0)

[]
Fastest checker: anneal
Evars: 10, 14, 9
Program 0:
t1 = nondet0 + x;
t2 = y == t1;
t3 = x >> y;
t4 = 0x0 < t3;
t5 = 0x1 s<= t3;
t6 = 0x1 / 0x1;
t7 = -(y);
t8 = t6 * t5;
t9 = t2 + t8;
res1 = t3 ==> t2;
Program 1:
t1 = nondet0 & y;
t2 = x * x;
t3 = nondet0 >>> nondet0;
t4 = t2 ? y : y;
t5 = -(t2);
t6 = ~(0x1);
t7 = t1 <= t3;
t8 = t5 | 0x0;
t9 = ~(t4);
res1 = t3 == nondet0;
Program 2:
t1 = 0x0 != 0x0;
t2 = y != 0x1;
t3 = ~(t2);
t4 = 0x0 * t1;
t5 = 0x1 != x;
t6 = nondet0 - 0x0;
t7 = t1 >> t4;
t8 = t3 / t3;
t9 = t7 | t4;
res1 = t6 ==> 0x0;

Fastest checker: explicit
Fails for (0, 0, 3)

[]
Fastest checker: anneal
Evars: 5, 11, 8
Program 0:
t1 = nondet0 + x;
t2 = y >>> t1;
t3 = x >>> y;
t4 = 0x1 != 0x1;
t5 = 0x1 | y;
t6 = 0x0 >>> 0x1;
t7 = y - 0x1;
t8 = x * t3;
t9 = t2 ^ t8;
res1 = t3 <= t2;
Program 1:
t1 = 0x0 & nondet0;
t2 = -(t1);
t3 = nondet0 >>> y;
t4 = y + 0x1;
t5 = t2 | t2;
t6 = t2 <= 0x1;
t7 = 0x0 * 0x1;
t8 = t1 - t6;
t9 = t4 >>> t5;
res1 = t3 | t8;
Program 2:
t1 = 0x0 - y;
t2 = 0x0 != 0x1;
t3 = ~(t2);
t4 = t3 % t2;
t5 = t1 >> t2;
t6 = t1 s<= 0x0;
t7 = t2 % 0x1;
t8 = t2 * t2;
t9 = t1 | t7;
res1 = t5 ==> 0x0;

Fastest checker: explicit
Fails for (0, 1, 3)

[]
Fastest checker: anneal
Evars: 5, 11, 4
Program 0:
t1 = nondet0 | 0x1;
t2 = min(y, y);
t3 = x >>> t2;
t4 = t3 != y;
t5 = 0x1 / t1;
t6 = 0x0 ^ 0x1;
t7 = t3 | 0x1;
t8 = t2 + t3;
t9 = x ^ t8;
res1 = t3 < t2;
Program 1:
t1 = 0x0 >> x;
t2 = t1 ? t1 : 0x0;
t3 = max(0x1, y);
t4 = y << t1;
t5 = 0x0 ^ nondet0;
t6 = 0x1 * 0x1;
t7 = 0x0 * nondet0;
t8 = t3 s< t3;
t9 = t2 >> x;
res1 = x | t3;
Program 2:
t1 = 0x0 s<= y;
t2 = 0x1 != nondet0;
t3 = ~(x);
t4 = 0x1 & 0x1;
t5 = t1 >> t3;
t6 = t1 >> 0x0;
t7 = 0x1 % t4;
t8 = t2 <= t3;
t9 = t4 | 0x0;
res1 = max(0x0, 0x0);

Fastest checker: explicit
Fails for (0, 2, 2)

[]
Fastest checker: anneal
Evars: 14, 1, 0
Program 0:
t1 = nondet0 - 0x1;
t2 = y << 0x1;
t3 = 0x1 + x;
t4 = x * y;
t5 = 0x1 s<= t1;
t6 = t3 != t4;
t7 = t2 == nondet0;
t8 = t5 s< t3;
t9 = t4 ^ 0x1;
res1 = t3 < t2;
Program 1:
t1 = nondet0 < y;
t2 = 0x1 * nondet0;
t3 = t2 ==> nondet0;
t4 = nondet0 == x;
t5 = 0x0 & y;
t6 = 0x1 * 0x0;
t7 = t4 s< y;
t8 = t3 != 0x1;
t9 = x % 0x1;
res1 = t4 | t1;
Program 2:
t1 = 0x1 s<= 0x1;
t2 = 0x1 != x;
t3 = ~(y);
t4 = t1 s<= t1;
t5 = x <= t4;
t6 = t3 < 0x0;
t7 = x < t4;
t8 = t2 s< 0x0;
t9 = 0x0 >> t7;
res1 = 0x0 >>> t3;

Fastest checker: explicit
Fails for (0, 15, 1)

[]
Fastest checker: genetic
Evars: 15, 10, 12
Program 0:
t1 = x < y;
t2 = 0x0 s<= x;
res1 = t2 * t1;
Program 1:
res1 = y >>> x;
Program 2:
t1 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 2, 3)

[]
Fastest checker: genetic
Evars: 12, 11, 2
Program 0:
t1 = x < y;
t2 = 0x0 s<= x;
res1 = t2 * t1;
Program 1:
res1 = -(0x1);
Program 2:
t1 = ~(x);
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 7, 8)

[]
Fastest checker: anneal
Evars: 14, 6, 9
Program 0:
t1 = -(0x1);
t2 = y << 0x1;
t3 = t2 <= nondet0;
t4 = 0x0 * y;
t5 = 0x0 <= t1;
t6 = 0x0 * y;
t7 = -(nondet0);
t8 = t5 s< t4;
t9 = t4 * nondet0;
res1 = x < t2;
Program 1:
t1 = nondet0 >> 0x1;
t2 = x == x;
t3 = 0x0 <= nondet0;
t4 = t1 == x;
t5 = nondet0 == y;
t6 = 0x1 & nondet0;
t7 = t2 < t5;
t8 = t6 != t7;
t9 = t1 ? 0x1 : y;
res1 = t3 | t9;
Program 2:
t1 = 0x0 <= 0x1;
t2 = 0x1 == x;
t3 = y & y;
t4 = t1 ? 0x1 : 0x0;
t5 = nondet0 <= 0x0;
t6 = nondet0 < y;
t7 = x < nondet0;
t8 = t2 <= t7;
t9 = t8 ? nondet0 : t6;
res1 = ~(nondet0);

Fastest checker: explicit
Fails for (0, 10, 6)

[]
Fastest checker: anneal
Evars: 7, 8, 9
Program 0:
t1 = -(0x1);
t2 = y << 0x1;
t3 = t2 <= 0x1;
t4 = x >>> y;
t5 = 0x0 ==> t2;
t6 = 0x0 << t5;
t7 = -(nondet0);
t8 = t5 s< t4;
t9 = 0x0 * t4;
res1 = t4 < t2;
Program 1:
t1 = nondet0 >>> 0x1;
t2 = 0x0 == 0x0;
t3 = y <= nondet0;
t4 = -(y);
t5 = t4 == t3;
t6 = y - nondet0;
t7 = t3 + t5;
t8 = t6 != t7;
t9 = t1 >> 0x1;
res1 = y | t9;
Program 2:
t1 = 0x0 <= 0x1;
t2 = -(0x0);
t3 = x ^ t2;
t4 = t1 ? x : t2;
t5 = nondet0 <= 0x0;
t6 = t2 < y;
t7 = 0x1 >>> t4;
t8 = t2 <= t4;
t9 = t3 ? nondet0 : t6;
res1 = ~(t3);

Fastest checker: explicit
Fails for (0, 7, 2)

[]
Fastest checker: genetic
Evars: 0, 11, 11
Program 0:
t1 = x < y;
t2 = y s< t1;
res1 = t2 - t1;
Program 1:
t1 = ~(x);
t2 = 0x0 s< 0x1;
res1 = 0x0 s< 0x1;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 0, 7)

[]
Fastest checker: genetic
Evars: 0, 11, 6
Program 0:
t1 = max(x, 0x1);
t2 = 0x0 % t1;
res1 = t1 == y;
Program 1:
t1 = y == 0x0;
res1 = x & x;
Program 2:
res1 = ~(x);

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 154.83s

Evars: 0, 11, 6
Program 0:
t1 = max(x, 0x1);
t2 = 0x0 % t1;
res1 = t1 == y;
Program 1:
t1 = y == 0x0;
res1 = x & x;
Program 2:
res1 = ~(x);


Perf counters:
{'cbmc': 1, 'genetic': 13, 'anneal': 11, 'explicit': 24, 'iterations': 24}
Perf timers:
verify: 4.91s
checker: 154.62s
gcc: 7.77s
_: 154.83s
synth: 149.90s
