Running with args: ['./kalashnikov.py', '--seed=1337', '--strategy=evolve', '-v', '--nondet=1', '-P3', '--evars', '3', '-a3', '../../tests/loops/danger.c', '/tmp/loop21.c', '--varnames', 'nondet0', 'x', 'y', '-s10']
Using seed: 1337
[]
Fastest checker: genetic
Evars: 4, 7, 3
Program 0:
t1 = 0x1 <= y;
t2 = 0x0 ==> y;
res1 = 0x1 >> x;
Program 1:
t1 = max(y, 0x1);
t2 = nondet0 ? 0x0 : nondet0;
res1 = x >>> x;
Program 2:
res1 = ~(y);

Fastest checker: explicit
Fails for (0, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 1, 7
Program 0:
res1 = x <= 0x1;
Program 1:
res1 = 0x1 s<= nondet0;
Program 2:
res1 = x == nondet0;

Fastest checker: explicit
Fails for (0, 1, 0)

[]
Fastest checker: genetic
Evars: 2, 1, 3
Program 0:
t1 = 0x1 >>> 0x1;
t2 = y ==> x;
res1 = t2 ==> nondet0;
Program 1:
t1 = 0x1 & nondet0;
t2 = ~(nondet0);
res1 = nondet0 <= 0x0;
Program 2:
t1 = 0x0 ^ x;
t2 = nondet0 < 0x1;
res1 = y ==> 0x1;

Fastest checker: explicit
Fails for (0, 0, 1)

[]
Fastest checker: genetic
Evars: 7, 7, 0
Program 0:
t1 = nondet0 == x;
res1 = 0x0 s<= x;
Program 1:
t1 = 0x1 ==> 0x0;
res1 = nondet0 < y;
Program 2:
t1 = 0x0 + 0x0;
t2 = 0x0 + 0x0;
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 3, 0)

[]
Fastest checker: genetic
Evars: 3, 3, 0
Program 0:
t1 = 0x0 s<= x;
res1 = min(t1, y);
Program 1:
res1 = ~(y);
Program 2:
res1 = ~(x);

Fastest checker: explicit
Fails for (0, 3, 1)

[]
Fastest checker: genetic
Evars: 7, 2, 4
Program 0:
t1 = x <= nondet0;
t2 = x <= 0x1;
res1 = t2 * y;
Program 1:
t1 = 0x0 >>> 0x0;
t2 = x * nondet0;
res1 = 0x0 + 0x0;
Program 2:
res1 = y >> x;

Fastest checker: explicit
Fails for (0, 1, 1)

[]
Fastest checker: anneal
Evars: 6, 7, 7
Program 0:
t1 = x ? 0x1 : x;
t2 = y s<= nondet0;
t3 = nondet0 - nondet0;
t4 = t3 - t2;
t5 = y != t1;
t6 = t1 - y;
t7 = y s< t6;
t8 = t2 ^ t7;
t9 = t3 s<= t7;
res1 = t4 < t5;
Program 1:
t1 = x <= y;
t2 = t1 ^ x;
t3 = y | nondet0;
t4 = t1 * x;
t5 = y << t3;
t6 = min(x, t3);
t7 = t6 % y;
t8 = min(t6, nondet0);
t9 = nondet0 < t3;
res1 = x - t3;
Program 2:
t1 = x ==> 0x0;
t2 = y s<= 0x1;
t3 = t2 != 0x0;
t4 = ~(0x1);
t5 = y s<= nondet0;
t6 = nondet0 == 0x0;
t7 = ~(t5);
t8 = t4 / t4;
t9 = y s<= 0x1;
res1 = -(t7);

Fastest checker: explicit
Fails for (0, 1, 2)

[]
Fastest checker: anneal
Evars: 3, 2, 6
Program 0:
t1 = x ? 0x1 : nondet0;
t2 = y ^ t1;
t3 = nondet0 != nondet0;
t4 = t1 - 0x0;
t5 = max(y, t1);
t6 = t1 - y;
t7 = t2 ? t6 : t6;
t8 = t6 - t4;
t9 = t3 s<= t1;
res1 = t4 s< t5;
Program 1:
t1 = 0x1 % 0x1;
t2 = x >>> x;
t3 = 0x0 | nondet0;
t4 = t1 == t1;
t5 = 0x1 ==> t4;
t6 = -(x);
t7 = t2 | y;
t8 = min(nondet0, x);
t9 = nondet0 < nondet0;
res1 = ~(x);
Program 2:
t1 = min(x, 0x0);
t2 = nondet0 - t1;
t3 = ~(t2);
t4 = x >>> 0x0;
t5 = y | nondet0;
t6 = y == x;
t7 = ~(t5);
t8 = t7 / t3;
t9 = nondet0 s<= t2;
res1 = -(y);

Fastest checker: explicit
Fails for (0, 3, 2)

[]
Fastest checker: anneal
Evars: 7, 3, 1
Program 0:
t1 = -(x);
t2 = y + 0x0;
t3 = nondet0 >> y;
t4 = 0x1 < x;
t5 = y >>> t1;
t6 = -(x);
t7 = -(t2);
t8 = t3 ? t1 : t4;
t9 = 0x0 s<= 0x0;
res1 = t4 s< t5;
Program 1:
t1 = y <= x;
t2 = y >> 0x1;
t3 = t1 >> 0x0;
t4 = t1 == y;
t5 = t4 | t2;
t6 = -(t5);
t7 = t2 ? y : t1;
t8 = 0x0 ^ 0x1;
t9 = t2 << 0x0;
res1 = ~(t7);
Program 2:
t1 = 0x1 >> 0x0;
t2 = y < 0x0;
t3 = y | x;
t4 = x <= t2;
t5 = t1 ==> nondet0;
t6 = nondet0 << x;
t7 = ~(x);
t8 = t3 / y;
t9 = -(nondet0);
res1 = ~(0x1);

Fastest checker: explicit
Fails for (0, 2, 2)

[]
Fastest checker: anneal
Evars: 7, 4, 2
Program 0:
t1 = -(x);
t2 = 0x0 + 0x1;
t3 = nondet0 >> x;
t4 = t3 != x;
t5 = y < t1;
t6 = -(x);
t7 = -(y);
t8 = t6 ? t7 : t4;
t9 = t7 s<= 0x0;
res1 = t7 s< t1;
Program 1:
t1 = x | x;
t2 = 0x1 >> nondet0;
t3 = t2 >> t1;
t4 = y == t1;
t5 = t4 | t2;
t6 = t5 ==> 0x0;
t7 = y ? 0x0 : t1;
t8 = t5 << 0x0;
t9 = t2 - 0x0;
res1 = ~(t5);
Program 2:
t1 = y <= 0x0;
t2 = y < nondet0;
t3 = y s< x;
t4 = -(x);
t5 = t1 ^ x;
t6 = nondet0 * x;
t7 = ~(x);
t8 = t5 >> x;
t9 = -(nondet0);
res1 = max(0x1, nondet0);

Fastest checker: explicit
Fails for (0, 5, 0)

[]
Fastest checker: anneal
Evars: 5, 4, 2
Program 0:
t1 = x & x;
t2 = 0x0 + 0x1;
t3 = nondet0 < x;
t4 = x == y;
t5 = t3 == t4;
t6 = -(x);
t7 = 0x0 ^ nondet0;
t8 = 0x0 < t1;
t9 = t7 s< t7;
res1 = t5 << x;
Program 1:
t1 = nondet0 | 0x1;
t2 = 0x0 >> nondet0;
t3 = y * 0x0;
t4 = t1 ==> 0x0;
t5 = t2 ? t2 : x;
t6 = t4 ==> t2;
t7 = min(0x1, 0x0);
t8 = t5 >>> t6;
t9 = min(y, t7);
res1 = t5 >> t3;
Program 2:
t1 = 0x1 >>> 0x1;
t2 = y < nondet0;
t3 = 0x1 - 0x0;
t4 = max(x, nondet0);
t5 = ~(0x0);
t6 = t1 + x;
t7 = ~(t4);
t8 = x >> x;
t9 = -(y);
res1 = max(0x0, nondet0);

Fastest checker: explicit
Fails for (0, 0, 2)

[]
Fastest checker: anneal
Evars: 5, 4, 2
Program 0:
t1 = -(x);
t2 = t1 + y;
t3 = nondet0 | x;
t4 = x == nondet0;
t5 = t2 == t4;
t6 = -(x);
t7 = t1 ^ 0x0;
t8 = 0x0 < t1;
t9 = t7 s< t7;
res1 = t5 << t1;
Program 1:
t1 = y s<= y;
t2 = y ? y : y;
t3 = y * 0x0;
t4 = t1 ==> 0x0;
t5 = t3 ? t2 : x;
t6 = t5 ==> t2;
t7 = 0x0 - 0x0;
t8 = t5 >>> t6;
t9 = y ^ 0x0;
res1 = t5 >> t3;
Program 2:
t1 = 0x1 >>> nondet0;
t2 = y < nondet0;
t3 = 0x0 - x;
t4 = t2 * nondet0;
t5 = ~(0x0);
t6 = t1 - x;
t7 = ~(t3);
t8 = t1 >> y;
t9 = -(y);
res1 = max(0x0, 0x1);

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 76.58s

Evars: 5, 4, 2
Program 0:
t1 = -(x);
t2 = t1 + y;
t3 = nondet0 | x;
t4 = x == nondet0;
t5 = t2 == t4;
t6 = -(x);
t7 = t1 ^ 0x0;
t8 = 0x0 < t1;
t9 = t7 s< t7;
res1 = t5 << t1;
Program 1:
t1 = y s<= y;
t2 = y ? y : y;
t3 = y * 0x0;
t4 = t1 ==> 0x0;
t5 = t3 ? t2 : x;
t6 = t5 ==> t2;
t7 = 0x0 - 0x0;
t8 = t5 >>> t6;
t9 = y ^ 0x0;
res1 = t5 >> t3;
Program 2:
t1 = 0x1 >>> nondet0;
t2 = y < nondet0;
t3 = 0x0 - x;
t4 = t2 * nondet0;
t5 = ~(0x0);
t6 = t1 - x;
t7 = ~(t3);
t8 = t1 >> y;
t9 = -(y);
res1 = max(0x0, 0x1);


Perf counters:
{'cbmc': 1, 'genetic': 6, 'anneal': 6, 'explicit': 12, 'iterations': 12}
Perf timers:
verify: 27.30s
checker: 76.54s
gcc: 4.19s
_: 76.58s
synth: 49.27s
