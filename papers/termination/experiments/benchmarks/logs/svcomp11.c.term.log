Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >>> y;
t2 = y * nondet_2;
res1 = min(x, nondet_0);
Program 1:
res1 = nondet_2 s<= nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 13, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 + nondet_2;
res1 = nondet_2 - z;
Program 1:
t1 = nondet_3 == y;
t2 = max(nondet_1, x);
res1 = y - y;

Fastest checker: explicit
Fails for (0, 6, 0, 0, 3, 13, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z / z;
res1 = nondet_1 + z;
Program 1:
t1 = z == y;
t2 = nondet_1 ^ y;
t3 = nondet_0 % t2;
t4 = ~t3;
res1 = ~t2;

Fastest checker: explicit
Fails for (0, 0, 10, 0, 3, 13, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 ==> z;
t2 = nondet_1 / y;
t3 = t2 * nondet_0;
res1 = max(y, 0x8);
Program 1:
t1 = x s< x;
res1 = x s<= 0x1;

Fastest checker: cbmc
Fails for (1, 4, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= 0x7;
t2 = nondet_0 >>> 0x7;
t3 = t2 ==> 0x7;
t4 = t3 >> y;
res1 = nondet_3 s<= t1;
Program 1:
t1 = nondet_3 >> 0x1;
t2 = nondet_0 % y;
t3 = t2 s<= 0x1;
t4 = x % t2;
res1 = min(nondet_3, nondet_1);

Fastest checker: explicit
Fails for (2, 4, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 + 0xf;
Program 1:
t1 = nondet_1 ^ nondet_2;
res1 = 0xf s<= z;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf != z;
Program 1:
t1 = x s<= nondet_0;
res1 = x >> nondet_2;

Fastest checker: cbmc
Fails for (0, 0, 0, 13, 15, 0, 15)

[]
Fastest checker: genetic
Program 0:
t1 = y <= y;
t2 = nondet_1 == nondet_3;
res1 = 0x7 - nondet_3;
Program 1:
res1 = nondet_2 s< x;

Fastest checker: explicit
Fails for (7, 0, 0, 13, 15, 0, 15)

[]
Fastest checker: genetic
Program 0:
t1 = z < nondet_1;
t2 = nondet_3 ^ nondet_0;
t3 = nondet_3 s< x;
t4 = t2 != t2;
res1 = z <= z;
Program 1:
t1 = x & y;
t2 = min(x, nondet_3);
t3 = ~x;
t4 = nondet_2 < nondet_1;
res1 = t2 s< y;

Fastest checker: cbmc
Fails for (11, 15, 0, 0, 6, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 < z;
res1 = 0xf | 0xf;
Program 1:
t1 = nondet_3 >>> nondet_2;
t2 = x <= t1;
res1 = nondet_1 ^ z;

Fastest checker: explicit
Fails for (4, 0, 1, 0, 6, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 >>> z;
t2 = nondet_2 != nondet_0;
t3 = nondet_0 << nondet_0;
res1 = ~t2;
Program 1:
t1 = nondet_0 <= 0x8;
res1 = z << z;

Fastest checker: explicit
Fails for (5, 0, 1, 0, 6, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = z & nondet_1;
t2 = 0x8 >> nondet_2;
t3 = -x;
t4 = t2 << t3;
res1 = -t3;
Program 1:
t1 = z * 0x1;
t2 = nondet_0 ^ y;
t3 = nondet_1 s< x;
t4 = 0x1 - nondet_2;
res1 = nondet_2 - nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 6, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 * x;
t2 = 0x1 & z;
t3 = x % x;
t4 = max(t2, 0x1);
res1 = z ==> t4;
Program 1:
t1 = nondet_0 s<= nondet_0;
t2 = t1 ? x : x;
t3 = max(y, nondet_0);
t4 = t1 / x;
res1 = x ? z : x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 / 0x1;
res1 = z | 0x1;
Program 1:
res1 = y + x;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 7, 4, 5)

[]
Fastest checker: genetic
Program 0:
t1 = z - y;
t2 = -nondet_2;
t3 = x | nondet_3;
t4 = nondet_0 + nondet_0;
res1 = 0xf + 0xf;
Program 1:
t1 = x + y;
res1 = z >> y;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_2;
t2 = -nondet_3;
t3 = ~nondet_3;
t4 = t3 <= nondet_3;
res1 = 0x7 + 0x7;
Program 1:
t1 = z & z;
t2 = nondet_2 - nondet_3;
t3 = y < z;
t4 = x << y;
res1 = t3 - 0x7;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = x <= 0x1;
t2 = x - 0x1;
t3 = nondet_3 <= x;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = ~z;
t2 = x << y;
t3 = z % 0x7;
t4 = x s< x;
res1 = t3 ? nondet_0 : nondet_1;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = x <= 0x7;
t3 = x - 0x7;
t4 = z + t3;
res1 = 0x7 + 0x7;
Program 1:
t1 = nondet_2 + x;
t2 = 0x0 + 0x0;
t3 = y + z;
t4 = nondet_2 >> nondet_2;
res1 = t3 >> t4;

Fastest checker: explicit
Fails for (6, 0, 1, 0, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = z * nondet_3;
t2 = z << nondet_3;
res1 = 0x7 + 0x7;
Program 1:
t1 = y - 0x1;
t2 = x ^ z;
t3 = y << z;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = 0xf + 0xf;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = nondet_1 + t1;
Program 1:
t1 = y << z;
t2 = 0x8 + 0x8;
t3 = x ? nondet_3 : x;
t4 = x == nondet_2;
res1 = t1 ^ x;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 1, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 ^ y;
t2 = nondet_0 * z;
t3 = ~nondet_3;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = y << z;
t2 = 0x8 + 0x8;
t3 = x ? nondet_3 : x;
t4 = x == z;
res1 = t1 ^ x;

Fastest checker: explicit
Fails for (0, 8, 0, 0, 2, 5, 5)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 + 0x1;
Program 1:
t1 = x >> nondet_1;
t2 = z ==> x;
t3 = 0xf + 0xf;
t4 = t3 | z;
res1 = max(y, nondet_2);

Fastest checker: explicit
Fails for (1, 5, 1, 0, 2, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = z | nondet_0;
t2 = 0x7 s<= nondet_0;
t3 = nondet_2 < t1;
res1 = max(nondet_2, 0x7);
Program 1:
t1 = 0x7 + 0x7;
t2 = x >> nondet_2;
t3 = z - nondet_0;
t4 = y s< y;
res1 = max(y, y);

Fastest checker: explicit
Fails for (0, 2, 0, 1, 2, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = z - nondet_3;
t2 = y + x;
res1 = max(0x1, t1);

Fastest checker: explicit
Fails for (5, 0, 0, 0, 3, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = y | 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = z - nondet_3;
t2 = z + x;
t3 = min(x, y);
t4 = max(z, nondet_3);
res1 = max(y, y);

Fastest checker: explicit
Fails for (5, 4, 0, 0, 3, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 != x;
t2 = nondet_2 ^ t1;
t3 = 0x1 + 0x1;
t4 = nondet_0 <= nondet_3;
res1 = 0x1 + 0x1;
Program 1:
t1 = z + x;
t2 = 0xf + 0xf;
t3 = 0xf ^ nondet_1;
t4 = z - t3;
res1 = nondet_1 * y;

Fastest checker: explicit
Fails for (0, 0, 7, 0, 3, 5, 5)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 & nondet_2;
t2 = x ^ nondet_1;
res1 = y != 0xf;
Program 1:
t1 = z * nondet_0;
t2 = x >>> x;
t3 = nondet_3 ? x : x;
res1 = y << z;

Fastest checker: cbmc
Fails for (2, 0, 0, 3, 3, 15, 6)

[]
Fastest checker: genetic
Program 0:
res1 = ~nondet_0;
Program 1:
t1 = y ? x : z;
t2 = y * z;
t3 = nondet_1 | y;
res1 = nondet_0 - nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 15, 3, 15, 6)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 + 0x7;
Program 1:
t1 = y ? x : z;
t2 = 0xf + 0xf;
t3 = y * z;
res1 = nondet_1 | y;

Fastest checker: cbmc
Fails for (6, 0, 11, 0, 4, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x == x;
t2 = nondet_0 s<= nondet_0;
t3 = 0x1 + 0x1;
t4 = 0x1 + 0x1;
res1 = nondet_1 + t1;
Program 1:
t1 = y >> nondet_2;
t2 = x % y;
t3 = y == z;
t4 = 0x1 + z;
res1 = t1 + 0x1;

Fastest checker: explicit
Fails for (3, 2, 11, 0, 4, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z - x;
t2 = 0xf + 0xf;
t3 = max(nondet_3, x);
res1 = 0xf + 0xf;
Program 1:
t1 = -x;
t2 = max(nondet_2, nondet_3);
t3 = y + x;
t4 = max(0x7, t2);
res1 = z * z;

Fastest checker: cbmc
Fails for (11, 11, 0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 + z;
t2 = z >>> z;
t3 = 0x1 s< nondet_0;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = nondet_1 ? y : z;
t2 = z ^ nondet_2;
t3 = y * x;
t4 = 0x8 + z;
res1 = t1 + 0x8;

Fastest checker: cbmc
Fails for (0, 0, 2, 1, 4, 4, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, y);
t2 = 0xf ^ nondet_1;
t3 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = 0x7 & x;
res1 = nondet_1 ? y : z;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc







Finished in 14.64s

Program 0:
t1 = max(y, y);
t2 = 0xffffffff ^ nondet_1;
t3 = 0xffffffff + 0xffffffff;
res1 = 0xffffffff + 0xffffffff;
Program 1:
t1 = 0x7fffffff & x;
res1 = nondet_1 ? y : z;


Perf counters:
{'genetic': 33, 'cbmc': 10, 'explicit': 25, 'iterations': 33}
Perf timers:
gcc: 0.54s
verify: 10.20s
checker: 14.57s
generalize: 0.94s
synth: 4.43s
_: 14.64s
