Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = nondet_1 >>> y;
Program 1:
t1 = z s<= nondet_1;
t2 = min(x, 0x0);
I = y s<= y;

Fastest checker: explicit
Fails for (0, 0, 0, 5, 1, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 & nondet_0;
I = 0x2 >> z;
Program 1:
I = nondet_1 s< z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 5)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_1, nondet_2);
t2 = 0x7 == z;
I = t2 ? y : 0x7;
Program 1:
t1 = x * y;
I = nondet_2 | x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = max(0x2, nondet_0);
t2 = 0x2 + nondet_0;
I = -t2;
Program 1:
I = x <= nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 6, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 != 0x7;
Program 1:
I = nondet_0 / nondet_0;

Fastest checker: explicit
Fails for (0, 7, 0, 6, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 ^ x;
I = z | z;
Program 1:
I = nondet_1 * nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
I = nondet_3 s<= 0x1;
Program 1:
t1 = nondet_3 < nondet_0;
t2 = nondet_1 s< nondet_1;
I = x * 0x3;

Fastest checker: explicit
Fails for (2, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 <= y;
I = z ^ t1;
Program 1:
t1 = nondet_0 ? nondet_3 : nondet_1;
I = y & z;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >> x;
I = 0x2 | t1;
Program 1:
t1 = 0x1 == nondet_1;
t2 = nondet_2 + z;
I = z s< nondet_1;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
I = -t1;
Program 1:
I = nondet_2 != x;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = x ==> x;
Program 1:
I = nondet_0 ? nondet_2 : z;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = max(y, 0x4);
Program 1:
I = min(y, z);

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = 0x5 | y;
Program 1:
t1 = x << y;
I = z + nondet_3;

Fastest checker: explicit
Fails for (7, 0, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = 0x2 <= 0x2;
Program 1:
t1 = z s< z;
t2 = max(x, nondet_3);
t3 = y + x;
I = nondet_2 + nondet_0;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_3 | 0x5;
Program 1:
t1 = z & nondet_1;
t2 = min(x, y);
t3 = z + z;
I = y + y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z & x;
I = 0x7 ^ t1;
Program 1:
t1 = x + y;
I = z ^ 0x0;

Fastest checker: explicit
Fails for (2, 0, 1, 0, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 | 0x7;
Program 1:
t1 = nondet_0 s< 0x6;
t2 = z * x;
t3 = y + 0x6;
I = 0x6 + z;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z | nondet_0;
I = nondet_2 + 0x3;
Program 1:
t1 = z * x;
t2 = y + nondet_1;
I = nondet_0 + 0x5;

Fastest checker: explicit
Fails for (0, 5, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 | y;
I = t1 <= t1;
Program 1:
t1 = z + y;
t2 = nondet_3 + z;
t3 = t1 * 0x2;
t4 = y + x;
I = x + 0x2;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 s<= nondet_1;
I = t1 - nondet_0;
Program 1:
t1 = nondet_3 ^ z;
t2 = z << x;
t3 = nondet_2 ^ 0x1;
t4 = nondet_3 - nondet_1;
I = nondet_0 + y;

Fastest checker: explicit
Fails for (0, 0, 4, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = max(0x3, x);
Program 1:
t1 = z * x;
t2 = y + nondet_1;
I = nondet_0 + 0x6;

Fastest checker: explicit
Fails for (0, 0, 6, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = max(0x3, x);
Program 1:
t1 = ~y;
t2 = x + y;
t3 = t2 + z;
I = nondet_0 != z;

Fastest checker: explicit
Fails for (3, 0, 6, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~z;
I = z + t1;
Program 1:
t1 = 0x7 s< y;
t2 = y + 0x7;
t3 = nondet_3 s<= nondet_1;
t4 = z * 0x7;
t5 = y + x;
I = t4 + t4;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 | 0x7;
Program 1:
t1 = y + x;
t2 = z ? t1 : y;
I = nondet_3 >>> 0x0;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 >> nondet_3;
I = nondet_1 s< 0x3;
Program 1:
t1 = x + nondet_3;
t2 = nondet_1 <= nondet_0;
t3 = nondet_1 | nondet_3;
t4 = max(z, z);
t5 = y << nondet_0;
I = nondet_2 << nondet_3;

Fastest checker: explicit
Fails for (0, 0, 3, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 + nondet_0;
I = nondet_1 | 0x1;
Program 1:
t1 = ~nondet_3;
t2 = x * z;
I = nondet_0 ^ y;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 2, 1, 2)

[]
Fastest checker: genetic
Program 0:
I = nondet_3 | 0x1;
Program 1:
t1 = ~x;
t2 = nondet_1 ==> 0x6;
t3 = z ==> nondet_1;
t4 = x + y;
t5 = z & z;
I = min(y, y);

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 5.49s

Program 0:
I = nondet_3 | 0x1;
Program 1:
t1 = ~x;
t2 = nondet_1 ==> 0x6;
t3 = z ==> nondet_1;
t4 = x + y;
t5 = z & z;
I = min(y, y);


Perf counters:
{'genetic': 27, 'cbmc': 1, 'explicit': 27, 'iterations': 27}
Perf timers:
verify: 4.28s
checker: 5.42s
gcc: 0.64s
_: 5.49s
synth: 1.19s
