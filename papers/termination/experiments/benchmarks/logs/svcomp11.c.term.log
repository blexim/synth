Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_1) >> ((sword_t) y);
t2 = y * nondet_2;
I = min(x, nondet_0);
Program 1:
I = ((sword_t) nondet_2) <= ((sword_t) nondet_2);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) x) <= ((sword_t) 0xd);
t2 = ((sword_t) nondet_0) >> ((sword_t) 0xd);
t3 = !t2 || 0xd;
t4 = t3 >> y;
I = ((sword_t) nondet_3) <= ((sword_t) t1);
Program 1:
t1 = nondet_3 >> 0xd;
t2 = nondet_0 % y;
t3 = ((sword_t) t2) <= ((sword_t) 0xd);
t4 = x % t2;
I = min(nondet_3, nondet_1);

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 + 0x8;
Program 1:
t1 = nondet_1 ^ nondet_2;
I = ((sword_t) 0x3) <= ((sword_t) z);

Fastest checker: explicit
Fails for (0, 0, 0, 8, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = 0x5 != z;
Program 1:
t1 = ((sword_t) x) <= ((sword_t) nondet_0);
I = x >> nondet_2;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 < z;
I = 0x5 | 0x5;
Program 1:
t1 = ((sword_t) nondet_3) >> ((sword_t) nondet_2);
t2 = x <= t1;
I = nondet_1 ^ z;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) z);
t2 = nondet_2 != nondet_0;
t3 = nondet_0 << nondet_0;
I = ~t2;
Program 1:
t1 = nondet_0 <= 0x9;
I = z << z;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = !0x8 || z;
t2 = nondet_1 - nondet_2;
I = 0x8 - y;
Program 1:
t1 = 0x7 | x;
t2 = z * y;
t3 = ((sword_t) nondet_3) < ((sword_t) nondet_2);
I = 0x7 <= t2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 8, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~z;
t2 = !t1 || nondet_3;
t3 = y + x;
I = -t1;
Program 1:
t1 = ((sword_t) y) < ((sword_t) nondet_3);
t2 = t1 ? x : y;
t3 = z << nondet_3;
I = ~t1;

Fastest checker: explicit
Fails for (2, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z | z;
I = -0x8;
Program 1:
t1 = y << 0xc;
t2 = t1 * z;
I = t2 & nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc ^ nondet_1;
I = ~t1;
Program 1:
t1 = max(y, nondet_2);
t2 = z <= 0xc;
I = z & x;

Fastest checker: explicit
Fails for (0, 0, 3, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
t2 = x & 0x6;
t3 = 0x6 != t1;
t4 = t2 & t3;
I = t2 | 0x6;
Program 1:
t1 = nondet_3 & z;
t2 = nondet_3 + x;
t3 = min(z, y);
t4 = ~nondet_2;
I = x != t1;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_3) < ((sword_t) nondet_2);
I = ((sword_t) nondet_1) <= ((sword_t) nondet_1);
Program 1:
t1 = x ? y : nondet_2;
t2 = z | z;
t3 = nondet_1 * x;
t4 = min(0xa, t1);
I = y << nondet_1;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_2;
t2 = t1 & z;
t3 = ~nondet_2;
t4 = nondet_1 + y;
I = ~z;
Program 1:
t1 = x << nondet_1;
t2 = nondet_3 == y;
t3 = min(nondet_2, z);
I = y | nondet_3;

Fastest checker: explicit
Fails for (3, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_1) >> ((sword_t) y);
t2 = nondet_2 + x;
I = max(z, 0xc);
Program 1:
t1 = x << nondet_2;
t2 = z ? y : nondet_0;
t3 = nondet_0 + t1;
I = nondet_2 < z;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
I = nondet_0 + 0xc;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z - nondet_0;
t5 = z + x;
I = t3 + y;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc + y;
t2 = z + t1;
I = z + 0xc;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = z + y;
t4 = nondet_2 + nondet_1;
I = min(x, y);

Fastest checker: explicit
Fails for (4, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
I = 0xc + t1;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = nondet_2 + nondet_2;
t4 = z + nondet_0;
I = ((sword_t) z) <= ((sword_t) x);

Fastest checker: explicit
Fails for (8, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc | nondet_2;
I = t1 + 0xc;
Program 1:
t1 = x + nondet_1;
t2 = z * t1;
t3 = y << y;
t4 = !y || y;
I = min(t2, t4);

Fastest checker: explicit
Fails for (0, 0, 15, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = ((sword_t) 0x9) <= ((sword_t) 0x9);
Program 1:
t1 = x == z;
t2 = ((sword_t) y) >> ((sword_t) nondet_2);
t3 = !y || x;
I = 0x2 << nondet_3;

Fastest checker: explicit
Fails for (1, 1, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xc + y;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z - nondet_0;
t5 = z + nondet_0;
t6 = z + t3;
t7 = y + nondet_3;
t8 = x + nondet_2;
I = nondet_2 - t8;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 4, 0)

[]
Fastest checker: genetic
Program 0:
t1 = -x;
I = ~nondet_3;
Program 1:
t1 = y + z;
t2 = x << z;
t3 = z & nondet_1;
I = -z;

Fastest checker: explicit
Fails for (15, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y == nondet_3;
t2 = nondet_1 / 0xb;
I = 0xb + y;
Program 1:
t1 = ((sword_t) nondet_2) < ((sword_t) nondet_1);
t2 = nondet_2 + nondet_2;
t3 = min(nondet_0, nondet_3);
t4 = z - nondet_0;
I = min(x, y);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 5, 0)

[]
Fastest checker: genetic
Program 0:
I = 0xb != nondet_2;
Program 1:
t1 = ((sword_t) nondet_2) < ((sword_t) nondet_1);
t2 = max(t1, nondet_1);
t3 = x ? 0x1 : x;
t4 = y + nondet_2;
t5 = nondet_2 != t4;
t6 = z - nondet_0;
I = nondet_0 < t5;

Fastest checker: explicit
Fails for (0, 11, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
I = ((sword_t) 0xc) < ((sword_t) x);
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = z ^ nondet_1;
t4 = x + 0x2;
I = -z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 8, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc ? nondet_1 : 0xc;
I = 0xc + nondet_2;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z - nondet_0;
t5 = !z || t2;
t6 = z - nondet_1;
t7 = x - 0x2;
t8 = y * nondet_1;
t9 = nondet_2 != nondet_1;
I = t9 + nondet_1;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
I = 0xc + t1;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z + nondet_1;
t5 = x - 0x2;
I = nondet_3 + y;

Fastest checker: explicit
Fails for (15, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
t2 = ((sword_t) x) < ((sword_t) z);
t3 = 0xc + x;
I = nondet_2 <= t3;
Program 1:
t1 = y + nondet_3;
t2 = max(t1, t1);
t3 = x == z;
t4 = y + nondet_3;
I = y + nondet_1;

Fastest checker: explicit
Fails for (0, 13, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = 0xc != nondet_2;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = max(z, nondet_1);
t4 = x - 0x2;
I = -t3;

Fastest checker: explicit
Fails for (0, 12, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
I = 0xc / 0xc;
Program 1:
t1 = z << nondet_3;
t2 = nondet_0 + 0x2;
t3 = t2 + t2;
t4 = z != t3;
t5 = x - 0x2;
I = nondet_3 * y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
t2 = nondet_1 / 0xe;
I = 0xe + y;
Program 1:
t1 = !z || x;
t2 = y + z;
t3 = y << nondet_2;
I = -x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 2, 0)

[]
Fastest checker: genetic
Program 0:
t1 = z <= nondet_3;
t2 = nondet_2 + y;
t3 = nondet_0 <= nondet_0;
t4 = min(nondet_1, nondet_1);
I = min(0xf, 0xf);
Program 1:
t1 = nondet_0 | nondet_2;
t2 = x >> nondet_0;
t3 = t1 & x;
t4 = y + t1;
t5 = y + nondet_2;
t6 = t4 + nondet_1;
t7 = z + nondet_0;
t8 = z + t5;
I = y * nondet_3;

Fastest checker: explicit
Fails for (0, 14, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z <= nondet_3;
I = t1 + y;
Program 1:
t1 = nondet_0 | nondet_2;
t2 = x >> nondet_0;
t3 = t1 & x;
t4 = y + t1;
t5 = nondet_0 + nondet_1;
t6 = nondet_0 + nondet_0;
t7 = t6 + z;
I = y + nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 15, 0)

[]
Fastest checker: genetic
Program 0:
t1 = z <= nondet_3;
t2 = nondet_0 < nondet_0;
I = y == y;
Program 1:
t1 = nondet_0 | nondet_2;
t2 = 0x9 + nondet_3;
t3 = nondet_0 >> nondet_3;
t4 = min(y, nondet_3);
t5 = y << nondet_2;
t6 = t4 + nondet_1;
t7 = z + nondet_0;
t8 = z * t5;
t9 = nondet_3 != nondet_1;
I = nondet_3 - x;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z <= nondet_3;
t2 = nondet_0 < nondet_0;
I = y == y;
Program 1:
t1 = nondet_0 | nondet_2;
t2 = x >> nondet_0;
t3 = t1 & x;
t4 = y + t1;
t5 = 0x9 + nondet_3;
t6 = nondet_0 + nondet_3;
t7 = y + nondet_2;
t8 = t6 + nondet_1;
t9 = z >> nondet_0;
t10 = min(nondet_3, nondet_1);
t11 = x == 0x9;
I = 0x9 + y;

Fastest checker: explicit
Fails for (0, 9, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = y == y;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z - nondet_0;
t5 = !z || t2;
t6 = t4 + x;
t7 = y + t4;
I = y + nondet_2;

Fastest checker: explicit
Fails for (0, 15, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_2) <= ((sword_t) z);
t2 = 0xc + z;
I = 0xc | x;
Program 1:
t1 = y + nondet_3;
t2 = z + x;
I = y & z;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xa + nondet_3;
Program 1:
t1 = z << nondet_0;
t2 = z * nondet_0;
t3 = t1 + x;
I = y * t1;

Fastest checker: explicit
Fails for (6, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 & nondet_1;
I = ((sword_t) nondet_2) <= ((sword_t) nondet_2);
Program 1:
t1 = ((sword_t) y) < ((sword_t) nondet_2);
t2 = max(z, y);
t3 = min(nondet_2, z);
t4 = nondet_3 + z;
t5 = y + t4;
t6 = x + nondet_2;
I = -z;

Fastest checker: explicit
Fails for (0, 15, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -nondet_1;
I = ((sword_t) 0xd) >> ((sword_t) z);
Program 1:
t1 = nondet_3 + x;
t2 = y * nondet_3;
t3 = y + nondet_2;
t4 = t2 * nondet_1;
I = z != nondet_0;

Fastest checker: explicit
Fails for (8, 15, 2, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 + nondet_0;
I = nondet_1 != 0xe;
Program 1:
t1 = nondet_0 * y;
t2 = y << t1;
t3 = nondet_0 << t2;
t4 = ~z;
t5 = nondet_1 + x;
t6 = z + nondet_1;
t7 = z + nondet_0;
t8 = z + t5;
t9 = z + nondet_3;
I = nondet_3 * y;

Fastest checker: explicit
Fails for (0, 0, 14, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = nondet_1 != 0xc;
Program 1:
t1 = y + nondet_3;
t2 = y * nondet_2;
t3 = t1 != nondet_1;
t4 = z - nondet_0;
t5 = y + t4;
t6 = nondet_0 + t5;
t7 = z + 0x2;
t8 = nondet_2 + y;
t9 = z << x;
I = y << nondet_3;

Fastest checker: explicit
Fails for (0, 0, 12, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 << nondet_0;
t2 = nondet_2 < 0x7;
t3 = t1 - t1;
t4 = nondet_2 + z;
t5 = nondet_3 + nondet_1;
I = nondet_1 + 0x7;
Program 1:
t1 = !z || x;
t2 = y + nondet_3;
t3 = y + nondet_2;
t4 = t2 + nondet_1;
t5 = z + nondet_0;
t6 = z + t3;
t7 = z + nondet_0;
t8 = z * nondet_0;
t9 = nondet_1 != nondet_1;
t10 = z - 0x2;
I = !nondet_1 || 0x2;

Fastest checker: explicit
Fails for (0, 0, 9, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 << y;
t2 = 0x7 >> t1;
t3 = nondet_3 + nondet_1;
t4 = nondet_2 + 0x7;
t5 = t3 << t3;
t6 = nondet_2 < z;
I = 0x7 - nondet_3;
Program 1:
t1 = ~y;
t2 = nondet_0 & y;
t3 = y + nondet_2;
t4 = z + nondet_1;
t5 = z * x;
t6 = z != t4;
I = y + t6;

Fastest checker: explicit
Fails for (7, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = !z || nondet_2;
t2 = !t1 || y;
t3 = t2 + x;
t4 = nondet_3 + nondet_1;
I = 0xd + x;
Program 1:
t1 = nondet_2 | nondet_3;
t2 = -x;
t3 = x ^ x;
t4 = y - nondet_3;
t5 = y + nondet_2;
t6 = t4 + nondet_1;
t7 = nondet_0 + z;
I = y * nondet_3;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = !z || nondet_2;
I = 0xd + t1;
Program 1:
t1 = nondet_2 | nondet_3;
t2 = -x;
t3 = x ^ x;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_1);
t5 = t4 != y;
t6 = z + nondet_0;
t7 = z + t4;
t8 = nondet_0 + y;
t9 = y + t8;
I = nondet_0 + t9;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = !z || nondet_2;
t2 = !t1 || y;
t3 = 0xd & nondet_0;
I = nondet_2 + 0xd;
Program 1:
t1 = nondet_2 | nondet_3;
t2 = -x;
t3 = x ^ x;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_1);
t5 = y + nondet_2;
t6 = t4 + nondet_1;
t7 = z + nondet_0;
t8 = nondet_0 + z;
I = nondet_3 * y;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = z + x;
t2 = 0xd + t1;
t3 = t2 + x;
I = 0xd + t2;
Program 1:
t1 = nondet_2 | nondet_3;
t2 = -x;
t3 = x ^ x;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_1);
t5 = t4 != y;
t6 = nondet_0 + z;
t7 = y < nondet_3;
t8 = y & nondet_2;
I = y + t5;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 6, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = !z || nondet_2;
t2 = !t1 || y;
t3 = z + x;
I = 0xc + 0xc;
Program 1:
t1 = nondet_2 | nondet_3;
t2 = -x;
t3 = x ^ x;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_1);
t5 = t4 != y;
t6 = z + nondet_0;
t7 = nondet_0 + y;
I = y + t7;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 >> z;
t2 = nondet_0 | 0xd;
t3 = ((sword_t) nondet_3) <= ((sword_t) nondet_0);
t4 = y <= 0xd;
t5 = nondet_3 - nondet_1;
I = ~0xd;
Program 1:
t1 = ((sword_t) nondet_1) <= ((sword_t) nondet_2);
t2 = ~t1;
t3 = y & t1;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_2);
t5 = z + nondet_0;
t6 = z + z;
t7 = y + nondet_0;
t8 = nondet_1 + t7;
t9 = x + x;
t10 = x - x;
t11 = !nondet_2 || nondet_1;
t12 = t11 + x;
t13 = y + nondet_2;
t14 = t12 + nondet_1;
t15 = z + nondet_0;
t16 = t8 + t13;
I = max(y, nondet_2);

Fastest checker: explicit
Fails for (0, 13, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 >> z;
t2 = nondet_0 | 0xd;
I = !t1 || t2;
Program 1:
t1 = ((sword_t) nondet_1) <= ((sword_t) nondet_2);
t2 = ~t1;
t3 = y & t1;
t4 = ((sword_t) nondet_2) >> ((sword_t) nondet_2);
t5 = x & x;
t6 = z + z;
I = y + nondet_1;

Fastest checker: explicit
Fails for (0, 0, 15, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -0x5;
t2 = ((sword_t) y) < ((sword_t) x);
I = 0x5 + 0x5;
Program 1:
t1 = ~nondet_3;
t2 = nondet_0 + x;
t3 = z - nondet_0;
t4 = ((sword_t) y) >> ((sword_t) nondet_3);
t5 = y + nondet_2;
I = t5 + nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 15, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = min(x, 0xe);
t2 = nondet_2 + nondet_0;
I = !nondet_3 || 0xe;
Program 1:
t1 = ((sword_t) nondet_0) <= ((sword_t) nondet_1);
t2 = ~nondet_3;
t3 = t2 << t2;
t4 = ~y;
t5 = x + z;
t6 = nondet_0 + 0xb;
t7 = y << nondet_2;
t8 = t6 & nondet_1;
I = z != nondet_0;

Fastest checker: explicit
Fails for (1, 3, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf - nondet_1;
t2 = nondet_1 + z;
t3 = ((sword_t) t2) <= ((sword_t) y);
I = !nondet_2 || 0xf;
Program 1:
t1 = 0x4 ^ x;
t2 = ((sword_t) z) <= ((sword_t) nondet_2);
t3 = ((sword_t) 0x4) <= ((sword_t) nondet_2);
t4 = ((sword_t) t3) <= ((sword_t) x);
t5 = nondet_3 >> t1;
t6 = y ^ nondet_3;
t7 = nondet_1 + nondet_2;
t8 = t6 + z;
t9 = nondet_1 + t7;
t10 = nondet_0 + t9;
t11 = nondet_0 ^ y;
I = !nondet_2 || y;

Fastest checker: explicit
Fails for (14, 0, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(nondet_1, nondet_2);
t2 = nondet_1 + nondet_2;
t3 = -t1;
t4 = max(nondet_2, z);
I = 0x7 + z;
Program 1:
t1 = 0xc >> nondet_1;
t2 = t1 + x;
t3 = ((sword_t) nondet_3) <= ((sword_t) y);
t4 = nondet_1 >> nondet_2;
t5 = t3 + z;
t6 = nondet_0 + y;
I = nondet_0 + nondet_3;

Fastest checker: explicit
Fails for (9, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -nondet_2;
I = 0x5 + z;
Program 1:
t1 = ((sword_t) nondet_2) >> ((sword_t) nondet_0);
t2 = 0x1 * z;
I = nondet_0 ? x : y;

Fastest checker: explicit
Fails for (11, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -nondet_2;
I = z | 0x5;
Program 1:
t1 = ((sword_t) nondet_2) >> ((sword_t) nondet_0);
t2 = 0x1 + z;
t3 = nondet_0 ? x : y;
I = nondet_3 < x;

Fastest checker: explicit
Fails for (1, 2, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 == nondet_3;
t2 = nondet_3 & y;
t3 = z ? nondet_1 : z;
t4 = !nondet_3 || 0x6;
t5 = t4 * x;
I = z + 0x6;
Program 1:
t1 = -nondet_2;
t2 = nondet_0 * x;
t3 = 0xb * z;
t4 = z >> 0xb;
t5 = nondet_0 + t3;
I = y + nondet_0;

Fastest checker: explicit
Fails for (10, 0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xb + nondet_2;
Program 1:
t1 = z + z;
t2 = x + y;
t3 = -nondet_0;
t4 = z * 0x8;
I = ~nondet_3;

Fastest checker: explicit
Fails for (0, 5, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = 0xb + x;
Program 1:
t1 = min(nondet_2, z);
t2 = y ? t1 : nondet_1;
t3 = min(nondet_2, nondet_3);
t4 = nondet_2 * nondet_0;
t5 = z + z;
t6 = !x || y;
t7 = -nondet_0;
t8 = ((sword_t) 0x8) >> ((sword_t) nondet_1);
t9 = nondet_1 ? 0x8 : 0x8;
t10 = x + y;
t11 = nondet_2 <= nondet_1;
I = nondet_0 != z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 5, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 == nondet_0;
Program 1:
t1 = nondet_0 ? x : z;
I = nondet_1 * y;

Fastest checker: explicit
Fails for (0, 0, 8, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xa * nondet_2;
I = 0xa & 0xa;
Program 1:
t1 = nondet_0 ? x : z;
t2 = ((sword_t) nondet_1) >> ((sword_t) t1);
I = nondet_1 ? y : nondet_0;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xa * nondet_2;
t2 = 0xa & 0xa;
t3 = nondet_2 >> t2;
t4 = nondet_2 & x;
t5 = ((sword_t) t3) <= ((sword_t) nondet_3);
I = y + 0xa;
Program 1:
t1 = nondet_0 ? x : z;
t2 = nondet_2 + nondet_0;
t3 = nondet_0 == nondet_3;
I = nondet_0 ? y : y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 6, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xa * nondet_2;
t2 = 0xa & 0xa;
t3 = nondet_2 >> t2;
I = -t2;
Program 1:
t1 = nondet_0 ? x : z;
I = nondet_1 ? y : nondet_0;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 82.03s

Program 0:
t1 = 0xa * nondet_2;
t2 = 0xa & 0xa;
t3 = nondet_2 >> t2;
I = -t2;
Program 1:
t1 = nondet_0 ? x : z;
I = nondet_1 ? y : nondet_0;


Perf counters:
{'genetic': 63, 'cbmc': 2, 'explicit': 62, 'iterations': 63}
Perf timers:
verify: 69.76s
checker: 80.22s
gcc: 1.24s
_: 82.03s
synth: 10.85s
