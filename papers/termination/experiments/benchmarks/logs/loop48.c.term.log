Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = ((sword_t) 0x1) <= ((sword_t) y);
Program 1:
I = x & x;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y & x;
I = 0xc | t1;
Program 1:
t1 = 0x7 - x;
t2 = ~t1;
t3 = x < x;
I = t1 == t3;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y <= x;
t2 = t1 ? x : t1;
t3 = t1 * x;
I = y * 0xf;
Program 1:
t1 = y | 0x7;
t2 = 0x7 + x;
t3 = y * t1;
I = x == x;

Fastest checker: explicit
Fails for (1, 9)

[]
Fastest checker: genetic
Program 0:
t1 = y <= 0xc;
I = y & y;
Program 1:
t1 = x * 0x9;
I = y == y;

Fastest checker: explicit
Fails for (2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -y;
t2 = 0xb / 0xb;
t3 = !0xb || y;
I = y == t2;
Program 1:
t1 = x | 0xd;
t2 = min(0xd, t1);
t3 = x == t1;
I = -t3;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 ^ 0x1;
I = y & 0x1;
Program 1:
t1 = x << x;
t2 = x & 0x3;
I = t1 == 0x3;

Fastest checker: explicit
Fails for (4, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x ? x : y;
I = y << 0xb;
Program 1:
t1 = min(x, y);
t2 = ((sword_t) 0xd) <= ((sword_t) 0xd);
t3 = y != t2;
t4 = x * t1;
I = min(t4, t1);

Fastest checker: explicit
Fails for (1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x * y;
t2 = !y || 0x6;
I = x == t1;
Program 1:
t1 = x + x;
I = 0xf == 0xf;

Fastest checker: explicit
Fails for (4, 5)

[]
Fastest checker: genetic
Program 0:
I = y + y;
Program 1:
I = x + 0x8;

Fastest checker: explicit
Fails for (1, 10)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) <= ((sword_t) y);
t2 = y == t1;
I = min(t2, 0xc);
Program 1:
t1 = x + 0x2;
t2 = x ? y : 0x2;
I = t2 != 0x2;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 8
[]
Fastest checker: genetic
Program 0:
t1 = -0xc;
I = y < 0xc;
Program 1:
t1 = 0x6 % y;
t2 = t1 / y;
t3 = t1 & t2;
I = t2 == t1;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
I = y & 0xf;
Program 1:
t1 = ((sword_t) y) >> ((sword_t) 0xb);
t2 = y ? t1 : y;
I = x ^ t1;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) <= ((sword_t) y);
t2 = x / x;
t3 = min(t1, y);
I = y == t2;
Program 1:
t1 = y <= y;
t2 = t1 << x;
t3 = ~y;
I = t1 & t3;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + x;
t2 = ~t1;
t3 = 0x7 + y;
t4 = 0x7 + 0x7;
t5 = ((sword_t) y) <= ((sword_t) t4);
t6 = t5 == 0x7;
t7 = y + t5;
t8 = min(t5, t4);
t9 = x ^ x;
I = t8 == y;
Program 1:
t1 = 0x2 ? 0x2 : x;
t2 = ((sword_t) x) < ((sword_t) y);
t3 = 0x2 + x;
I = x + t3;

Fastest checker: explicit
Fails for (127, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0x9c) <= ((sword_t) y);
t2 = y + 0x9c;
t3 = -y;
I = y == t1;
Program 1:
t1 = x + 0xd2;
t2 = x * 0xd2;
t3 = 0xd2 - 0xd2;
I = x + x;

Fastest checker: explicit
Correct for wordlen=8
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 16
[]
Fastest checker: genetic
Program 0:
t1 = min(y, 0x55);
t2 = ((sword_t) y) < ((sword_t) 0x55);
t3 = 0x55 / x;
t4 = 0x55 | x;
I = t1 - 0x55;
Program 1:
t1 = ~0x1;
t2 = ((sword_t) 0x1) < ((sword_t) 0x1);
t3 = ((sword_t) 0x1) >> ((sword_t) t2);
t4 = y == t1;
I = !t2 || t4;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x + x;
I = -0x54;
Program 1:
t1 = max(x, y);
t2 = ~0xee;
t3 = 0xee ? y : 0xee;
I = ~x;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~x;
t2 = 0xb1 < t1;
t3 = 0xb1 == x;
t4 = t3 + t3;
I = min(y, 0xb1);
Program 1:
t1 = 0xe2 & 0xe2;
t2 = x ^ x;
t3 = min(0xe2, 0xe2);
t4 = ((sword_t) t2) >> ((sword_t) 0xe2);
I = ~x;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Program 0:
I = y % 0x9c;
Program 1:
t1 = x + 0xd2;
t2 = x * 0xd2;
t3 = t1 != t1;
t4 = y - x;
t5 = !0xd2 || t2;
t6 = 0xd2 + x;
I = 0xd2 - t6;

Fastest checker: explicit
Fails for (2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) y) <= ((sword_t) y);
t2 = 0x9c + 0x9c;
I = y == t1;
Program 1:
t1 = x + 0xd2;
t2 = x * 0xd2;
t3 = x + 0xd2;
t4 = t2 + t2;
t5 = y * x;
t6 = y != y;
I = 0xd2 - 0xd2;

Fastest checker: cbmc
Correct for wordlen=16
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 9.98s

Program 0:
t1 = ((sword_t) y) <= ((sword_t) y);
t2 = 0x9c + 0x9c;
I = y == t1;
Program 1:
t1 = x + 0xd2;
t2 = x * 0xd2;
t3 = x + 0xd2;
t4 = t2 + t2;
t5 = y * x;
t6 = y != y;
I = 0xd2 - 0xd2;


Perf counters:
{'genetic': 20, 'cbmc': 2, 'explicit': 39, 'iterations': 20}
Perf timers:
gcc: 2.98s
verify: 6.02s
checker: 9.48s
generalize: 0.06s
synth: 3.62s
_: 9.98s
