Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = 0x5 >>> n;
Program 1:
t1 = m s<= nondet_0;
t2 = min(z, y);
I = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 10, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y ? m : nondet_0;
I = n >>> nondet_0;
Program 1:
I = y < n;

Fastest checker: explicit
Fails for (0, 11, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 / x;
I = max(z, y);
Program 1:
t1 = z s< n;
I = nondet_0 == z;

Fastest checker: explicit
Fails for (14, 11, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = max(z, nondet_0);
t2 = min(t1, x);
I = z * z;
Program 1:
I = m - y;

Fastest checker: explicit
Fails for (0, 13, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n < nondet_0;
t2 = n != n;
I = t1 < x;
Program 1:
t1 = 0xc * x;
t2 = 0xc * nondet_0;
I = m s< y;

Fastest checker: explicit
Fails for (0, 14, 5, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m >>> 0x2;
t2 = nondet_0 / n;
I = n >> 0x2;
Program 1:
t1 = y + n;
t2 = x == m;
I = z ^ 0x6;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m / m;
t2 = nondet_0 * 0xc;
I = m ? x : t2;
Program 1:
t1 = z ? y : z;
t2 = t1 * m;
I = t1 <= x;

Fastest checker: explicit
Fails for (0, 1, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
I = m < x;
Program 1:
t1 = z s< 0xa;
t2 = t1 + t1;
I = m ==> nondet_0;

Fastest checker: explicit
Fails for (0, 3, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 * 0x0;
t2 = y < x;
I = x % n;
Program 1:
t1 = 0xb ^ y;
I = y ==> t1;

Fastest checker: explicit
Fails for (0, 4, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x + n;
t2 = z + m;
I = min(m, x);
Program 1:
t1 = y ==> n;
t2 = t1 * nondet_0;
I = z + 0x5;

Fastest checker: explicit
Fails for (0, 1, 0, 11, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = min(z, x);
t2 = 0xb >>> x;
t3 = n == z;
t4 = m == m;
I = x << 0xb;
Program 1:
t1 = 0x4 s< 0x4;
t2 = n <= z;
t3 = x << n;
I = z + 0x4;

Fastest checker: explicit
Fails for (0, 1, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
I = x >>> m;
Program 1:
t1 = x % z;
t2 = z | 0x6;
t3 = 0x6 <= m;
t4 = x / x;
t5 = y <= nondet_0;
I = 0x6 << z;

Fastest checker: explicit
Fails for (4, 4, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n - x;
t2 = z ==> y;
t3 = ~nondet_0;
t4 = z + 0x6;
t5 = z <= 0x6;
I = x / 0x6;
Program 1:
t1 = x | x;
t2 = y | nondet_0;
t3 = t1 | nondet_0;
t4 = nondet_0 - 0xe;
t5 = x | m;
t6 = nondet_0 != t5;
t7 = z s< n;
I = z == t7;

Fastest checker: explicit
Fails for (0, 12, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n - x;
I = x / 0x6;
Program 1:
t1 = x | x;
t2 = y | nondet_0;
t3 = t1 | nondet_0;
I = z s< 0xd;

Fastest checker: explicit
Fails for (0, 6, 0, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n / m;
t2 = m * m;
I = x / 0x7;
Program 1:
t1 = n s< n;
t2 = z << y;
t3 = y + m;
t4 = z + y;
I = z >>> 0xf;

Fastest checker: explicit
Fails for (0, 14, 14, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = ~m;
I = n ==> x;
Program 1:
t1 = y % x;
I = z + t1;

Fastest checker: explicit
Fails for (0, 4, 15, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
I = x / 0x3;
Program 1:
t1 = z != x;
t2 = n << z;
t3 = y s< nondet_0;
t4 = t2 + nondet_0;
I = z | 0x6;

Fastest checker: explicit
Fails for (4, 4, 15, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
I = -x;
Program 1:
t1 = y << z;
t2 = min(x, n);
t3 = z + m;
I = t3 >> y;

Fastest checker: explicit
Fails for (0, 5, 15, 13, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x >> x;
t2 = nondet_0 != 0x8;
t3 = x - m;
I = m s<= t3;
Program 1:
t1 = y + n;
I = m + z;

Fastest checker: explicit
Fails for (0, 4, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n + x;
t2 = z + y;
t3 = n - z;
t4 = m ==> m;
I = x / 0x6;
Program 1:
t1 = x | x;
t2 = y | nondet_0;
t3 = x + n;
t4 = z != z;
t5 = t3 ? nondet_0 : z;
I = z s<= 0xd;

Fastest checker: explicit
Fails for (0, 6, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
I = x << m;
Program 1:
t1 = z ^ z;
t2 = n s< y;
t3 = x >> n;
t4 = y + n;
I = t3 ^ z;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m - z;
t2 = nondet_0 ==> x;
t3 = t1 * x;
I = x / m;
Program 1:
t1 = z ^ z;
t2 = n s< y;
t3 = x >> n;
t4 = y + n;
I = t3 ^ z;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = ~m;
I = x % m;
Program 1:
t1 = z + n;
I = y >>> m;

Fastest checker: explicit
Fails for (1, 3, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 + 0x6;
t2 = m ==> x;
t3 = -y;
t4 = n != x;
I = x & t4;
Program 1:
t1 = nondet_0 ? x : y;
t2 = x ==> z;
t3 = nondet_0 != 0x4;
t4 = m + z;
I = ~m;

Fastest checker: explicit
Fails for (0, 5, 0, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n != x;
I = x & t1;
Program 1:
t1 = x ^ y;
I = n * m;

Fastest checker: explicit
Fails for (0, 1, 1, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 - m;
t2 = z >>> y;
t3 = n != x;
I = x & t3;
Program 1:
t1 = x != x;
t2 = y & z;
t3 = 0xf + z;
t4 = ~n;
I = z <= x;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = n + x;
t2 = z + y;
t3 = n - z;
t4 = m ==> m;
I = x / 0x7;
Program 1:
t1 = x | x;
t2 = y | nondet_0;
t3 = x + n;
t4 = z != z;
t5 = t3 ? nondet_0 : z;
I = z s<= 0xd;

Fastest checker: explicit
Fails for (0, 7, 0, 1, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = m + nondet_0;
t2 = m ^ n;
t3 = ~t2;
t4 = m ==> m;
I = x & t4;
Program 1:
t1 = z + n;
I = y >>> m;

Fastest checker: explicit
Fails for (0, 9, 0, 1, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x + 0x1;
t2 = nondet_0 == m;
I = t1 s< n;
Program 1:
t1 = 0x7 % 0x7;
t2 = ~z;
t3 = y - x;
I = nondet_0 >>> t3;

Fastest checker: explicit
Fails for (1, 9, 0, 1, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x + 0x1;
t2 = nondet_0 == m;
I = t1 s< n;
Program 1:
t1 = 0x7 % 0x7;
t2 = ~z;
t3 = max(x, m);
t4 = y < x;
I = nondet_0 + t4;

Fastest checker: explicit
Fails for (15, 9, 0, 1, 3, 13)

[]







Timeout
Perf counters:
{'genetic': 30, 'explicit': 30, 'timeout': 1, 'iterations': 31}
Perf timers:
verify: 0.51s
checker: 119.53s
gcc: 0.42s
_: 120.00s
synth: 119.23s
