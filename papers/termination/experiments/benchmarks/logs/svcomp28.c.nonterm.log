Using seed: 1337
[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6, 0
Program 0:
t1 = v >>> z;
t2 = z * x;
I = min(w, y);

Fastest checker: explicit
Fails for (0, 9, 5, 9, 2, 13, 6)

[]
Fastest checker: genetic
Evars: 1, 4, 2, 13, 8, 12, 10
Program 0:
t1 = y & w;
I = t1 s<= y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 13, 6)

[]
Fastest checker: genetic
Evars: 6, 7, 8, 11, 1, 14, 0
Program 0:
t1 = x & y;
t2 = z | c;
t3 = t1 ^ y;
I = w s<= t2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 4, 2, 0, 9, 4, 10, 13
Program 0:
t1 = x s< w;
I = t1 s< x;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 13, 5, 5, 9, 0, 10, 1
Program 0:
t1 = z | u;
t2 = c & x;
t3 = 0x1 << u;
I = t3 - 0x1;

Fastest checker: explicit
Fails for (1, 1, 0, 1, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 3, 5, 2, 2, 3, 3, 2
Program 0:
t1 = y + z;
I = y - x;

Fastest checker: explicit
Fails for (0, 2, 0, 1, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 11, 4, 4, 10, 0, 15, 13
Program 0:
t1 = v >>> 0x1;
t2 = y != c;
I = t1 >>> t1;

Fastest checker: explicit
Fails for (0, 1, 8, 1, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 10, 13, 4, 12, 4, 14, 4
Program 0:
I = u s<= z;

Fastest checker: explicit
Fails for (8, 1, 8, 1, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 12, 6, 6, 15, 3, 15, 13
Program 0:
I = z == y;

Fastest checker: explicit
Fails for (0, 0, 0, 13, 8, 13, 6)

[]
Fastest checker: genetic
Evars: 10, 10, 5, 8, 15, 1, 5
Program 0:
t1 = w >>> v;
I = w == z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 13, 13, 6)

[]
Fastest checker: genetic
Evars: 9, 0, 7, 11, 4, 2, 1
Program 0:
t1 = v * w;
t2 = w != v;
t3 = t1 + t2;
t4 = t2 ==> u;
I = t3 / z;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 13, 13, 6)

[]
Fastest checker: genetic
Evars: 0, 7, 7, 1, 12, 0, 6
Program 0:
t1 = -v;
t2 = c == z;
I = min(t2, y);

Fastest checker: cbmc
Fails for (0, 3, 0, 1, 0, 14, 14)

[]
Fastest checker: genetic
Evars: 7, 14, 13, 8, 15, 4, 10
Program 0:
t1 = y >> c;
I = t1 s<= z;

Fastest checker: cbmc
Fails for (0, 5, 0, 3, 0, 0, 15)

[]
Fastest checker: genetic
Evars: 3, 5, 6, 4, 0, 12, 11
Program 0:
t1 = y * x;
t2 = t1 << u;
t3 = u ^ x;
I = t1 >> t1;

Fastest checker: explicit
Fails for (0, 3, 1, 3, 0, 0, 15)

[]
Fastest checker: genetic
Evars: 0, 12, 3, 8, 10, 10, 13
Program 0:
t1 = y != u;
t2 = w - w;
t3 = -v;
I = t1 >> y;

Fastest checker: explicit
Fails for (0, 4, 0, 4, 0, 0, 15)

[]
Fastest checker: genetic
Evars: 6, 15, 9, 11, 14, 9, 15
Program 0:
t1 = z ==> 0x7;
t2 = t1 s< t1;
t3 = y == u;
t4 = u + u;
I = c < t4;

Fastest checker: cbmc
Fails for (5, 11, 0, 11, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 8, 3, 2, 2, 13, 7, 14
Program 0:
t1 = w ? u : x;
t2 = w * w;
t3 = t2 - t2;
t4 = t2 >>> x;
I = min(t1, t2);

Fastest checker: explicit
Fails for (1, 0, 0, 0, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 9, 2, 10, 15, 1, 3, 4
Program 0:
t1 = u s< x;
I = x & w;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 0, 2, 2, 0, 3, 4, 11
Program 0:
t1 = c ==> x;
t2 = min(t1, c);
I = t2 ^ t1;

Fastest checker: cbmc
Fails for (0, 4, 0, 0, 0, 8, 0)

[]
Fastest checker: genetic
Evars: 0, 7, 15, 2, 1, 10, 14
Program 0:
I = c <= 0x1;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 0, 8, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 3, 8, 1, 9, 1
Program 0:
t1 = x + x;
t2 = x <= y;
t3 = 0xf + 0xf;
I = u / t3;

Fastest checker: explicit
Fails for (14, 0, 1, 0, 0, 8, 0)

[]
Fastest checker: genetic
Evars: 13, 9, 11, 8, 7, 7, 8
Program 0:
I = 0x7 s<= w;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 8, 0)

[]
Fastest checker: genetic
Evars: 13, 5, 14, 12, 4, 10, 15
Program 0:
t1 = 0x7 ==> v;
I = u & t1;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 7, 8, 0)

[]
Fastest checker: genetic
Evars: 6, 7, 8, 1, 4, 0, 1
Program 0:
I = 0x7 s<= u;

Fastest checker: explicit
Fails for (7, 0, 1, 0, 7, 8, 0)

[]
Fastest checker: genetic
Evars: 13, 4, 10, 11, 10, 12, 14
Program 0:
t1 = ~w;
t2 = x & 0x8;
t3 = min(z, y);
I = t1 < t3;

Fastest checker: explicit
Fails for (0, 8, 0, 8, 8, 8, 0)

[]
Fastest checker: genetic
Evars: 13, 2, 4, 15, 7, 2, 7
Program 0:
t1 = -c;
t2 = y / 0x8;
t3 = x ^ y;
t4 = w + x;
I = x < y;

Fastest checker: explicit
Fails for (0, 0, 0, 15, 8, 8, 0)

[]
Fastest checker: genetic
Evars: 3, 7, 7, 9, 3, 7, 9
Program 0:
t1 = z & w;
t2 = z | c;
I = u == t2;

Fastest checker: explicit
Fails for (8, 0, 0, 15, 8, 8, 0)

[]
Fastest checker: genetic
Evars: 15, 5, 14, 9, 10, 11, 5
Program 0:
I = 0x8 < v;

Fastest checker: explicit
Fails for (0, 15, 9, 15, 8, 8, 0)

[]
Fastest checker: genetic
Evars: 9, 3, 4, 8, 3, 5, 2
Program 0:
t1 = 0x1 s< x;
I = t1 * u;

Fastest checker: explicit
Fails for (1, 2, 0, 2, 9, 8, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 3, 8, 1, 9, 1
Program 0:
t1 = y - x;
t2 = y == v;
t3 = t2 + x;
I = u / 0xf;

Fastest checker: explicit
Fails for (15, 2, 0, 2, 9, 8, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 3, 8, 1, 9, 1
Program 0:
t1 = x + x;
t2 = x - y;
I = u & t2;

Fastest checker: explicit
Fails for (1, 3, 0, 2, 9, 8, 0)

[]
Fastest checker: genetic
Evars: 8, 3, 11, 1, 7, 2, 0
Program 0:
t1 = c s<= c;
t2 = y == v;
I = x & t2;

Fastest checker: explicit
Fails for (0, 3, 2, 2, 9, 8, 0)

[]
Fastest checker: genetic
Evars: 5, 4, 10, 10, 3, 3, 12
Program 0:
t1 = v ? v : 0x1;
t2 = x != c;
t3 = t2 * u;
I = t2 s< z;

Fastest checker: cbmc
Fails for (0, 0, 1, 0, 0, 2, 4)

[]
Fastest checker: genetic
Evars: 9, 15, 12, 15, 15, 2, 7
Program 0:
I = 0xf <= v;

Fastest checker: explicit
Fails for (0, 7, 15, 0, 0, 2, 4)

[]
Fastest checker: genetic
Evars: 11, 5, 12, 15, 5, 8, 9
Program 0:
t1 = v ==> y;
t2 = 0xf + 0xf;
t3 = x != y;
t4 = y == v;
I = y & t4;

Fastest checker: explicit
Fails for (0, 7, 1, 1, 0, 2, 4)

[]
Fastest checker: genetic
Evars: 7, 2, 7, 10, 15, 13, 8
Program 0:
t1 = ~c;
t2 = y >> y;
t3 = 0x1 + 0x1;
t4 = 0x1 + 0x1;
I = u == t4;

Fastest checker: explicit
Fails for (2, 7, 1, 1, 0, 2, 4)

[]
Fastest checker: genetic
Evars: 4, 14, 7, 8, 12, 8, 8
Program 0:
t1 = v ^ c;
t2 = -w;
t3 = 0x7 + 0x7;
I = t3 == x;

Fastest checker: explicit
Fails for (0, 14, 0, 8, 0, 2, 4)

[]
Fastest checker: genetic
Evars: 14, 3, 0, 12, 1, 15, 5
Program 0:
t1 = y | u;
t2 = z + y;
t3 = max(w, x);
t4 = max(c, w);
I = 0xf <= w;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 15, 7, 1, 7, 0, 6, 9
Program 0:
I = y == 0x7;

Fastest checker: explicit
Fails for (0, 7, 0, 7, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 9, 13, 8, 12, 6, 9, 9
Program 0:
t1 = v | u;
t2 = v * w;
I = z < t2;

Fastest checker: explicit
Fails for (0, 7, 1, 7, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 5, 10, 1, 9, 13, 9, 4
Program 0:
t1 = z <= v;
t2 = v >>> 0x1;
t3 = u >> w;
t4 = v & u;
I = x & t4;

Fastest checker: explicit
Fails for (1, 7, 1, 7, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 1, 5, 3, 12, 6, 13, 0
Program 0:
t1 = v >>> 0x1;
t2 = y >> y;
t3 = y ==> t2;
I = u * t1;

Fastest checker: explicit
Fails for (1, 7, 2, 7, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 1, 6, 15, 8, 11, 14, 11
Program 0:
t1 = u & x;
t2 = x * v;
t3 = 0xf + 0xf;
I = t1 >>> x;

Fastest checker: explicit
Fails for (4, 6, 0, 8, 15, 2, 4)

[]
Fastest checker: genetic
Evars: 3, 4, 5, 13, 0, 6, 15
Program 0:
t1 = c s<= z;
t2 = v >>> 0x1;
t3 = t1 s<= t2;
t4 = u < w;
I = min(t2, t1);

Fastest checker: explicit
Fails for (0, 0, 2, 0, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 14, 3, 7, 11, 10, 11, 8
Program 0:
t1 = v >> 0x1;
t2 = min(y, t1);
I = t2 & v;

Fastest checker: explicit
Fails for (0, 5, 3, 1, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 5, 10, 1, 9, 13, 5, 2
Program 0:
t1 = x >> x;
t2 = v * u;
t3 = v & u;
t4 = ~x;
I = min(t3, t1);

Fastest checker: explicit
Fails for (1, 5, 3, 1, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 2, 3, 7, 11, 3, 11, 8
Program 0:
t1 = v >> x;
t2 = y == v;
t3 = w ^ w;
I = t2 * t1;

Fastest checker: explicit
Fails for (0, 4, 2, 2, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 11, 12, 2, 9, 10, 8, 15
Program 0:
t1 = c s< v;
t2 = u & x;
t3 = x >> x;
t4 = 0x7 + 0x7;
I = t2 >> u;

Fastest checker: explicit
Fails for (4, 5, 2, 2, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 10, 10, 3, 9, 11, 7, 13
Program 0:
t1 = y >> y;
t2 = v >>> 0x7;
t3 = 0x7 + 0x7;
I = 0x7 == z;

Fastest checker: cbmc
Fails for (0, 1, 0, 0, 0, 7, 3)

[]
Fastest checker: genetic
Evars: 6, 13, 15, 9, 0, 6, 12
Program 0:
t1 = z <= v;
t2 = v >> 0xf;
I = u & t2;

Fastest checker: explicit
Fails for (1, 2, 8, 0, 0, 7, 3)

[]
Fastest checker: genetic
Evars: 12, 10, 3, 9, 11, 3, 15
Program 0:
t1 = min(u, x);
t2 = c s<= z;
t3 = 0x7 + 0x7;
t4 = t2 << w;
I = t1 >>> 0x7;

Fastest checker: explicit
Fails for (8, 10, 0, 8, 0, 7, 3)

[]
Fastest checker: genetic
Evars: 8, 5, 10, 9, 12, 12, 1
Program 0:
t1 = v >> v;
t2 = v >>> 0x7;
t3 = u * w;
I = t3 & t2;

Fastest checker: explicit
Fails for (1, 2, 8, 0, 1, 7, 3)

[]
Fastest checker: genetic
Evars: 8, 13, 4, 10, 2, 7, 10
Program 0:
t1 = 0x7 >> y;
t2 = min(w, t1);
I = t2 s< w;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 1, 7, 3)

[]
Fastest checker: genetic
Evars: 15, 10, 3, 9, 11, 3, 0
Program 0:
t1 = v & u;
t2 = v & u;
t3 = z < t2;
I = v & t3;

Fastest checker: explicit
Fails for (8, 3, 9, 3, 1, 7, 3)

[]
Fastest checker: genetic
Evars: 15, 13, 4, 9, 12, 15, 12
Program 0:
I = 0xf == z;

Fastest checker: cbmc
Fails for (0, 8, 0, 8, 0, 15, 3)

[]
Fastest checker: genetic
Evars: 8, 13, 15, 12, 0, 6, 12
Program 0:
t1 = 0xf + 0xf;
t2 = v & u;
t3 = min(u, t2);
t4 = y s< 0xf;
I = min(t4, t2);

Fastest checker: explicit
Fails for (1, 8, 1, 8, 0, 15, 3)

[]
Fastest checker: genetic
Evars: 8, 13, 4, 10, 1, 7, 3
Program 0:
t1 = v == y;
t2 = u >>> 0x7;
t3 = -u;
t4 = v >>> 0x7;
I = t2 * t1;

Fastest checker: explicit
Fails for (8, 0, 8, 8, 0, 15, 3)

[]
Fastest checker: genetic
Evars: 8, 13, 13, 8, 0, 6, 15
Program 0:
t1 = u >>> 0xf;
t2 = w == z;
t3 = u >>> 0xf;
t4 = z <= y;
I = min(t2, t1);

Fastest checker: explicit
Fails for (8, 0, 0, 0, 15, 15, 3)

[]
Fastest checker: genetic
Evars: 8, 13, 4, 13, 1, 7, 0
Program 0:
t1 = y ==> c;
t2 = u >>> 0x7;
t3 = w == 0x7;
t4 = v << 0x7;
I = min(t3, x);

Fastest checker: explicit
Fails for (0, 1, 0, 1, 7, 0, 4)

[]
Fastest checker: genetic
Evars: 11, 14, 9, 13, 5, 11, 3
Program 0:
t1 = u >>> 0xf;
t2 = x s< 0xf;
I = t2 & w;

Fastest checker: explicit
Fails for (0, 8, 0, 8, 7, 0, 4)

[]
Fastest checker: genetic
Evars: 10, 15, 12, 12, 7, 10, 10
Program 0:
t1 = u >>> 0xf;
t2 = u >>> 0xf;
t3 = y | t2;
t4 = 0xf <= z;
I = y s< t3;

Fastest checker: explicit
Fails for (8, 8, 0, 8, 7, 0, 4)

[]
Fastest checker: genetic
Evars: 12, 13, 4, 10, 6, 7, 5
Program 0:
t1 = y + x;
t2 = z < u;
I = t1 & t2;

Fastest checker: explicit
Fails for (1, 9, 0, 8, 7, 0, 4)

[]
Fastest checker: genetic
Evars: 10, 9, 4, 8, 14, 5, 8
Program 0:
t1 = z < u;
t2 = c s<= 0xf;
t3 = z < u;
t4 = c < t3;
I = x & t4;

Fastest checker: cbmc
Fails for (15, 7, 0, 5, 0, 1, 0)

[]
Fastest checker: genetic
Evars: 11, 1, 10, 8, 3, 0, 9
Program 0:
t1 = w < u;
t2 = c < t1;
t3 = x < y;
t4 = 0x7 + 0x7;
I = z < t2;

Fastest checker: cbmc
Fails for (8, 4, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 5, 13, 1, 9, 15, 0, 4
Program 0:
t1 = z < u;
t2 = min(v, t1);
t3 = z < u;
t4 = z < u;
I = z < t2;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 14, 15, 5, 14, 10, 8, 8
Program 0:
t1 = z < u;
t2 = 0x7 + 0x7;
I = t2 == v;

Fastest checker: explicit
Fails for (0, 0, 14, 0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 7, 10, 5, 2, 3, 0
Program 0:
t1 = u == 0x7;
I = t1 & y;

Fastest checker: explicit
Fails for (7, 1, 0, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 14, 15, 12, 15, 10, 9, 8
Program 0:
t1 = v < u;
t2 = z < u;
t3 = 0x7 + c;
t4 = t2 << v;
I = v & t4;

Fastest checker: explicit
Fails for (1, 1, 6, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 15, 15, 4, 10, 2, 5, 8
Program 0:
t1 = w ==> c;
t2 = c < u;
t3 = 0xf == u;
I = x & t3;

Fastest checker: explicit
Fails for (15, 1, 6, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 11, 12, 6, 10, 14, 11, 15
Program 0:
t1 = u >> u;
t2 = min(z, x);
t3 = 0x8 + 0x8;
I = 0x8 < t1;

Fastest checker: explicit
Fails for (12, 1, 7, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 1, 15, 8, 12, 14, 10, 1
Program 0:
t1 = 0x8 < y;
t2 = u >> u;
t3 = z < u;
I = t2 & t1;

Fastest checker: explicit
Fails for (6, 9, 0, 9, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 1, 15, 3, 12, 0, 2, 0
Program 0:
t1 = 0x8 < v;
t2 = 0x8 < u;
I = t2 * t1;

Fastest checker: explicit
Fails for (9, 9, 9, 9, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 7, 15, 3, 12, 0, 6, 2
Program 0:
t1 = 0x8 < v;
t2 = -v;
t3 = t1 >> v;
I = min(u, t3);

Fastest checker: explicit
Fails for (1, 9, 12, 9, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 3, 12, 0, 13, 2
Program 0:
t1 = 0x8 < u;
t2 = 0x8 < u;
I = z & t1;

Fastest checker: explicit
Fails for (9, 0, 0, 0, 0, 1, 0)

[]
Fastest checker: genetic
Evars: 1, 15, 0, 12, 0, 10, 0
Program 0:
t1 = 0x8 < z;
t2 = 0x8 < u;
I = t2 & t1;

Fastest checker: cbmc
Fails for (10, 8, 0, 8, 0, 12, 3)

[]
Fastest checker: genetic
Evars: 2, 15, 10, 14, 13, 10, 4
Program 0:
t1 = w < w;
t2 = 0x8 < u;
t3 = 0x8 < u;
t4 = 0x8 < z;
I = c < t4;

Fastest checker: cbmc
Fails for (1, 4, 0, 0, 0, 10, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 3, 12, 13, 13, 3
Program 0:
t1 = 0x8 < v;
t2 = u >>> c;
t3 = 0x8 + 0x8;
t4 = min(w, y);
I = 0x8 < t4;

Fastest checker: explicit
Fails for (0, 9, 0, 9, 9, 10, 0)

[]
Fastest checker: genetic
Evars: 11, 12, 10, 9, 14, 11, 15
Program 0:
t1 = 0x8 < z;
t2 = 0x8 < v;
t3 = 0x8 < v;
t4 = 0x8 < v;
I = min(t4, t1);

Fastest checker: explicit
Fails for (0, 9, 9, 9, 9, 10, 0)

[]







Timeout
Perf counters:
{'genetic': 78, 'cbmc': 11, 'explicit': 67, 'timeout': 1, 'iterations': 79}
Perf timers:
verify: 14.53s
checker: 179.79s
gcc: 0.37s
_: 180.00s
synth: 165.44s
