Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) >> ((sword_t) y);
t2 = b * 0xc;
I = min(x, nondet_0);
Program 1:
I = ((sword_t) b) <= ((sword_t) nondet_0);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 != 0x5;
Program 1:
t1 = ((sword_t) nondet_0) <= ((sword_t) y);
I = a >> y;

Fastest checker: explicit
Fails for (0, 5, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y ^ 0xd;
t2 = nondet_1 | 0xd;
t3 = t1 & a;
t4 = nondet_0 < b;
I = ((sword_t) a) <= ((sword_t) a);
Program 1:
t1 = y % nondet_0;
t2 = y - 0x3;
I = 0x3 ? t1 : a;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = b <= a;
t2 = a | b;
t3 = nondet_1 ^ b;
I = 0xa ^ nondet_0;
Program 1:
t1 = nondet_1 == a;
t2 = min(nondet_1, a);
t3 = b - b;
t4 = y ^ t3;
I = t4 / x;

Fastest checker: explicit
Fails for (0, 10, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = ((sword_t) x) <= ((sword_t) a);
Program 1:
I = x & a;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = !nondet_1 || x;
Program 1:
I = nondet_1 ? x : y;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 == 0x8;
t2 = ((sword_t) 0x8) >> ((sword_t) b);
I = b ? x : 0x8;
Program 1:
t1 = ((sword_t) nondet_1) < ((sword_t) nondet_1);
t2 = ((sword_t) nondet_1) >> ((sword_t) nondet_0);
t3 = !t1 || a;
I = b + y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = 0xd != x;
Program 1:
t1 = x * x;
t2 = nondet_0 | t1;
t3 = min(y, 0xe);
I = t2 / t2;

Fastest checker: explicit
Fails for (0, 0, 13, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = a == y;
I = !y || b;
Program 1:
t1 = min(b, 0x9);
I = ~a;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_0, nondet_0);
t2 = y >> t1;
t3 = ~b;
t4 = t2 == y;
I = !t4 || t3;
Program 1:
I = y ^ 0x8;

Fastest checker: explicit
Fails for (0, 0, 0, 15, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 + nondet_1;
t2 = x * b;
t3 = t1 >> x;
t4 = t2 == nondet_0;
I = ((sword_t) y) <= ((sword_t) t3);
Program 1:
t1 = ((sword_t) x) <= ((sword_t) nondet_0);
t2 = y >> t1;
I = ((sword_t) t1) < ((sword_t) 0x4);

Fastest checker: explicit
Fails for (2, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 & a;
t2 = min(x, b);
t3 = ((sword_t) 0x6) <= ((sword_t) 0x6);
t4 = nondet_0 <= a;
I = ~nondet_1;
Program 1:
t1 = a * x;
t2 = max(nondet_0, nondet_0);
t3 = y << nondet_1;
t4 = -t1;
I = ~b;

Fastest checker: explicit
Fails for (15, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 - nondet_0;
t2 = t1 ? x : t1;
t3 = ~t1;
I = !t2 || nondet_0;
Program 1:
t1 = max(nondet_1, y);
I = nondet_1 / 0x1;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 ? nondet_0 : y;
t2 = y * x;
t3 = y == t2;
t4 = max(t3, 0x4);
I = ~nondet_0;
Program 1:
t1 = ~nondet_0;
t2 = -x;
t3 = -y;
I = t2 <= x;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = 0x1 ^ nondet_0;
Program 1:
t1 = ((sword_t) nondet_1) >> ((sword_t) nondet_1);
t2 = t1 <= nondet_0;
t3 = y ? nondet_1 : t1;
I = ((sword_t) y) >> ((sword_t) t3);

Fastest checker: explicit
Fails for (0, 1, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xa + nondet_1;
t2 = b ^ b;
t3 = x <= t2;
I = nondet_1 <= nondet_1;
Program 1:
t1 = b + x;
t2 = a + y;
t3 = y << a;
t4 = t3 | nondet_1;
I = t1 >> b;

Fastest checker: explicit
Fails for (3, 1, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y ^ x;
t2 = 0x6 ? x : b;
t3 = 0x6 + 0x6;
t4 = a <= b;
I = t2 + 0x6;
Program 1:
t1 = b != x;
t2 = y << nondet_0;
t3 = -nondet_0;
t4 = x ^ 0xa;
I = a ^ a;

Fastest checker: explicit
Fails for (0, 0, 10, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 != y;
t2 = ((sword_t) 0x7) >> ((sword_t) nondet_0);
I = ~a;
Program 1:
t1 = x == y;
I = nondet_1 & 0x2;

Fastest checker: explicit
Fails for (0, 0, 15, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 < nondet_1;
t2 = max(b, nondet_0);
t3 = !nondet_0 || x;
I = !t1 || 0x2;
Program 1:
I = -y;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xd + b;
Program 1:
t1 = ((sword_t) x) <= ((sword_t) nondet_1);
I = x << y;

Fastest checker: explicit
Fails for (0, 0, 0, 3, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = b + nondet_0;
t2 = ((sword_t) nondet_0) >> ((sword_t) t1);
t3 = t1 * nondet_0;
I = ((sword_t) x) <= ((sword_t) a);
Program 1:
t1 = x >> 0xb;
I = y / x;

Fastest checker: explicit
Fails for (0, 1, 1, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = b & 0x4;
t2 = t1 - t1;
t3 = ((sword_t) 0x4) <= ((sword_t) a);
t4 = min(t1, nondet_1);
I = !t4 || t3;
Program 1:
I = min(x, y);

Fastest checker: explicit
Fails for (1, 0, 0, 4, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
t2 = t1 + 0xf;
t3 = b == y;
I = ((sword_t) x) <= ((sword_t) x);
Program 1:
t1 = b ? nondet_0 : 0x2;
t2 = nondet_0 | x;
t3 = nondet_0 ? t1 : y;
I = x ^ b;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 <= 0x2;
t2 = min(0x2, a);
t3 = ((sword_t) t2) >> ((sword_t) y);
I = x <= a;
Program 1:
t1 = !a || 0x8;
t2 = y | 0x8;
t3 = t1 | b;
I = x <= x;

Fastest checker: explicit
Fails for (1, 1, 1, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 - nondet_1;
I = a <= a;
Program 1:
t1 = y + nondet_0;
t2 = x + x;
t3 = nondet_0 < nondet_0;
I = nondet_0 + t2;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -y;
t2 = max(nondet_0, t1);
I = ((sword_t) 0xe) >> ((sword_t) x);
Program 1:
t1 = -nondet_1;
t2 = y & t1;
t3 = !nondet_0 || x;
I = ((sword_t) y) >> ((sword_t) nondet_1);

Fastest checker: explicit
Fails for (2, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 <= 0x5;
t2 = nondet_1 ^ nondet_0;
t3 = nondet_1 >> t2;
t4 = nondet_0 | t1;
I = 0x5 * t4;
Program 1:
t1 = y + nondet_1;
t2 = y >> nondet_1;
t3 = ((sword_t) y) <= ((sword_t) x);
t4 = -a;
I = a <= t1;

Fastest checker: explicit
Fails for (15, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~x;
t2 = 0x8 == b;
t3 = min(y, t2);
I = !y || t1;
Program 1:
t1 = x & y;
t2 = 0xa << a;
t3 = max(y, 0xa);
I = -y;

Fastest checker: explicit
Fails for (0, 0, 15, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = ((sword_t) 0xc) >> ((sword_t) y);
Program 1:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = y + 0x0;
t3 = b | x;
t4 = b + nondet_1;
I = x * nondet_1;

Fastest checker: explicit
Fails for (8, 1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) >> ((sword_t) y);
t2 = b * 0xc;
I = t1 + nondet_1;
Program 1:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = y + x;
I = -y;

Fastest checker: explicit
Fails for (4, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = ((sword_t) 0xc) >> ((sword_t) y);
Program 1:
t1 = ((sword_t) y) <= ((sword_t) nondet_0);
t2 = y << x;
I = min(t2, x);

Fastest checker: explicit
Fails for (1, 1, 0, 0, 4, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0x9) >> ((sword_t) y);
t2 = b * 0x9;
I = x + 0x9;
Program 1:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = x + y;
I = -y;

Fastest checker: explicit
Fails for (0, 0, 7, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) >> ((sword_t) y);
t2 = b * 0xc;
I = t2 + t1;
Program 1:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = y + a;
t3 = x | y;
I = min(x, t3);

Fastest checker: explicit
Fails for (0, 0, 15, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) >> ((sword_t) y);
t2 = b * 0xc;
t3 = a + b;
I = t1 + 0xc;
Program 1:
t1 = b != x;
t2 = y << nondet_0;
t3 = -nondet_0;
t4 = x ^ 0x0;
I = a ^ a;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = x + nondet_0;
t3 = min(x, x);
t4 = b + a;
I = nondet_0 + 0xc;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 + nondet_0;
t5 = x + y;
I = 0x2 + x;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) nondet_1);
t2 = x & y;
t3 = nondet_0 < nondet_1;
t4 = nondet_1 - b;
I = ((sword_t) 0xc) >> ((sword_t) 0xc);
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 - x;
t5 = y + 0x2;
t6 = x + x;
t7 = a + b;
I = b + a;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 8
[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = nondet_1 / a;
I = y + t2;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 - x;
I = !nondet_0 || nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >> nondet_1;
t2 = ((sword_t) 0x4) < ((sword_t) t1);
t3 = nondet_1 << a;
I = 0x4 | nondet_1;
Program 1:
t1 = a <= x;
t2 = nondet_0 + nondet_1;
t3 = min(y, t1);
t4 = min(b, b);
I = t1 < 0x5;

Fastest checker: cbmc
Fails for (1, 1, 79, 16, 96, 1)

[]
Fastest checker: genetic
Program 0:
t1 = !a || nondet_1;
I = ~0x8;
Program 1:
t1 = -a;
t2 = max(a, x);
t3 = b * 0xd;
I = b ^ t3;

Fastest checker: cbmc
Fails for (1, 1, 194, 0, 64, 84)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 == 0x7;
I = a == x;
Program 1:
t1 = nondet_1 & nondet_1;
t2 = 0x5 / nondet_1;
I = ((sword_t) x) < ((sword_t) nondet_1);

Fastest checker: cbmc
Fails for (0, 1, 1, 0, 1, 64)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) nondet_1) < ((sword_t) nondet_1);
I = !b || x;
Program 1:
I = x & x;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = a & 0x4;
t2 = y | a;
t3 = b - b;
t4 = 0x4 < t2;
I = !nondet_1 || x;
Program 1:
t1 = nondet_0 == y;
I = x | b;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x | x;
t2 = nondet_1 << nondet_0;
I = 0x6 - nondet_0;
Program 1:
t1 = nondet_1 != a;
I = x | y;

Fastest checker: explicit
Fails for (0, 6, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = b >> nondet_0;
t2 = b ^ t1;
I = 0x3 | b;
Program 1:
t1 = nondet_0 << x;
I = x & x;

Fastest checker: cbmc
Fails for (0, 129, 0, 0, 16, 68)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 < 0x4;
I = ~y;
Program 1:
t1 = y % 0xb;
t2 = nondet_0 & x;
I = nondet_1 | x;

Fastest checker: cbmc
Fails for (177, 1, 78, 255, 1, 0)

[]
Fastest checker: genetic
Program 0:
I = b == y;
Program 1:


Fastest checker: cbmc
Fails for (1, 1, 0, 81, 44, 81)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
I = 0xc + y;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = a + b;
t5 = y + x;
I = y + t5;

Fastest checker: cbmc
Fails for (150, 1, 12, 113, 99, 92)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
I = 0xc + y;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 + x;
t5 = !nondet_0 || nondet_1;
t6 = nondet_1 + b;
I = y + b;

Fastest checker: cbmc
Fails for (13, 65, 0, 222, 1, 34)

[]
Fastest checker: genetic
Program 0:
t1 = y << 0x9;
t2 = !t1 || nondet_0;
t3 = b - a;
I = y + 0x9;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = nondet_1 + y;
I = t3 + nondet_0;

Fastest checker: cbmc
Fails for (10, 1, 0, 247, 129, 16)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = x + nondet_0;
t3 = min(x, x);
t4 = b + a;
I = nondet_0 + 0xc;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 + nondet_0;
t5 = x + y;
I = 0x2 + x;

Fastest checker: explicit
Fails for (0, 244, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = x <= a;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
I = 0x2 != b;

Fastest checker: cbmc
Fails for (0, 0, 127, 0, 47, 64)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
t2 = a + a;
I = 0xc + 0xc;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = 0x2 - x;
t5 = !nondet_0 || nondet_1;
t6 = t5 + x;
I = nondet_1 + y;

Fastest checker: cbmc
Fails for (45, 1, 36, 2, 48, 30)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
I = 0xc + y;
Program 1:
t1 = 0x0 + a;
t2 = y + a;
I = a + x;

Fastest checker: cbmc
Fails for (0, 1, 2, 244, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) b) <= ((sword_t) nondet_0);
I = x + 0xc;
Program 1:
t1 = y << nondet_0;
t2 = -nondet_0;
t3 = x ^ 0x2;
I = a ^ a;

Fastest checker: explicit
Fails for (0, 0, 244, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 <= nondet_1;
I = ((sword_t) y) <= ((sword_t) b);
Program 1:
t1 = 0x2 + a;
I = x * 0x2;

Fastest checker: cbmc
Fails for (16, 1, 231, 5, 85, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y - b;
t2 = ~0xc;
I = ~0xc;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = x + y;
t5 = x + x;
t6 = a + a;
t7 = max(t5, b);
I = t7 | nondet_0;

Fastest checker: cbmc
Correct for wordlen=8
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 48.39s

Program 0:
t1 = y - b;
t2 = ~0xc;
I = ~0xc;
Program 1:
t1 = 0x2 + a;
t2 = x * 0x2;
t3 = 0x2 != b;
t4 = x + y;
t5 = x + x;
t6 = a + a;
t7 = max(t5, b);
I = t7 | nondet_0;


Perf counters:
{'genetic': 56, 'cbmc': 16, 'explicit': 51, 'iterations': 56}
Perf timers:
gcc: 2.17s
verify: 41.13s
checker: 46.59s
generalize: 0.04s
synth: 5.74s
_: 48.39s
