Using seed: 1337
[]
Fastest checker: genetic
Evars: 4, 6
Program 0:
t1 = ~x;
t2 = nondet_0 < t1;
I = x / 0x6;

Fastest checker: explicit
Fails for (1, 6)

[]
Fastest checker: genetic
Evars: 6, 3
Program 0:
I = nondet_0 & 0x4;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: explicit
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 6
[]
Fastest checker: genetic
Evars: 0, 6
Program 0:
t1 = nondet_0 s<= nondet_0;
t2 = t1 <= 0x6;
I = t1 * t2;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Evars: 3, 5
Program 0:
I = 0x1 % nondet_0;

Fastest checker: explicit
Fails for (0, 2)

[]
Fastest checker: genetic
Evars: 6, 5
Program 0:
I = nondet_0 - 0x1;

Fastest checker: explicit
Fails for (2, 2)

[]
Fastest checker: genetic
Evars: 4, 5
Program 0:
I = nondet_0 < x;

Fastest checker: explicit
Fails for (2, 3)

[]
Fastest checker: genetic
Evars: 1, 3
Program 0:
t1 = x >>> nondet_0;
t2 = min(x, nondet_0);
I = t1 == t2;

Fastest checker: explicit
Fails for (6, 3)

[]
Fastest checker: genetic
Evars: 6, 3
Program 0:
I = nondet_0 & 0x4;

Fastest checker: explicit
Fails for (4, 4)

[]
Fastest checker: genetic
Evars: 6, 2
Program 0:
I = 0x1 >>> nondet_0;

Fastest checker: explicit
Fails for (6, 6)

[]
Fastest checker: genetic
Evars: 5, 1
Program 0:
t1 = x s< nondet_0;
I = x & t1;

Fastest checker: explicit
Fails for (9, 7)

[]
Fastest checker: genetic
Evars: 7, 3
Program 0:
t1 = 0x6 s< nondet_0;
I = min(t1, x);

Fastest checker: explicit
Fails for (8, 8)

[]
Fastest checker: genetic
Evars: 51, 52
Program 0:
I = 0x27 <= nondet_0;

Fastest checker: explicit
Correct for wordlen=6
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc







Timeout
Perf counters:
{'genetic': 12, 'cbmc': 30, 'explicit': 55, 'timeout': 1, 'iterations': 12}
Perf timers:
gcc: 1.08s
verify: 59.27s
checker: 59.89s
generalize: 56.76s
synth: 0.71s
_: 60.00s
