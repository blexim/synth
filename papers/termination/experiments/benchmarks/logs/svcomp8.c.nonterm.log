Using seed: 1337
[]
Fastest checker: genetic
Evars: 1, 6, 12
Program 0:
t1 = 0x1 / x;
t2 = x s< y;
t3 = x ? t1 : y;
I = t2 * t3;

Fastest checker: explicit
Fails for (1, 2, 13)

[]
Fastest checker: genetic
Evars: 2, 0, 13
Program 0:
t1 = -x;
t2 = t1 ? 0x7 : t1;
t3 = t1 < x;
I = y ==> t3;

Fastest checker: explicit
Fails for (1, 0, 14)

[]
Fastest checker: genetic
Evars: 5, 12, 11
Program 0:
t1 = 0x7 ? 0x7 : y;
t2 = x ? z : y;
t3 = -t1;
t4 = t2 s< t1;
I = 0x7 - x;

Fastest checker: explicit
Fails for (6, 1, 14)

[]
Fastest checker: genetic
Evars: 3, 2, 8
Program 0:
I = z s<= 0x8;

Fastest checker: explicit
Fails for (1, 0, 8)

[]
Fastest checker: genetic
Evars: 1, 9, 1
Program 0:
t1 = z == x;
t2 = t1 s< 0x1;
I = t2 ^ 0x1;

Fastest checker: explicit
Fails for (1, 0, 1)

[]
Fastest checker: genetic
Evars: 1, 8, 0
Program 0:
t1 = x ==> x;
t2 = y ==> z;
I = t2 s<= 0x0;

Fastest checker: explicit
Fails for (1, 1, 0)

[]
Fastest checker: genetic
Evars: 2, 15, 5
Program 0:
t1 = y ^ x;
t2 = 0x7 + 0x7;
t3 = x << x;
I = t1 s<= t2;

Fastest checker: explicit
Fails for (1, 8, 0)

[]
Fastest checker: genetic
Evars: 3, 3, 4
Program 0:
t1 = z * z;
t2 = 0x1 % 0x1;
t3 = x & z;
I = t3 s< z;

Fastest checker: explicit
Fails for (2, 0, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 11
Program 0:
t1 = x ==> x;
t2 = ~z;
I = t1 >> t2;

Fastest checker: explicit
Fails for (1, 0, 3)

[]
Fastest checker: genetic
Evars: 3, 11, 15
Program 0:
t1 = x >> z;
t2 = z - z;
t3 = t2 s< x;
I = z == 0xf;

Fastest checker: explicit
Fails for (1, 0, 15)

[]
Fastest checker: genetic
Evars: 5, 13, 5
Program 0:
t1 = y >>> y;
t2 = y != z;
I = y < t1;

Fastest checker: explicit
Fails for (1, 9, 15)

[]
Fastest checker: genetic
Evars: 1, 7, 9
Program 0:
t1 = z s<= 0x8;
t2 = -z;
t3 = y == t2;
t4 = min(t2, 0x8);
I = x ==> t3;

Fastest checker: explicit
Fails for (1, 0, 0)

[]
Fastest checker: genetic
Evars: 4, 7, 5
Program 0:
t1 = x s<= z;
t2 = 0x7 + 0x7;
I = t1 % x;

Fastest checker: explicit
Fails for (2, 0, 2)

[]
Fastest checker: genetic
Evars: 6, 15, 11
Program 0:
t1 = 0xf s< z;
t2 = t1 ==> x;
t3 = 0xf == y;
I = t2 & t3;

Fastest checker: explicit
Fails for (1, 15, 2)

[]
Fastest checker: genetic
Evars: 6, 10, 7
Program 0:
t1 = y << y;
t2 = 0x7 s<= t1;
I = 0x7 == z;

Fastest checker: explicit
Fails for (1, 0, 7)

[]
Fastest checker: genetic
Evars: 4, 0, 13
Program 0:
t1 = x ==> x;
I = t1 >>> x;

Fastest checker: explicit
Fails for (4, 1, 7)

[]
Fastest checker: genetic
Evars: 7, 14, 7
Program 0:
t1 = z s<= x;
t2 = min(z, y);
I = 0x7 == t2;

Fastest checker: explicit
Fails for (1, 7, 7)

[]
Fastest checker: genetic
Evars: 3, 13, 4
Program 0:
t1 = y <= x;
t2 = x * x;
t3 = x | 0x1;
I = x < t2;

Fastest checker: explicit
Fails for (2, 7, 7)

[]
Fastest checker: genetic
Evars: 4, 9, 14
Program 0:
t1 = z s<= x;
t2 = 0xf ^ z;
I = t1 >>> x;

Fastest checker: explicit
Fails for (4, 0, 8)

[]
Fastest checker: genetic
Evars: 4, 7, 11
Program 0:
t1 = y ^ z;
t2 = y & 0x1;
t3 = x <= y;
t4 = 0x1 ^ z;
I = t3 >>> x;

Fastest checker: explicit
Fails for (4, 4, 8)

[]
Fastest checker: genetic
Evars: 5, 13, 15
Program 0:
t1 = x >>> x;
t2 = 0x1 + 0x1;
t3 = 0x1 + 0x1;
I = t1 & t2;

Fastest checker: explicit
Fails for (5, 4, 8)

[]
Fastest checker: genetic
Evars: 4, 1, 15
Program 0:
t1 = x <= y;
t2 = y - z;
t3 = z * y;
t4 = t1 | t1;
I = t3 == 0xf;

Fastest checker: explicit
Fails for (1, 7, 9)

[]
Fastest checker: genetic
Evars: 4, 15, 13
Program 0:
t1 = z < y;
I = t1 & z;

Fastest checker: explicit
Fails for (1, 10, 9)

[]
Fastest checker: genetic
Evars: 4, 11, 7
Program 0:
t1 = z < y;
t2 = y * z;
I = t1 >>> x;

Fastest checker: explicit
Fails for (4, 10, 9)

[]
Fastest checker: genetic
Evars: 4, 14, 3
Program 0:
t1 = x >>> z;
t2 = 0xf + 0xf;
t3 = x >>> x;
t4 = x >>> x;
I = z < t3;

Fastest checker: explicit
Fails for (4, 0, 0)

[]
Fastest checker: genetic
Evars: 4, 14, 13
Program 0:
t1 = 0x1 >>> x;
t2 = ~0x1;
I = t2 == y;

Fastest checker: explicit
Fails for (1, 14, 0)

[]
Fastest checker: genetic
Evars: 4, 14, 13
Program 0:
t1 = x >>> x;
t2 = z & y;
t3 = x >>> x;
t4 = t3 >>> x;
I = t1 & t2;

Fastest checker: explicit
Fails for (6, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 13, 4
Program 0:
t1 = 0x1 << x;
t2 = x == z;
I = t2 >>> x;

Fastest checker: explicit
Fails for (4, 0, 4)

[]
Fastest checker: genetic
Evars: 4, 6, 4
Program 0:
t1 = 0x1 >>> x;
t2 = 0x1 >> x;
t3 = 0x1 >>> x;
t4 = x == z;
I = min(y, t4);

Fastest checker: explicit
Fails for (4, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 13, 2
Program 0:
t1 = 0x1 >>> x;
t2 = 0x1 + 0x1;
t3 = ~y;
t4 = max(0x1, y);
I = z == t3;

Fastest checker: explicit
Fails for (1, 11, 4)

[]
Fastest checker: genetic
Evars: 4, 5, 9
Program 0:
t1 = x s< y;
t2 = 0x1 == t1;
I = t1 >> x;

Fastest checker: explicit
Fails for (4, 5, 5)

[]
Fastest checker: genetic
Evars: 4, 11, 14
Program 0:
t1 = 0x1 + y;
t2 = 0x1 >>> x;
t3 = 0x1 >>> x;
I = t2 >>> t1;

Fastest checker: explicit
Fails for (4, 7, 5)

[]
Fastest checker: genetic
Evars: 4, 0, 11
Program 0:
t1 = z >> z;
t2 = max(x, 0x1);
t3 = 0x1 >>> x;
I = t1 & t3;

Fastest checker: explicit
Fails for (4, 0, 6)

[]
Fastest checker: genetic
Evars: 4, 12, 1
Program 0:
t1 = 0x1 >>> x;
t2 = z / x;
t3 = 0x1 >>> x;
t4 = z ^ t3;
I = t4 < t1;

Fastest checker: explicit
Fails for (4, 0, 1)

[]
Fastest checker: genetic
Evars: 4, 14, 1
Program 0:
t1 = 0x1 <= y;
t2 = 0x1 >> x;
t3 = z <= t2;
t4 = t3 >>> x;
I = t4 * y;

Fastest checker: explicit
Fails for (4, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 7, 15
Program 0:
t1 = max(0x1, z);
t2 = 0x1 >> x;
t3 = 0x1 >>> x;
t4 = ~z;
I = t4 < t2;

Fastest checker: explicit
Fails for (4, 0, 15)

[]







Timeout
Perf counters:
{'genetic': 36, 'explicit': 36, 'timeout': 1, 'iterations': 37}
Perf timers:
verify: 0.32s
checker: 179.95s
gcc: 0.36s
_: 180.00s
synth: 179.67s
