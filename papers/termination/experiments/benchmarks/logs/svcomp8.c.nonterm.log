Using seed: 1337
[]
Fastest checker: genetic
Evars: 2, 15, 4
Program 0:
t1 = x s< z;
t2 = z * x;
I = t1 % x;

Fastest checker: explicit
Fails for (2, 0, 3)

[]
Fastest checker: genetic
Evars: 5, 15, 2
Program 0:
t1 = 0x0 << z;
t2 = -y;
I = t1 s< t2;

Fastest checker: explicit
Fails for (1, 9, 3)

[]
Fastest checker: genetic
Evars: 3, 13, 8
Program 0:
t1 = 0xa s< y;
I = 0xa <= y;

Fastest checker: explicit
Fails for (1, 10, 3)

[]
Fastest checker: genetic
Evars: 4, 2, 6
Program 0:
I = 0x7 % x;

Fastest checker: explicit
Fails for (2, 10, 3)

[]
Fastest checker: genetic
Evars: 4, 7, 5
Program 0:
I = x >>> x;

Fastest checker: explicit
Fails for (4, 10, 3)

[]
Fastest checker: genetic
Evars: 6, 3, 1
Program 0:
t1 = x >>> y;
I = z <= 0x1;

Fastest checker: explicit
Fails for (1, 0, 0)

[]
Fastest checker: genetic
Evars: 1, 4, 9
Program 0:
t1 = z s<= y;
t2 = 0x5 * t1;
I = x < t2;

Fastest checker: explicit
Fails for (4, 1, 0)

[]
Fastest checker: genetic
Evars: 4, 7, 0
Program 0:
I = 0x5 s< y;

Fastest checker: explicit
Fails for (1, 6, 0)

[]
Fastest checker: genetic
Evars: 4, 0, 4
Program 0:
I = y < 0x5;

Fastest checker: explicit
Fails for (7, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 15, 2
Program 0:
t1 = z >> x;
t2 = y != x;
I = y / 0xc;

Fastest checker: explicit
Fails for (1, 12, 1)

[]
Fastest checker: genetic
Evars: 1, 11, 7
Program 0:
t1 = x <= z;
I = 0x3 s< z;

Fastest checker: explicit
Fails for (1, 0, 4)

[]
Fastest checker: genetic
Evars: 4, 12, 6
Program 0:
t1 = y / x;
t2 = 0x4 s< z;
t3 = x + 0x4;
I = t2 ? t2 : t2;

Fastest checker: explicit
Fails for (1, 0, 5)

[]
Fastest checker: genetic
Evars: 3, 15, 2
Program 0:
t1 = z * z;
I = x s< t1;

Fastest checker: explicit
Fails for (1, 0, 6)

[]
Fastest checker: genetic
Evars: 5, 12, 15
Program 0:
t1 = max(x, y);
t2 = t1 s< 0xf;
I = z / 0xf;

Fastest checker: explicit
Fails for (1, 0, 15)

[]
Fastest checker: genetic
Evars: 7, 15, 2
Program 0:
t1 = -z;
I = 0xe < y;

Fastest checker: explicit
Fails for (1, 15, 15)

[]
Fastest checker: genetic
Evars: 6, 6, 13
Program 0:
t1 = x == y;
I = -t1;

Fastest checker: explicit
Fails for (1, 1, 0)

[]
Fastest checker: genetic
Evars: 2, 11, 9
Program 0:
t1 = y <= x;
I = z s<= 0xa;

Fastest checker: explicit
Fails for (1, 0, 8)

[]
Fastest checker: genetic
Evars: 6, 7, 3
Program 0:
t1 = 0xe - x;
t2 = x >>> x;
I = t2 & y;

Fastest checker: explicit
Fails for (6, 1, 8)

[]
Fastest checker: genetic
Evars: 5, 13, 8
Program 0:
t1 = 0xd <= y;
I = t1 >> z;

Fastest checker: explicit
Fails for (1, 13, 8)

[]
Fastest checker: genetic
Evars: 1, 14, 7
Program 0:
t1 = y <= z;
t2 = 0x7 == z;
I = 0x7 ? t2 : t1;

Fastest checker: explicit
Fails for (1, 0, 7)

[]
Fastest checker: genetic
Evars: 3, 14, 10
Program 0:
t1 = y <= z;
t2 = 0xa == z;
I = 0xa ? t2 : t1;

Fastest checker: explicit
Fails for (1, 0, 10)

[]
Fastest checker: genetic
Evars: 3, 14, 10
Program 0:
t1 = 0xe == y;
t2 = 0xe * y;
t3 = t1 << z;
I = t3 & y;

Fastest checker: explicit
Fails for (1, 14, 10)

[]
Fastest checker: genetic
Evars: 2, 6, 13
Program 0:
t1 = y >>> y;
t2 = z * t1;
t3 = x s< y;
I = t3 & z;

Fastest checker: explicit
Fails for (1, 2, 11)

[]
Fastest checker: genetic
Evars: 7, 7, 14
Program 0:
t1 = 0x7 s<= 0x7;
t2 = t1 | 0x7;
I = 0x7 == y;

Fastest checker: explicit
Fails for (1, 7, 11)

[]
Fastest checker: genetic
Evars: 3, 5, 5
Program 0:
t1 = y >>> x;
t2 = max(z, t1);
I = 0x3 == x;

Fastest checker: explicit
Fails for (3, 7, 11)

[]
Fastest checker: genetic
Evars: 5, 8, 15
Program 0:
t1 = x s<= x;
I = x == 0x5;

Fastest checker: explicit
Fails for (5, 7, 11)

[]
Fastest checker: genetic
Evars: 1, 14, 4
Program 0:
t1 = 0xe <= y;
I = t1 >> z;

Fastest checker: explicit
Fails for (1, 14, 12)

[]
Fastest checker: genetic
Evars: 7, 7, 5
Program 0:
t1 = z != x;
t2 = y == x;
I = t2 & z;

Fastest checker: explicit
Fails for (1, 1, 13)

[]
Fastest checker: genetic
Evars: 3, 15, 2
Program 0:
t1 = z * z;
t2 = z ? y : x;
t3 = -x;
I = t3 < y;

Fastest checker: explicit
Fails for (7, 10, 13)

[]
Fastest checker: genetic
Evars: 6, 14, 14
Program 0:
t1 = -0x2;
I = t1 == z;

Fastest checker: explicit
Fails for (1, 0, 14)

[]
Fastest checker: genetic
Evars: 2, 10, 9
Program 0:
t1 = x << x;
t2 = 0xe == t1;
t3 = z << z;
I = t3 == x;

Fastest checker: explicit
Fails for (2, 0, 1)

[]
Fastest checker: genetic
Evars: 3, 11, 11
Program 0:
t1 = x * 0xb;
t2 = y | y;
I = t2 == 0xb;

Fastest checker: explicit
Fails for (1, 11, 1)

[]
Fastest checker: genetic
Evars: 4, 4, 8
Program 0:
t1 = max(y, y);
I = 0x4 == t1;

Fastest checker: explicit
Fails for (1, 4, 2)

[]
Fastest checker: genetic
Evars: 3, 2, 9
Program 0:
t1 = 0x9 << x;
I = 0x9 == z;

Fastest checker: explicit
Fails for (1, 0, 9)

[]
Fastest checker: genetic
Evars: 7, 0, 15
Program 0:
t1 = ~z;
I = t1 == y;

Fastest checker: explicit
Fails for (2, 6, 9)

[]
Fastest checker: genetic
Evars: 4, 8, 12
Program 0:
t1 = z >> 0xb;
t2 = t1 ^ 0xb;
I = t1 >> x;

Fastest checker: explicit
Fails for (4, 6, 9)

[]
Fastest checker: genetic
Evars: 4, 5, 0
Program 0:
t1 = 0x9 >>> z;
t2 = 0x9 - x;
I = t2 == y;

Fastest checker: explicit
Fails for (2, 7, 9)

[]
Fastest checker: genetic
Evars: 2, 3, 8
Program 0:
I = y == 0x3;

Fastest checker: explicit
Fails for (1, 3, 10)

[]
Fastest checker: genetic
Evars: 4, 2, 3
Program 0:
t1 = 0x6 - x;
I = t1 == y;

Fastest checker: explicit
Fails for (3, 3, 10)

[]
Fastest checker: genetic
Evars: 4, 3, 1
Program 0:
t1 = 0x7 == z;
t2 = x >> x;
I = y < t2;

Fastest checker: explicit
Fails for (4, 3, 10)

[]
Fastest checker: genetic
Evars: 5, 1, 6
Program 0:
t1 = x << y;
t2 = min(t1, z);
I = 0xa == t1;

Fastest checker: explicit
Fails for (5, 5, 10)

[]
Fastest checker: genetic
Evars: 5, 1, 13
Program 0:
t1 = x << z;
t2 = min(t1, z);
I = 0xa == t1;

Fastest checker: explicit
Fails for (5, 0, 13)

[]
Fastest checker: genetic
Evars: 2, 7, 7
Program 0:
t1 = y << x;
t2 = 0x7 s<= z;
I = t2 ? t1 : t2;

Fastest checker: explicit
Fails for (1, 1, 7)

[]
Fastest checker: genetic
Evars: 7, 4, 1
Program 0:
t1 = 0x5 s< x;
t2 = min(x, y);
I = t1 >> t2;

Fastest checker: explicit
Fails for (6, 4, 7)

[]
Fastest checker: genetic
Evars: 7, 4, 1
Program 0:
t1 = 0x6 s< x;
t2 = min(x, y);
I = t1 >> t2;

Fastest checker: explicit
Fails for (7, 4, 7)

[]
Fastest checker: genetic
Evars: 4, 12, 5
Program 0:
t1 = x <= 0xb;
t2 = x == x;
t3 = -0xb;
t4 = 0xb ==> y;
t5 = t3 == z;
I = t5 * y;

Fastest checker: explicit
Fails for (1, 1, 5)

[]







Timeout
Perf counters:
{'genetic': 46, 'explicit': 46, 'timeout': 1, 'iterations': 47}
Perf timers:
verify: 0.37s
checker: 44.91s
gcc: 0.45s
_: 45.00s
synth: 44.61s
