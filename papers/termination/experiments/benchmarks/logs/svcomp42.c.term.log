Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x0 >>> y;
t2 = nondet_0 * 0x0;
res1 = min(x, nondet_2);
Program 1:
res1 = nondet_0 s<= nondet_2;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 + x;
res1 = nondet_1 - t1;
Program 1:
t1 = y == nondet_1;
t2 = max(nondet_3, nondet_1);
res1 = 0x7 - nondet_3;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf & y;
Program 1:
t1 = max(0x7, nondet_0);
t2 = nondet_1 s< t1;
t3 = nondet_0 ==> nondet_2;
t4 = nondet_2 s<= y;
res1 = 0x7 - nondet_3;

Fastest checker: cbmc
Fails for (7, 15, 14, 5, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 % x;
t2 = x s< x;
t3 = nondet_2 <= 0x0;
t4 = nondet_0 ? nondet_2 : x;
res1 = nondet_0 * nondet_0;
Program 1:
t1 = nondet_2 | nondet_2;
res1 = nondet_1 << y;

Fastest checker: explicit
Fails for (0, 0, 0, 8, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_3;
t2 = x s< nondet_1;
t3 = nondet_1 >> y;
res1 = nondet_0 >> y;
Program 1:
t1 = x ? 0x8 : nondet_0;
t2 = 0x8 != nondet_1;
res1 = t2 + t2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 >> x;
t2 = 0x0 >>> nondet_0;
t3 = nondet_3 * 0x0;
t4 = nondet_1 != x;
res1 = -t4;
Program 1:
res1 = max(x, nondet_2);

Fastest checker: explicit
Fails for (0, 0, 2, 0, 2, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y ^ 0x1;
t2 = nondet_3 | 0x1;
t3 = t1 & nondet_1;
t4 = nondet_2 < nondet_0;
res1 = nondet_1 s<= nondet_1;
Program 1:
t1 = y % nondet_2;
t2 = y - 0x1;
res1 = 0x1 ? t1 : nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y | nondet_1;
t2 = nondet_0 >>> nondet_2;
t3 = nondet_2 != t2;
res1 = max(x, y);
Program 1:
t1 = nondet_2 >>> y;
t2 = 0x7 ^ t1;
t3 = y << nondet_0;
t4 = ~nondet_0;
res1 = t1 < t2;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_3 ==> x;
Program 1:
res1 = nondet_3 ? x : y;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = min(y, x);
t2 = min(nondet_0, nondet_3);
t3 = 0x7 - t1;
t4 = y & t3;
res1 = max(y, t3);
Program 1:
t1 = nondet_3 >> x;
t2 = x != nondet_0;
t3 = max(t2, nondet_1);
t4 = ~nondet_0;
res1 = y == t3;

Fastest checker: explicit
Fails for (0, 0, 2, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
res1 = ~nondet_3;
Program 1:
t1 = nondet_1 ^ y;
res1 = y << x;

Fastest checker: explicit
Fails for (15, 0, 2, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 + nondet_3;
t2 = nondet_0 ^ nondet_0;
t3 = x <= t2;
res1 = nondet_3 <= nondet_3;
Program 1:
t1 = nondet_0 + x;
t2 = nondet_1 + y;
t3 = y << nondet_1;
t4 = t3 | nondet_3;
res1 = t1 >> nondet_0;

Fastest checker: explicit
Fails for (3, 1, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 ? y : nondet_3;
t2 = y == 0x0;
t3 = t2 ? nondet_1 : nondet_1;
res1 = ~y;
Program 1:
t1 = nondet_0 ? nondet_2 : x;
t2 = y - nondet_0;
t3 = nondet_0 s<= nondet_0;
t4 = x | t3;
res1 = t2 ==> t3;

Fastest checker: explicit
Fails for (15, 1, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf + nondet_0;
Program 1:
t1 = x s<= nondet_3;
res1 = x << y;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = y s<= y;
Program 1:
t1 = nondet_3 != y;
t2 = max(x, t1);
t3 = nondet_0 | nondet_3;
res1 = min(nondet_1, y);

Fastest checker: explicit
Fails for (2, 1, 2, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_2;
t2 = t1 + 0x1;
t3 = nondet_0 == y;
res1 = x s<= x;
Program 1:
t1 = nondet_0 ? nondet_2 : 0x1;
t2 = nondet_2 | x;
t3 = nondet_2 ? t1 : y;
res1 = x ^ nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 * y;
t2 = ~y;
t3 = nondet_1 ==> y;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = -x;
res1 = -y;

Fastest checker: explicit
Fails for (1, 1, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = max(y, 0x8);
Program 1:
t1 = 0x8 >>> y;
t2 = nondet_2 + t1;
t3 = x % t1;
res1 = x < t3;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 8, 1)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_0, x);
res1 = 0x1 + 0x1;
Program 1:
t1 = y - nondet_3;
t2 = x << x;
res1 = 0x7 + 0x7;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x <= nondet_1;
t2 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = -x;
t2 = y / 0xf;
t3 = min(nondet_3, nondet_3);
res1 = nondet_2 ? x : y;

Fastest checker: explicit
Fails for (0, 1, 9, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 << 0x7;
t2 = -t1;
t3 = 0x7 + 0x7;
t4 = t1 < t1;
res1 = min(t2, 0x7);
Program 1:
t1 = y * y;
t2 = nondet_2 < t1;
t3 = x - nondet_0;
t4 = x << x;
res1 = 0x0 <= nondet_1;

Fastest checker: explicit
Fails for (0, 0, 10, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 != x;
t2 = 0xf + 0xf;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = y * x;
res1 = t1 << x;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 >>> nondet_1;
res1 = 0x1 + 0x1;
Program 1:
t1 = x - nondet_2;
t2 = y + x;
t3 = x >> x;
t4 = -y;
res1 = 0x8 + 0x8;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 11, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 + 0x1;
res1 = 0x1 + t1;
Program 1:
t1 = nondet_1 - x;
t2 = y ? 0x7 : nondet_0;
res1 = nondet_2 ? x : nondet_3;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 11, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_3;
t2 = nondet_2 ==> nondet_2;
t3 = y s< x;
t4 = ~nondet_1;
res1 = 0xf + 0xf;
Program 1:
t1 = nondet_3 - x;
t2 = 0xf - y;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = min(y, x);

Fastest checker: explicit
Fails for (11, 1, 0, 1, 11, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y - 0x7;
t2 = 0x7 + 0x7;
t3 = -nondet_3;
res1 = 0x7 + 0x7;
Program 1:
t1 = y - x;
res1 = min(y, x);

Fastest checker: cbmc
Fails for (5, 1, 0, 1, 7, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 * nondet_1;
t2 = nondet_0 >>> t1;
t3 = 0x7 + 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = y - x;
t2 = t1 != y;
res1 = -y;

Fastest checker: explicit
Fails for (1, 2, 0, 1, 7, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 + x;
t2 = nondet_2 + x;
t3 = 0xf + 0xf;
t4 = 0xf == nondet_3;
res1 = 0xf + 0xf;
Program 1:
t1 = nondet_0 + y;
t2 = -x;
res1 = min(t2, x);

Fastest checker: explicit
Fails for (0, 0, 0, 12, 7, 4)

[]
Fastest checker: genetic
Program 0:
t1 = x != nondet_2;
t2 = max(nondet_2, 0x7);
res1 = 0x7 + 0x7;
Program 1:
t1 = min(y, x);
t2 = ~nondet_3;
t3 = t2 ==> t2;
t4 = -x;
res1 = min(t4, x);

Fastest checker: explicit
Fails for (0, 0, 7, 0, 9, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 == nondet_0;
t2 = nondet_3 + nondet_1;
res1 = 0x7 + 0x7;
Program 1:
t1 = x * y;
t2 = nondet_3 ? x : y;
t3 = 0x7 - x;
t4 = -0x7;
res1 = min(0x7, t2);

Fastest checker: explicit
Fails for (1, 0, 8, 0, 9, 4)

[]







Timeout
Perf counters:
{'genetic': 30, 'cbmc': 2, 'explicit': 28, 'timeout': 1, 'iterations': 31}
Perf timers:
verify: 3.87s
checker: 179.92s
gcc: 0.36s
_: 180.00s
synth: 176.12s
