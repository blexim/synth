Using seed: 1337
[]
Fastest checker: genetic
Program 0:
res1 = 0x5 >>> y;
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
res1 = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 + x;
t2 = nondet_1 - t1;
res1 = x == x;
Program 1:
t1 = max(y, nondet_0);
res1 = y - 0x4;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x < x;
t2 = ~nondet_0;
res1 = nondet_1 | t2;
Program 1:
t1 = x * y;
res1 = t1 & 0x1;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = y | x;
Program 1:
t1 = y ^ 0x0;
res1 = t1 ==> x;

Fastest checker: explicit
Fails for (0, 1, 0, 7, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >>> nondet_1;
res1 = ~0x5;
Program 1:
t1 = x != nondet_2;
t2 = x * y;
res1 = nondet_1 != nondet_2;

Fastest checker: explicit
Fails for (3, 1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 >>> nondet_1;
res1 = 0x5 + nondet_2;
Program 1:
t1 = 0x0 << 0x0;
t2 = y ? x : y;
res1 = max(nondet_0, 0x0);

Fastest checker: explicit
Fails for (0, 3, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = ~y;
Program 1:
t1 = y ? x : nondet_3;
res1 = nondet_2 >> 0x1;

Fastest checker: explicit
Fails for (7, 3, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = max(0x7, nondet_0);
Program 1:
t1 = nondet_3 s< y;
res1 = 0x0 + x;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = max(x, nondet_2);
Program 1:
t1 = nondet_2 s< y;
t2 = nondet_2 + nondet_0;
res1 = t2 + x;

Fastest checker: explicit
Fails for (0, 6, 1, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 != nondet_2;
t2 = nondet_2 s< 0x7;
t3 = nondet_2 s< t2;
res1 = max(y, 0x7);
Program 1:
t1 = nondet_3 s< y;
t2 = nondet_3 + y;
t3 = nondet_2 s< nondet_2;
t4 = t1 + x;
res1 = t3 s<= nondet_1;

Fastest checker: explicit
Fails for (7, 0, 2, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x4 >> y;
Program 1:
t1 = 0x1 * x;
t2 = y * y;
t3 = nondet_1 < nondet_3;
t4 = nondet_2 ^ nondet_1;
res1 = min(y, x);

Fastest checker: explicit
Fails for (2, 1, 2, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x4 | nondet_1;
Program 1:
t1 = 0x1 * x;
res1 = 0x1 <= y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 4, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 ? nondet_1 : nondet_2;
t2 = nondet_1 s< nondet_0;
res1 = 0x4 >>> nondet_2;
Program 1:
t1 = y % 0x3;
t2 = 0x3 + x;
t3 = x * nondet_1;
res1 = nondet_3 + 0x3;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(nondet_1, x);
res1 = nondet_0 ==> 0x1;
Program 1:
t1 = x ^ 0x1;
t2 = nondet_2 | nondet_2;
t3 = ~nondet_1;
t4 = min(x, y);
res1 = min(0x1, t2);

Fastest checker: explicit
Fails for (0, 0, 0, 1, 5, 1)

[]
Fastest checker: genetic
Program 0:
res1 = ~x;
Program 1:
t1 = max(nondet_0, nondet_3);
t2 = -x;
res1 = -y;

Fastest checker: explicit
Fails for (0, 0, 7, 0, 6, 1)

[]
Fastest checker: genetic
Program 0:
res1 = x ? x : nondet_2;
Program 1:
t1 = -x;
res1 = -y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y s< nondet_2;
res1 = x s<= x;
Program 1:
t1 = nondet_0 * x;
t2 = -x;
res1 = -y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 < 0x3;
res1 = 0x3 ^ nondet_1;
Program 1:
t1 = min(nondet_1, nondet_2);
t2 = -x;
t3 = -y;
t4 = x == x;
res1 = max(y, nondet_3);

Fastest checker: explicit
Fails for (2, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
res1 = ~0x5;
Program 1:
t1 = 0x7 >> nondet_2;
t2 = ~x;
t3 = y s<= nondet_3;
t4 = nondet_2 >> y;
t5 = max(0x7, nondet_0);
t6 = x + nondet_3;
t7 = nondet_0 ^ t6;
t8 = y * x;
res1 = min(x, t2);

Fastest checker: explicit
Fails for (0, 0, 3, 0, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 <= nondet_2;
t2 = ~t1;
t3 = ~nondet_0;
t4 = nondet_1 <= nondet_1;
res1 = min(0x6, t4);
Program 1:
t1 = ~x;
t2 = 0x2 * nondet_0;
t3 = nondet_2 ? x : y;
res1 = 0x2 ? t2 : t2;

Fastest checker: explicit
Fails for (0, 1, 4, 0, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 << nondet_0;
res1 = 0x1 * 0x1;
Program 1:
t1 = -x;
t2 = -y;
t3 = nondet_2 ? nondet_1 : y;
res1 = max(y, nondet_3);

Fastest checker: explicit
Fails for (2, 1, 4, 0, 4, 2)

[]
Fastest checker: genetic
Program 0:
res1 = -0x1;
Program 1:
t1 = x + y;
t2 = max(0x7, nondet_0);
t3 = y < nondet_2;
t4 = 0x7 * x;
t5 = min(0x7, nondet_2);
res1 = min(x, t4);

Fastest checker: explicit
Fails for (0, 2, 4, 0, 4, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 <= nondet_3;
t2 = x < nondet_0;
t3 = t1 ? 0x2 : nondet_3;
res1 = max(0x2, nondet_1);
Program 1:
t1 = nondet_1 + x;
t2 = nondet_1 | y;
t3 = max(0x5, nondet_0);
t4 = max(x, nondet_2);
t5 = ~x;
t6 = max(y, nondet_0);
res1 = min(x, t5);

Fastest checker: explicit
Fails for (0, 0, 3, 0, 5, 2)

[]
Fastest checker: genetic
Program 0:
res1 = 0x3 ? 0x3 : nondet_0;
Program 1:
t1 = -x;
t2 = 0x1 s< y;
t3 = nondet_2 ? x : y;
res1 = max(y, nondet_3);

Fastest checker: explicit
Fails for (2, 1, 6, 0, 5, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 << 0x6;
t2 = ~0x6;
res1 = max(nondet_1, t2);
Program 1:
t1 = x < nondet_3;
t2 = -x;
t3 = max(y, y);
res1 = min(x, t2);

Fastest checker: explicit
Fails for (0, 0, 3, 0, 6, 2)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_3 ==> nondet_3;
Program 1:
t1 = y - x;
t2 = -nondet_3;
t3 = ~nondet_2;
t4 = max(nondet_3, y);
res1 = t3 >>> x;

Fastest checker: explicit
Fails for (2, 0, 3, 0, 6, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 == y;
t2 = nondet_0 s< nondet_2;
t3 = nondet_3 != nondet_0;
res1 = nondet_3 ==> nondet_3;
Program 1:
t1 = nondet_3 != x;
t2 = 0x7 * x;
t3 = nondet_2 < x;
t4 = nondet_3 - y;
res1 = t3 << y;

Fastest checker: explicit
Fails for (0, 6, 3, 0, 6, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y s<= nondet_3;
res1 = 0x5 ==> 0x5;
Program 1:
t1 = nondet_0 == nondet_0;
t2 = -x;
t3 = 0x3 * y;
t4 = min(0x3, x);
t5 = nondet_3 == nondet_2;
res1 = t5 ==> 0x3;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y <= nondet_0;
t2 = min(0x2, y);
res1 = -0x2;
Program 1:
t1 = 0x0 ^ y;
t2 = t1 - x;
res1 = min(y, x);

Fastest checker: explicit
Fails for (1, 1, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y >>> nondet_1;
res1 = nondet_1 | 0x1;
Program 1:
t1 = y | nondet_2;
t2 = min(nondet_3, x);
t3 = nondet_2 ^ x;
t4 = nondet_1 - t3;
t5 = x ==> t4;
res1 = min(y, x);

Fastest checker: explicit
Fails for (2, 1, 0, 0, 3, 1)

[]







Timeout
Perf counters:
{'genetic': 30, 'explicit': 30, 'timeout': 1, 'iterations': 31}
Perf timers:
verify: 0.65s
checker: 59.92s
gcc: 0.46s
_: 60.00s
synth: 59.33s
