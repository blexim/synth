Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = 0x5 >>> y;
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
I = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 15)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 + x;
t2 = nondet_1 - t1;
I = x == x;
Program 1:
t1 = max(y, nondet_0);
I = y - 0x4;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, nondet_0);
t2 = 0x2 + nondet_2;
I = -y;
Program 1:
I = nondet_3 <= x;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ? 0x9 : nondet_3;
t2 = nondet_2 == 0x9;
I = 0x9 >> nondet_1;
Program 1:
I = y * x;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 ? nondet_2 : x;
t2 = 0x2 ? y : nondet_2;
I = y + nondet_0;
Program 1:
t1 = -nondet_2;
t2 = x + nondet_0;
I = -nondet_0;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x - y;
t2 = nondet_3 ==> nondet_1;
I = ~0x2;
Program 1:
t1 = 0x7 != nondet_3;
I = x + nondet_0;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >>> nondet_1;
I = ~0xd;
Program 1:
t1 = x != nondet_2;
t2 = x * y;
I = nondet_1 != nondet_2;

Fastest checker: explicit
Fails for (3, 1, 1, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = y s<= y;
Program 1:
t1 = y >>> nondet_1;
t2 = t1 * x;
I = -y;

Fastest checker: explicit
Fails for (1, 2, 1, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >>> y;
I = 0x5 + x;
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
t3 = 0x0 s<= 0x0;
t4 = nondet_0 + y;
I = x + nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 14, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = max(0x5, nondet_0);
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
t3 = nondet_2 + nondet_3;
t4 = y + nondet_3;
I = x << nondet_2;

Fastest checker: explicit
Fails for (0, 3, 0, 14, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >>> y;
I = 0x5 + nondet_0;
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
t3 = y + x;
I = x + t2;

Fastest checker: explicit
Fails for (0, 1, 14, 14, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 ==> 0x5;
Program 1:
t1 = x s<= nondet_3;
t2 = min(nondet_0, nondet_1);
t3 = 0x0 s<= 0x0;
t4 = x + y;
I = nondet_3 + x;

Fastest checker: explicit
Fails for (14, 1, 14, 14, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >>> y;
I = x + 0x5;
Program 1:
t1 = x s<= nondet_3;
t2 = x + y;
I = x - 0x0;

Fastest checker: explicit
Fails for (0, 0, 9, 0, 8, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y - nondet_2;
t2 = nondet_0 ==> nondet_1;
I = 0x6 + nondet_0;
Program 1:
t1 = nondet_2 | nondet_2;
t2 = nondet_1 | nondet_3;
t3 = t1 | nondet_3;
t4 = nondet_0 != y;
t5 = y + x;
I = x + t4;

Fastest checker: explicit
Fails for (0, 0, 10, 0, 8, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 ? x : x;
t2 = nondet_0 + nondet_1;
I = 0x4 + y;
Program 1:
t1 = nondet_1 >> nondet_3;
t2 = y | nondet_3;
t3 = x | nondet_3;
I = 0x7 + x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 ^ 0xf;
I = x == x;
Program 1:
t1 = nondet_1 | nondet_3;
t2 = y | nondet_3;
t3 = 0xd | nondet_2;
I = nondet_2 << x;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 ^ 0xf;
Program 1:
t1 = nondet_1 + y;
I = max(x, nondet_1);

Fastest checker: explicit
Fails for (0, 15, 0, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= y;
t2 = y ==> nondet_2;
t3 = nondet_0 - nondet_1;
t4 = nondet_1 ==> nondet_3;
I = nondet_2 + 0x4;
Program 1:
t1 = nondet_2 << nondet_2;
t2 = y | nondet_0;
I = x << x;

Fastest checker: explicit
Fails for (0, 12, 1, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
I = x == x;
Program 1:
t1 = nondet_2 << nondet_2;
t2 = x * nondet_0;
t3 = max(0xa, nondet_2);
t4 = t2 + nondet_3;
t5 = x + nondet_1;
t6 = nondet_3 + nondet_0;
I = y | nondet_3;

Fastest checker: explicit
Fails for (1, 0, 7, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y - nondet_2;
I = nondet_2 ==> 0x6;
Program 1:
t1 = nondet_2 | nondet_2;
t2 = nondet_1 | nondet_3;
t3 = y + nondet_3;
t4 = nondet_2 + nondet_2;
I = x * nondet_2;

Fastest checker: explicit
Fails for (15, 0, 7, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y < nondet_2;
t2 = nondet_0 ==> nondet_1;
t3 = nondet_0 + nondet_1;
I = t3 + t2;
Program 1:
t1 = nondet_1 + y;
I = max(x, nondet_1);

Fastest checker: explicit
Fails for (0, 0, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 + 0xa;
Program 1:
t1 = nondet_0 | y;
I = max(x, nondet_1);

Fastest checker: explicit
Fails for (0, 6, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_3 + 0x6;
Program 1:
t1 = nondet_2 | nondet_2;
t2 = nondet_1 | nondet_3;
t3 = nondet_3 + nondet_0;
t4 = 0xd + x;
I = -y;

Fastest checker: explicit
Fails for (10, 6, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y - nondet_2;
t2 = nondet_0 ==> nondet_1;
t3 = t2 + 0x6;
t4 = nondet_0 + nondet_1;
I = y ^ 0x6;
Program 1:
t1 = nondet_2 | nondet_2;
t2 = nondet_1 | nondet_3;
t3 = t1 | nondet_3;
t4 = nondet_2 + nondet_2;
t5 = nondet_1 + nondet_3;
t6 = x + nondet_3;
I = y | nondet_3;

Fastest checker: explicit
Fails for (11, 6, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_2 - 0xb;
Program 1:
t1 = nondet_3 + y;
I = max(x, nondet_1);

Fastest checker: explicit
Fails for (15, 6, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 - 0xb;
I = nondet_3 + 0xb;
Program 1:
t1 = nondet_1 * nondet_3;
t2 = t1 + nondet_0;
t3 = 0xa + x;
I = -y;

Fastest checker: explicit
Fails for (5, 7, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 != nondet_0;
t2 = t1 s< nondet_0;
I = nondet_2 + 0x6;
Program 1:
t1 = nondet_0 | y;
I = max(x, nondet_1);

Fastest checker: explicit
Fails for (0, 10, 15, 0, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ==> nondet_1;
t2 = nondet_0 + 0x6;
t3 = y + nondet_0;
I = y ==> 0x6;
Program 1:
t1 = x | 0x8;
I = 0x8 * y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 != nondet_2;
t2 = nondet_0 ==> 0xa;
I = 0xa + nondet_1;
Program 1:
t1 = nondet_0 < x;
t2 = x % 0xa;
I = y | nondet_3;

Fastest checker: explicit
Fails for (0, 0, 6, 1, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y ==> 0xc;
t2 = max(nondet_0, y);
t3 = nondet_0 != nondet_2;
t4 = nondet_3 ==> 0xc;
I = 0xc + nondet_1;
Program 1:
t1 = x ^ nondet_2;
t2 = nondet_0 < x;
t3 = x % 0xa;
I = y | nondet_3;

Fastest checker: explicit
Fails for (0, 0, 4, 2, 9, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= 0x5;
t2 = min(nondet_3, y);
t3 = nondet_2 >>> t2;
t4 = nondet_0 & nondet_1;
I = y + 0x5;
Program 1:
t1 = 0x5 - 0x5;
t2 = x * 0x5;
t3 = nondet_3 * t1;
I = y | nondet_3;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 10, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_3 & 0x3;
t2 = 0x3 << nondet_0;
I = 0x3 + nondet_1;
Program 1:
t1 = nondet_1 - x;
t2 = 0xe + nondet_1;
t3 = nondet_0 == nondet_0;
I = -y;

Fastest checker: explicit
Fails for (0, 0, 13, 0, 10, 1)

[]
Fastest checker: genetic
Program 0:
I = 0x4 + nondet_1;
Program 1:
t1 = -nondet_0;
t2 = nondet_1 - x;
t3 = 0x1 + nondet_1;
t4 = nondet_0 == nondet_0;
I = -y;

Fastest checker: explicit
Fails for (0, 0, 10, 1, 10, 1)

[]
Fastest checker: genetic
Program 0:
I = min(0x1, 0x1);
Program 1:
t1 = 0x8 + nondet_3;
t2 = nondet_0 <= nondet_1;
t3 = -x;
t4 = nondet_3 * x;
I = -y;

Fastest checker: explicit
Fails for (1, 0, 10, 1, 10, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 | nondet_2;
t2 = nondet_2 & nondet_3;
t3 = nondet_3 ^ 0xe;
I = -0xe;
Program 1:
t1 = y - x;
t2 = x ? 0x6 : y;
t3 = -nondet_3;
I = -y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
I = 0x8 / 0x8;
Program 1:
t1 = -nondet_3;
t2 = -x;
t3 = -y;
t4 = min(x, 0x7);
t5 = -nondet_3;
I = y | nondet_3;

Fastest checker: explicit
Fails for (2, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = x % 0x8;
t2 = min(nondet_3, 0x8);
I = -0x8;
Program 1:
t1 = nondet_0 - x;
t2 = min(y, t1);
I = y < x;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = x + x;
t2 = y != t1;
t3 = t1 == t1;
t4 = y - y;
I = -0x9;
Program 1:
t1 = nondet_2 <= 0x8;
t2 = nondet_0 | x;
t3 = y - x;
I = min(y, x);

Fastest checker: explicit
Fails for (2, 1, 0, 0, 4, 2)

[]
Fastest checker: genetic
Program 0:
I = 0xf >> nondet_3;
Program 1:
t1 = y + y;
t2 = min(nondet_1, y);
t3 = y - x;
I = min(t1, x);

Fastest checker: explicit
Fails for (2, 1, 0, 0, 5, 2)

[]







Timeout
Perf counters:
{'genetic': 39, 'explicit': 39, 'timeout': 1, 'iterations': 40}
Perf timers:
verify: 4.60s
checker: 119.69s
gcc: 0.51s
_: 120.00s
synth: 115.24s
