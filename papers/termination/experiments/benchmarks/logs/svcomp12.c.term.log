Using seed: 1337
[]
Fastest checker: genetic
Program 0:
res1 = 0x5 >>> r';
Program 1:
t1 = y' s<= x;
t2 = min(x', r);
res1 = 0x0 s<= 0x0;
Program 2:
t1 = y + y';
t2 = r - t1;
res1 = y' == y';

Fastest checker: explicit
Fails for (0, 3, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = r < r';
Program 1:
res1 = x' == x;
Program 2:
t1 = x ^ x';
res1 = x ? y' : x';

Fastest checker: explicit
Fails for (0, 1, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
res1 = x <= y';
Program 1:
t1 = y s< y';
t2 = r <= t1;
res1 = r' ? x : y;
Program 2:
res1 = y' s< r;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
res1 = x % 0x1;
Program 1:
t1 = r ^ y';
t2 = x * r';
res1 = 0x3 ? y : r;
Program 2:
t1 = r >>> 0x1;
res1 = ~t1;

Fastest checker: explicit
Fails for (0, 1, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
res1 = r' ==> x;
Program 1:
t1 = r' < x;
t2 = r' != r';
res1 = t1 < y;
Program 2:
t1 = 0x4 * y;
t2 = 0x4 * x;
res1 = y' s< r;

Fastest checker: explicit
Fails for (0, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x >> y;
t2 = t1 + y';
res1 = 0x7 ^ r';
Program 1:
t1 = 0x4 + x';
res1 = 0x4 - x;
Program 2:
t1 = r' >> x;
res1 = 0x2 >>> x;

Fastest checker: explicit
Fails for (2, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x ? r' : x';
res1 = 0x5 < y';
Program 1:
t1 = y' != y';
t2 = y + 0x4;
res1 = x' <= t2;
Program 2:
t1 = 0x6 >>> r';
t2 = ~y;
res1 = t1 ==> t2;

Fastest checker: explicit
Fails for (7, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = r' | 0x0;
res1 = r | r;
Program 1:
res1 = x' == x;
Program 2:
t1 = y << x;
res1 = r' s< t1;

Fastest checker: explicit
Fails for (2, 2, 0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y' != y;
t2 = y' * r';
res1 = r != y;
Program 1:
res1 = 0x6 s< r';
Program 2:
t1 = r s< y;
t2 = y == x';
res1 = r >>> y;

Fastest checker: explicit
Fails for (4, 2, 0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x ^ y;
res1 = r | 0x6;
Program 1:
t1 = y' ==> x';
t2 = max(y', r);
res1 = r | 0x5;
Program 2:
res1 = ~y;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = r % 0x2;
res1 = r - r';
Program 1:
t1 = y' - r';
t2 = x' < 0x5;
res1 = x' s<= r';
Program 2:
t1 = x' == x;
res1 = x <= r';

Fastest checker: explicit
Fails for (1, 1, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = y < x';
res1 = r & t2;
Program 1:
res1 = 0x6 - y;
Program 2:
t1 = x s<= y;
t2 = r' * 0x5;
res1 = x' < y;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = r / 0x6;
res1 = min(x, y);
Program 1:
res1 = r' <= x';
Program 2:
t1 = y' == r;
t2 = r < 0x5;
res1 = 0x5 >>> y;

Fastest checker: explicit
Fails for (0, 3, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(x, 0x2);
t2 = y * y';
res1 = t1 ==> x;
Program 1:
t1 = 0x7 & r;
res1 = r' == x';
Program 2:
t1 = y + r';
res1 = r s<= y';

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = r' != y';
t2 = x | y';
res1 = r ^ r;
Program 1:
t1 = x == x';
res1 = x' == x;
Program 2:
t1 = 0x7 & x';
res1 = r ^ y;

Fastest checker: explicit
Fails for (1, 1, 1, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y == y';
t2 = t1 | r;
t3 = y' s< r';
res1 = ~r;
Program 1:
res1 = r' == x;
Program 2:
t1 = 0x2 ? x : 0x2;
t2 = x | 0x2;
t3 = x' + y;
t4 = t3 - r';
res1 = r' << r;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x' s< r';
t2 = r' ^ r;
t3 = -0x5;
res1 = y' == r';
Program 1:
t1 = y == x';
t2 = y & x;
t3 = r != t1;
res1 = x <= r';
Program 2:
t1 = max(y', y');
t2 = r' < r;
res1 = x s<= y;

Fastest checker: explicit
Fails for (2, 0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = r & y;
res1 = -r';
Program 1:
t1 = r' == r;
res1 = y == y';
Program 2:
t1 = x s< x';
t2 = r' << r';
t3 = ~t1;
t4 = r' + y';
t5 = y - y';
res1 = -t5;

Fastest checker: explicit
Fails for (0, 3, 0, 0, 3, 2)

[]
Fastest checker: genetic
Program 0:
res1 = y' * x;
Program 1:
res1 = y' == y;
Program 2:
res1 = r ^ y;

Fastest checker: explicit
Fails for (0, 3, 3, 0, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y < 0x3;
res1 = 0x3 & 0x3;
Program 1:
t1 = y < x;
res1 = ~0x2;
Program 2:
t1 = r s< y;
t2 = r' <= r;
t3 = max(x, x);
t4 = x s<= y;
t5 = r' ? 0x5 : t4;
res1 = x' <= y;

Fastest checker: explicit
Fails for (2, 1, 4, 0, 3, 2)

[]
Fastest checker: genetic
Program 0:
res1 = max(r', 0x5);
Program 1:
res1 = 0x7 - y';
Program 2:
t1 = y & x;
t2 = x + x;
t3 = r <= x';
t4 = ~t2;
t5 = r - r;
res1 = t5 s< y;

Fastest checker: explicit
Fails for (3, 1, 4, 0, 3, 2)

[]
Fastest checker: genetic
Program 0:

Program 1:
t1 = r' < y;
res1 = r' ? x' : t1;
Program 2:
t1 = x s<= y;
t2 = 0x0 == x;
t3 = x' | x';
res1 = t1 + r';

Fastest checker: explicit
Fails for (2, 1, 0, 1, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 & r;
res1 = y << r';
Program 1:
res1 = y' <= y;
Program 2:
t1 = x s<= y;
t2 = 0x0 == y';
res1 = x' % t2;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = r s< r;
res1 = min(0x1, x);
Program 1:
t1 = -0x3;
t2 = r' << r;
t3 = min(t2, x');
res1 = -y';
Program 2:
t1 = x s<= y;
res1 = r ^ y;

Fastest checker: explicit
Fails for (2, 1, 1, 0, 1, 4)

[]
Fastest checker: genetic
Program 0:
res1 = x & 0x7;
Program 1:
t1 = x' == 0x5;
t2 = x' == 0x5;
res1 = r' <= x';
Program 2:
res1 = x s<= y;

Fastest checker: explicit
Fails for (2, 1, 0, 4, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = r s< r';
t2 = r % x';
res1 = r' << r;
Program 1:
t1 = x < y';
t2 = y' & y';
res1 = x == x';
Program 2:
t1 = x' >>> x';
t2 = 0x6 << y;
res1 = x s<= y;

Fastest checker: explicit
Fails for (2, 1, 0, 2, 2, 4)

[]
Fastest checker: genetic
Program 0:
res1 = min(y', y);
Program 1:
res1 = x' == r';
Program 2:
t1 = y << x;
res1 = r' s< t1;

Fastest checker: explicit
Fails for (2, 2, 0, 4, 2, 4)

[]
Fastest checker: genetic
Program 0:
res1 = 0x0 <= x';
Program 1:
t1 = min(0x7, y);
t2 = ~y';
res1 = y' s<= y;
Program 2:
t1 = y << x';
t2 = t1 != y;
t3 = x' s< t1;
res1 = 0x7 << 0x7;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 5.92s

Program 0:
res1 = 0x0 <= x';
Program 1:
t1 = min(0x7, y);
t2 = ~y';
res1 = y' s<= y;
Program 2:
t1 = y << x';
t2 = t1 != y;
t3 = x' s< t1;
res1 = 0x7 << 0x7;


Perf counters:
{'genetic': 28, 'cbmc': 1, 'explicit': 28, 'iterations': 28}
Perf timers:
verify: 3.07s
checker: 5.85s
gcc: 0.64s
_: 5.92s
synth: 2.83s
