Using seed: 1337
[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[2] = ((sword_t) 0xc) >> ((sword_t) args[5]);
res[1] = args[3] * 0xc;
res[0] = min(args[4], args[1]);

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 4, 6, 11, 8, 2
Program 0:
res[0] = ((sword_t) args[3]) <= ((sword_t) args[2]);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 1, 4, 4, 7, 15
Program 0:
res[4] = ((sword_t) 0x2) >> ((sword_t) 0x2);
res[3] = args[5] == args[0];
res[2] = 0x2 >> args[1];
res[1] = args[3] ? args[0] : res[3];
res[0] = ((sword_t) args[0]) >> ((sword_t) res[1]);

Fastest checker: explicit
Fails for (4, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 10, 12, 3, 3, 10
Program 0:
res[2] = max(args[2], args[0]);
res[1] = args[3] ? args[1] : args[2];
res[0] = args[4] < args[1];

Fastest checker: explicit
Fails for (0, 2, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 15, 5, 11, 13, 14
Program 0:
res[0] = args[3] ^ args[5];

Fastest checker: explicit
Fails for (0, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 10, 8, 3, 2, 4
Program 0:
res[0] = 0x3 < args[2];

Fastest checker: explicit
Fails for (0, 0, 4, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 6, 15, 7, 2, 8
Program 0:
res[1] = min(args[2], args[4]);
res[0] = min(args[0], res[1]);

Fastest checker: explicit
Fails for (1, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 2, 15, 6, 7, 1
Program 0:
res[4] = max(args[2], args[1]);
res[3] = 0x5 * args[4];
res[2] = !args[5] || args[0];
res[1] = args[0] != res[2];
res[0] = 0x5 < args[2];

Fastest checker: explicit
Fails for (0, 0, 6, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 13, 12, 15, 15
Program 0:
res[0] = args[5] >> args[3];

Fastest checker: explicit
Fails for (0, 0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 5, 4, 8, 1, 12
Program 0:
res[0] = args[3] < args[5];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 10, 15, 7, 1, 15, 2
Program 0:
res[4] = args[4] >> 0x1;
res[3] = args[1] <= args[5];
res[2] = args[1] | args[3];
res[1] = 0x1 != args[3];
res[0] = args[0] & res[4];

Fastest checker: explicit
Fails for (1, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 4, 1, 15, 7, 13, 10
Program 0:
res[0] = args[2] * args[1];

Fastest checker: explicit
Fails for (0, 1, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 1, 14, 12, 2, 13
Program 0:
res[3] = args[2] < args[1];
res[2] = args[4] == args[1];
res[1] = ((sword_t) args[4]) >> ((sword_t) res[2]);
res[0] = 0x8 <= args[5];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 8)

[]
Fastest checker: genetic
Evars: 7, 6, 2, 15, 10, 12
Program 0:
res[4] = args[1] == args[5];
res[3] = args[0] ? 0xf : args[1];
res[2] = res[4] - args[5];
res[1] = !res[4] || res[2];
res[0] = ((sword_t) args[4]) < ((sword_t) 0xf);

Fastest checker: explicit
Fails for (0, 0, 0, 1, 8, 1)

[]
Fastest checker: genetic
Evars: 1, 11, 5, 9, 4, 2
Program 0:
res[1] = args[0] + args[0];
res[0] = args[2] % args[5];

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 3, 8, 15, 14, 1, 10
Program 0:
res[2] = ((sword_t) args[4]) <= ((sword_t) args[5]);
res[1] = args[4] <= args[5];
res[0] = args[1] % args[5];

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 4, 6, 2, 5, 6, 2
Program 0:
res[1] = min(args[3], 0x5);
res[0] = 0x5 <= args[3];

Fastest checker: explicit
Fails for (0, 0, 0, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 6, 15, 1, 9, 10
Program 0:
res[3] = args[2] <= args[3];
res[2] = 0x0 >> 0x0;
res[1] = args[2] * args[1];
res[0] = ((sword_t) res[1]) >> ((sword_t) args[4]);

Fastest checker: explicit
Fails for (0, 2, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 8, 14, 12, 8, 15
Program 0:
res[1] = 0xd * 0xd;
res[0] = ((sword_t) args[3]) >> ((sword_t) 0xd);

Fastest checker: explicit
Fails for (0, 0, 0, 8, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 8, 8, 14, 13, 4
Program 0:
res[2] = args[0] >> args[4];
res[1] = -res[2];
res[0] = args[3] & res[2];

Fastest checker: explicit
Fails for (2, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 1, 11, 13, 5, 13
Program 0:
res[0] = min(args[0], args[1]);

Fastest checker: explicit
Fails for (1, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 7, 15, 14, 5, 13
Program 0:
res[4] = min(args[4], args[3]);
res[3] = 0x2 % res[4];
res[2] = res[3] << args[3];
res[1] = ((sword_t) res[2]) < ((sword_t) args[2]);
res[0] = 0x2 % res[4];

Fastest checker: explicit
Fails for (0, 0, 0, 3, 3, 1)

[]
Fastest checker: genetic
Evars: 15, 15, 7, 5, 2, 15
Program 0:
res[4] = ((sword_t) args[1]) < ((sword_t) args[4]);
res[3] = 0xf ? args[3] : 0xf;
res[2] = ((sword_t) args[4]) < ((sword_t) args[1]);
res[1] = -args[4];
res[0] = args[1] / res[1];

Fastest checker: explicit
Fails for (0, 15, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 1, 11, 3, 12, 12
Program 0:
res[1] = args[3] % 0x4;
res[0] = args[4] & 0x4;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 8, 15, 5, 1, 8, 2
Program 0:
res[3] = args[5] - 0x5;
res[2] = ((sword_t) args[4]) <= ((sword_t) res[3]);
res[1] = !args[5] || args[3];
res[0] = args[2] == 0x5;

Fastest checker: explicit
Fails for (0, 0, 5, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 13, 6, 7, 5, 15
Program 0:
res[0] = args[2] % args[4];

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 8, 4, 2, 13, 4, 2
Program 0:
res[2] = -0x5;
res[1] = 0x5 ? args[5] : args[3];
res[0] = args[0] >> res[2];

Fastest checker: explicit
Fails for (8, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 9, 1, 11, 4, 12
Program 0:
res[0] = ((sword_t) args[1]) < ((sword_t) 0xd);

Fastest checker: explicit
Fails for (0, 8, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 9, 1, 4, 7, 13
Program 0:
res[3] = ((sword_t) args[3]) < ((sword_t) args[4]);
res[2] = !args[1] || args[3];
res[1] = ~0x9;
res[0] = ((sword_t) res[1]) < ((sword_t) args[4]);

Fastest checker: explicit
Fails for (0, 0, 0, 1, 7, 1)

[]
Fastest checker: genetic
Evars: 7, 10, 6, 11, 12, 10
Program 0:
res[2] = max(args[3], args[5]);
res[1] = args[4] ^ args[0];
res[0] = 0x8 < args[4];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 9, 1)

[]
Fastest checker: genetic
Evars: 3, 9, 10, 14, 12, 14
Program 0:
res[2] = args[2] | args[2];
res[1] = max(args[3], res[2]);
res[0] = ((sword_t) args[2]) >> ((sword_t) 0xb);

Fastest checker: explicit
Fails for (0, 0, 8, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 10, 9, 10, 6, 4
Program 0:
res[3] = ((sword_t) args[4]) >> ((sword_t) args[4]);
res[2] = res[3] / args[4];
res[1] = args[5] != args[4];
res[0] = 0x9 <= args[0];

Fastest checker: explicit
Fails for (9, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 14, 9, 10, 5, 12
Program 0:
res[1] = !args[0] || 0xb;
res[0] = args[1] % args[4];

Fastest checker: explicit
Fails for (0, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 12, 11, 6, 5, 13, 7
Program 0:
res[4] = -args[3];
res[3] = args[1] < args[0];
res[2] = min(args[3], args[2]);
res[1] = res[4] & args[2];
res[0] = res[1] != args[2];

Fastest checker: explicit
Fails for (0, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 1, 15, 12, 6
Program 0:
res[4] = max(args[4], args[2]);
res[3] = -args[3];
res[2] = -args[1];
res[1] = ~res[3];
res[0] = res[3] < 0x5;

Fastest checker: explicit
Fails for (0, 0, 0, 12, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 10, 0, 11, 8, 5
Program 0:
res[4] = args[1] ? args[3] : args[0];
res[3] = ((sword_t) args[1]) <= ((sword_t) 0xc);
res[2] = ((sword_t) res[3]) >> ((sword_t) args[2]);
res[1] = args[4] < res[4];
res[0] = res[3] & res[1];

Fastest checker: explicit
Fails for (0, 8, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 14, 9, 10, 6, 15
Program 0:
res[4] = args[4] & args[3];
res[3] = res[4] * res[4];
res[2] = ((sword_t) res[3]) < ((sword_t) args[4]);
res[1] = ((sword_t) args[0]) >> ((sword_t) args[5]);
res[0] = res[2] % args[5];

Fastest checker: explicit
Fails for (0, 0, 0, 2, 1, 2)

[]
Fastest checker: genetic
Evars: 9, 3, 13, 13, 7, 14
Program 0:
res[4] = args[0] << args[4];
res[3] = args[2] != args[1];
res[2] = ((sword_t) res[3]) < ((sword_t) args[4]);
res[1] = !res[3] || args[5];
res[0] = args[0] & res[4];

Fastest checker: explicit
Fails for (3, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 2, 8, 15, 12, 13
Program 0:
res[3] = args[4] == args[1];
res[2] = args[0] >> args[0];
res[1] = res[3] ^ args[4];
res[0] = args[4] & res[2];

Fastest checker: explicit
Fails for (6, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 5, 10, 4, 7, 15
Program 0:
res[3] = args[5] ^ args[4];
res[2] = args[1] != args[3];
res[1] = 0x9 - args[4];
res[0] = args[2] / 0x9;

Fastest checker: explicit
Fails for (0, 0, 9, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[5] = ((sword_t) 0xc) >> ((sword_t) args[5]);
res[4] = args[2] + args[0];
res[3] = res[4] & args[4];
res[2] = args[4] | args[1];
res[1] = max(args[4], args[0]);
res[0] = ((sword_t) res[3]) >> ((sword_t) res[2]);

Fastest checker: explicit
Fails for (4, 0, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[2] = -args[5];
res[1] = args[4] << args[2];
res[0] = res[2] <= args[3];

Fastest checker: explicit
Fails for (0, 0, 0, 15, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[2] = ((sword_t) 0xc) >> ((sword_t) args[5]);
res[1] = args[5] + args[5];
res[0] = 0xc == res[1];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[2] = ((sword_t) 0xc) >> ((sword_t) args[5]);
res[1] = args[4] + 0xc;
res[0] = args[5] == res[1];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 5, 1)

[]
Fastest checker: genetic
Evars: 12, 0, 8, 14, 10, 12
Program 0:
res[3] = args[5] & args[4];
res[2] = args[4] | args[1];
res[1] = max(args[4], args[0]);
res[0] = ((sword_t) res[3]) >> ((sword_t) res[2]);

Fastest checker: explicit
Fails for (0, 0, 0, 1, 4, 4)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 10, 10, 6
Program 0:
res[5] = args[3] * 0x6;
res[4] = min(args[4], args[1]);
res[3] = args[3] + args[1];
res[2] = res[3] + args[4];
res[1] = args[2] + res[4];
res[0] = res[4] >> 0x6;

Fastest checker: explicit
Fails for (0, 4, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 12, 0, 8, 14, 10, 12
Program 0:
res[5] = args[3] + args[0];
res[4] = 0x6 + args[5];
res[3] = args[3] + 0x6;
res[2] = args[5] + args[5];
res[1] = ((sword_t) args[3]) >> ((sword_t) res[2]);
res[0] = args[0] * res[1];

Fastest checker: explicit
Fails for (1, 0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 15, 8, 14, 10, 12
Program 0:
res[1] = min(args[2], args[5]);
res[0] = res[1] >> args[5];

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 10, 13, 6, 6, 7, 10
Program 0:
res[3] = args[0] << args[0];
res[2] = -0xc;
res[1] = -args[1];
res[0] = args[1] & res[3];

Fastest checker: explicit
Fails for (1, 2, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 11, 15, 5, 15, 7
Program 0:
res[4] = args[3] + 0x0;
res[3] = res[4] < args[2];
res[2] = args[5] >> res[3];
res[1] = min(0x0, res[4]);
res[0] = min(res[3], args[1]);

Fastest checker: explicit
Fails for (0, 1, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 13, 4, 12, 12, 8
Program 0:
res[1] = args[0] & args[3];
res[0] = res[1] >> args[0];

Fastest checker: explicit
Fails for (4, 0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 0, 8, 14, 10, 12
Program 0:
res[1] = args[2] != args[0];
res[0] = 0xc == args[5];

Fastest checker: cbmc
Fails for (0, 0, 0, 1, 4, 12)

[]
Fastest checker: genetic
Evars: 6, 4, 2, 8, 15, 3
Program 0:
res[2] = args[2] ^ args[5];
res[1] = ((sword_t) args[5]) <= ((sword_t) args[1]);
res[0] = 0xa < args[4];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 11, 1)

[]
Fastest checker: genetic
Evars: 7, 15, 12, 14, 11, 15
Program 0:
res[0] = 0xf <= args[5];

Fastest checker: cbmc
Fails for (0, 1, 0, 8, 8, 15)

[]
Fastest checker: genetic
Evars: 7, 6, 13, 1, 4, 5
Program 0:
res[1] = ((sword_t) args[2]) >> ((sword_t) args[3]);
res[0] = res[1] * args[0];

Fastest checker: explicit
Fails for (1, 0, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 8, 13, 1, 4, 5
Program 0:
res[1] = ((sword_t) args[0]) >> ((sword_t) args[3]);
res[0] = res[1] * args[2];

Fastest checker: explicit
Fails for (2, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 13, 15, 9, 11, 2
Program 0:
res[4] = ~args[4];
res[3] = !args[3] || 0x0;
res[2] = args[3] + args[5];
res[1] = args[2] + args[3];
res[0] = res[1] < args[2];

Fastest checker: explicit
Fails for (0, 0, 15, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 12, 7, 10, 10, 12
Program 0:
res[1] = ~args[1];
res[0] = res[1] < args[2];

Fastest checker: explicit
Fails for (0, 15, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 4, 7, 12, 2, 15
Program 0:
res[6] = ((sword_t) 0xb) <= ((sword_t) args[4]);
res[5] = 0xb / 0xb;
res[4] = args[0] % args[5];
res[3] = res[5] - args[0];
res[2] = min(0xb, args[1]);
res[1] = args[5] + args[0];
res[0] = res[1] < args[0];

Fastest checker: explicit
Fails for (15, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 10, 12, 1, 3, 15
Program 0:
res[3] = max(args[2], args[3]);
res[2] = 0xb < res[3];
res[1] = !res[3] || res[3];
res[0] = res[2] * args[0];

Fastest checker: explicit
Fails for (1, 0, 12, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 9, 8, 7, 4, 8
Program 0:
res[1] = args[5] & 0xa;
res[0] = args[0] * res[1];

Fastest checker: explicit
Fails for (1, 0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 0, 8, 14, 10, 12
Program 0:
res[2] = args[3] + args[0];
res[1] = args[5] + args[1];
res[0] = 0xc == args[0];

Fastest checker: explicit
Fails for (12, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 0, 8, 14, 10, 12
Program 0:
res[4] = args[3] + args[0];
res[3] = ((sword_t) 0x6) >> ((sword_t) args[0]);
res[2] = 0x6 < args[0];
res[1] = args[3] + res[2];
res[0] = ((sword_t) res[2]) >> ((sword_t) args[5]);

Fastest checker: explicit
Fails for (7, 0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 9, 8, 13, 15, 14, 9
Program 0:
res[4] = args[5] + args[1];
res[3] = args[4] <= 0xc;
res[2] = 0xc * args[4];
res[1] = res[2] < res[2];
res[0] = 0xc <= args[4];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 12, 1)

[]
Fastest checker: genetic
Evars: 8, 5, 3, 3, 4, 14
Program 0:
res[2] = args[0] | args[5];
res[1] = max(args[4], args[3]);
res[0] = 0x5 == args[1];

Fastest checker: explicit
Fails for (0, 5, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 2, 5, 4, 10, 2
Program 0:
res[1] = ((sword_t) args[0]) <= ((sword_t) 0xe);
res[0] = res[1] % args[3];

Fastest checker: explicit
Fails for (8, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 13, 8, 4, 1, 9
Program 0:
res[3] = args[4] < args[0];
res[2] = res[3] - res[3];
res[1] = args[1] << args[1];
res[0] = min(res[3], res[1]);

Fastest checker: explicit
Fails for (2, 1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 10, 1, 5, 8
Program 0:
res[3] = args[5] < args[2];
res[2] = min(args[4], args[1]);
res[1] = args[5] % args[5];
res[0] = ((sword_t) res[3]) >> ((sword_t) args[5]);

Fastest checker: explicit
Fails for (0, 0, 5, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 11, 3, 1, 10, 14, 15
Program 0:
res[1] = args[0] - 0xd;
res[0] = 0xd < args[4];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 14, 1)

[]
Fastest checker: genetic
Evars: 1, 5, 12, 5, 5, 6
Program 0:
res[3] = args[0] == 0xe;
res[2] = ((sword_t) args[1]) >> ((sword_t) args[0]);
res[1] = 0xe & args[4];
res[0] = res[1] & args[2];

Fastest checker: explicit
Fails for (0, 0, 2, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 12, 6, 15, 3, 10, 1
Program 0:
res[0] = args[1] == 0x6;

Fastest checker: explicit
Fails for (0, 6, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 7, 3, 6, 7, 3
Program 0:
res[4] = args[2] + args[3];
res[3] = ~res[4];
res[2] = args[2] & args[4];
res[1] = args[2] + res[2];
res[0] = res[2] & res[1];

Fastest checker: explicit
Fails for (0, 0, 3, 1, 3, 1)

[]
Fastest checker: genetic
Evars: 0, 7, 3, 6, 7, 3
Program 0:
res[3] = args[2] + args[3];
res[2] = 0x6 + res[3];
res[1] = ((sword_t) 0x6) <= ((sword_t) args[3]);
res[0] = -res[1];

Fastest checker: explicit
Fails for (0, 0, 0, 6, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 11, 9, 15, 10, 5
Program 0:
res[4] = -args[5];
res[3] = ~res[4];
res[2] = 0xc & args[0];
res[1] = ((sword_t) args[3]) < ((sword_t) args[3]);
res[0] = args[2] * res[2];

Fastest checker: explicit
Fails for (4, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 11, 9, 15, 11, 6
Program 0:
res[4] = -args[5];
res[3] = ~res[4];
res[2] = 0xc & args[0];
res[1] = ((sword_t) res[2]) < ((sword_t) args[1]);
res[0] = res[2] & args[2];

Fastest checker: explicit
Fails for (4, 0, 4, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 10, 10, 11, 10, 11
Program 0:
res[4] = min(args[1], args[3]);
res[3] = args[4] + res[4];
res[2] = args[3] >> args[3];
res[1] = args[3] << args[4];
res[0] = ((sword_t) res[4]) >> ((sword_t) res[3]);

Fastest checker: explicit
Fails for (0, 3, 0, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 1, 10, 10, 11, 5
Program 0:
res[1] = ((sword_t) args[5]) >> ((sword_t) args[5]);
res[0] = args[3] == 0xa;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 1, 10, 10, 11, 5
Program 0:
res[1] = ((sword_t) args[5]) >> ((sword_t) args[5]);
res[0] = args[5] == 0x5;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 5)

[]
Fastest checker: genetic
Evars: 3, 1, 10, 13, 7, 14
Program 0:
res[1] = ((sword_t) args[5]) >> ((sword_t) args[5]);
res[0] = args[3] == 0xd;

Fastest checker: explicit
Fails for (0, 0, 0, 13, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 0, 15, 14, 12, 8
Program 0:
res[1] = -args[5];
res[0] = res[1] < args[4];

Fastest checker: explicit
Fails for (0, 0, 0, 1, 15, 2)

[]
Fastest checker: genetic
Evars: 1, 11, 15, 5, 15, 7
Program 0:
res[4] = args[3] + 0x6;
res[3] = res[4] < args[2];
res[2] = args[5] >> res[3];
res[1] = min(0x6, res[4]);
res[0] = min(res[3], args[1]);

Fastest checker: explicit
Fails for (0, 1, 8, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 0, 3, 5, 3, 2
Program 0:
res[1] = ~args[4];
res[0] = 0xa == args[0];

Fastest checker: explicit
Fails for (10, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 4, 11, 12, 8, 5
Program 0:
res[4] = args[0] % args[4];
res[3] = min(args[0], args[2]);
res[2] = -args[1];
res[1] = args[2] ^ args[2];
res[0] = min(res[4], res[2]);

Fastest checker: explicit
Fails for (1, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 5, 14, 5, 6, 5, 12
Program 0:
res[4] = ((sword_t) args[5]) < ((sword_t) 0xc);
res[3] = ((sword_t) args[4]) >> ((sword_t) args[3]);
res[2] = min(args[3], res[3]);
res[1] = min(res[2], args[2]);
res[0] = res[1] * args[1];

Fastest checker: explicit
Fails for (0, 1, 1, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 5, 11, 7, 1, 2
Program 0:
res[6] = args[4] << args[4];
res[5] = args[2] ? args[1] : args[3];
res[4] = ~args[2];
res[3] = args[1] * args[0];
res[2] = args[4] != res[4];
res[1] = res[2] & res[4];
res[0] = res[4] < res[3];

Fastest checker: explicit
Fails for (15, 1, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 6, 12, 12, 12, 11
Program 0:
res[2] = args[1] == args[4];
res[1] = args[2] & args[0];
res[0] = res[1] % args[3];

Fastest checker: explicit
Fails for (1, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 10, 13, 10, 6, 7
Program 0:
res[3] = args[1] == 0xa;
res[2] = args[3] / args[3];
res[1] = res[3] * args[0];
res[0] = 0xa * res[3];

Fastest checker: explicit
Fails for (0, 10, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);

Fastest checker: cbmc
Fails for (4, 4, 1, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 15, 8, 14
Program 0:
res[4] = ((sword_t) args[5]) >> ((sword_t) 0xe);
res[3] = args[5] == res[4];
res[2] = ((sword_t) args[4]) < ((sword_t) args[3]);
res[1] = min(args[0], res[4]);
res[0] = min(res[1], args[1]);








Timeout
Perf counters:
{'genetic': 127, 'cbmc': 41, 'explicit': 85, 'timeout': 1, 'iterations': 127}
Perf timers:
verify: 105.47s
checker: 118.07s
gcc: 0.46s
_: 120.00s
synth: 13.97s
