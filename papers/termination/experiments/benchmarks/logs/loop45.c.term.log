Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x0 >>> d;
t2 = x * 0x0;
res1 = min(y, nondet_1);
Program 1:
res1 = x s<= nondet_1;

Fastest checker: explicit
Fails for (0, 0, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 + y;
res1 = nondet_0 - t1;
Program 1:
t1 = d == nondet_0;
t2 = max(nondet_2, nondet_0);
res1 = 0x7 - nondet_2;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf & d;
Program 1:
t1 = max(0x7, x);
t2 = nondet_0 s< t1;
t3 = x ==> nondet_1;
t4 = nondet_1 s<= d;
res1 = 0x7 - nondet_2;

Fastest checker: cbmc
Fails for (15, 11, 0, 15, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_2;
t2 = y s< nondet_0;
t3 = nondet_0 >> d;
res1 = x >> d;
Program 1:
t1 = y ? 0x8 : x;
t2 = 0x8 != nondet_0;
res1 = t2 + t2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_1 != 0xf;
Program 1:
t1 = nondet_1 s<= d;
res1 = nondet_0 >> d;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = d ^ 0x1;
t2 = nondet_2 | 0x1;
t3 = t1 & nondet_0;
t4 = nondet_1 < x;
res1 = nondet_0 s<= nondet_0;
Program 1:
t1 = d % nondet_1;
t2 = d - 0x1;
res1 = 0x1 ? t1 : nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 s< nondet_0;
res1 = nondet_0 | 0x7;
Program 1:
res1 = -y;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(nondet_2, d);
t2 = 0x8 != y;
t3 = nondet_0 <= nondet_2;
res1 = x - 0x8;
Program 1:
t1 = min(y, nondet_0);
res1 = x & 0x1;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = 0xf << t1;
res1 = y ==> t1;
Program 1:
t1 = x + nondet_1;
t2 = nondet_1 / 0x7;
res1 = x ? y : nondet_0;

Fastest checker: explicit
Fails for (0, 14, 1, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 == d;
res1 = d ==> x;
Program 1:
t1 = min(x, 0x7);
res1 = ~nondet_0;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 - nondet_1;
t2 = t1 ? y : t1;
t3 = ~t1;
res1 = t2 ==> nondet_1;
Program 1:
t1 = max(nondet_2, d);
res1 = nondet_2 / 0x7;

Fastest checker: explicit
Fails for (1, 3, 0, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 ^ nondet_1;
Program 1:
t1 = nondet_2 >>> nondet_2;
t2 = t1 <= nondet_1;
t3 = d ? nondet_2 : t1;
res1 = d >>> t3;

Fastest checker: explicit
Fails for (9, 3, 0, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = y | 0x8;
Program 1:
t1 = nondet_0 * d;
t2 = y % 0xf;
t3 = d >> nondet_0;
res1 = d & d;

Fastest checker: explicit
Fails for (1, 0, 1, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y ? y : nondet_2;
t2 = nondet_0 <= d;
t3 = t2 * nondet_1;
res1 = ~y;
Program 1:
t1 = nondet_0 s< y;
t2 = x + 0x1;
t3 = y << nondet_2;
res1 = nondet_1 s<= y;

Fastest checker: explicit
Fails for (3, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 - d;
t2 = nondet_2 ^ 0x7;
res1 = t2 - y;
Program 1:
t1 = -d;
t2 = max(t1, x);
t3 = max(x, nondet_1);
res1 = y < 0x8;

Fastest checker: explicit
Fails for (5, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 ? 0x8 : nondet_2;
t2 = y << nondet_2;
t3 = -y;
res1 = 0x8 >>> t1;
Program 1:
t1 = y >> nondet_0;
t2 = x + nondet_2;
res1 = 0x7 == 0x7;

Fastest checker: explicit
Fails for (15, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ? nondet_2 : y;
res1 = t1 ==> t1;
Program 1:
t1 = nondet_2 s< nondet_0;
res1 = d * x;

Fastest checker: explicit
Fails for (2, 0, 1, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -0xf;
t2 = t1 << nondet_1;
res1 = t2 < 0xf;
Program 1:
t1 = 0x0 | x;
t2 = y << nondet_0;
t3 = ~nondet_0;
res1 = 0x0 ==> 0x0;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: explicit
Trying to generalize...
Fastest checker: cbmc







Finished in 4.30s

Program 0:
t1 = -0xffffffff;
t2 = t1 << nondet_1;
res1 = t2 < 0xffffffff;
Program 1:
t1 = 0x0 | x;
t2 = y << nondet_0;
t3 = ~nondet_0;
res1 = 0x0 ==> 0x0;


Perf counters:
{'genetic': 18, 'cbmc': 3, 'explicit': 17, 'iterations': 18}
Perf timers:
gcc: 0.53s
verify: 3.73s
checker: 4.26s
generalize: 0.98s
synth: 0.57s
_: 4.30s
