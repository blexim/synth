Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x8 ? nondet_0 : nondet_0;
I = t1 * t1;
Program 1:
t1 = x & x;
t2 = nondet_0 == t1;
I = t2 << t1;

Fastest checker: explicit
Fails for (0, 11)

[]
Fastest checker: genetic
Program 0:
t1 = x >> 0x2;
I = x | x;
Program 1:
t1 = 0x9 == x;
t2 = t1 + x;
I = x s< t1;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Program 0:
I = max(0xf, x);
Program 1:
t1 = x << x;
t2 = t1 < t1;
I = 0x0 >> t1;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x & 0xf;
t2 = x - 0xf;
I = nondet_0 ==> t1;
Program 1:
t1 = x >> 0xf;
t2 = min(t1, t1);
I = x + x;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
I = ~x;
Program 1:
t1 = 0xc >> x;
t2 = x | 0xc;
I = x + x;

Fastest checker: explicit
Fails for (0, 15)

[]
Fastest checker: genetic
Program 0:
I = 0x0 s<= 0x0;
Program 1:
t1 = ~0x2;
t2 = min(x, x);
I = x <= t1;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 2.82s

Program 0:
I = 0x0 s<= 0x0;
Program 1:
t1 = ~0x2;
t2 = min(x, x);
I = x <= t1;


Perf counters:
{'genetic': 6, 'cbmc': 1, 'explicit': 6, 'iterations': 6}
Perf timers:
verify: 2.33s
checker: 2.78s
gcc: 0.64s
_: 2.82s
synth: 0.49s
