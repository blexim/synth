Using seed: 1337
[]
Fastest checker: genetic
Evars: 10, 5, 6, 10, 11, 7
Program 0:
t1 = nondet_1 <= 0x3;
I = nondet_3 s< y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 12, 9, 14, 8, 2
Program 0:
I = nondet_1 s< 0xd;

Fastest checker: explicit
Fails for (0, 0, 8, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 0, 2, 5, 12, 2
Program 0:
t1 = x ==> x;
t2 = t1 >>> 0x5;
I = x != y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 13, 10, 5, 4, 3, 5
Program 0:
t1 = nondet_2 >> nondet_1;
t2 = max(nondet_2, nondet_2);
I = t1 < nondet_2;

Fastest checker: explicit
Fails for (0, 1, 1, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 14, 11, 7, 10, 6, 5
Program 0:
t1 = nondet_0 ==> y;
I = -nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 4, 2, 13, 6, 1, 6
Program 0:
I = nondet_3 >>> nondet_0;

Fastest checker: explicit
Fails for (2, 0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 2, 10, 4, 10, 7, 3
Program 0:
t1 = max(0x4, nondet_3);
I = nondet_0 ? nondet_1 : nondet_3;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 0, 5, 2, 10, 13, 5
Program 0:
t1 = 0x9 != nondet_1;
t2 = nondet_2 < nondet_3;
I = nondet_2 * nondet_0;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 10, 12, 0, 5, 13, 6
Program 0:
I = x s<= nondet_1;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 13, 5, 6, 2
Program 0:
I = x & nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 2, 1)

[]
Fastest checker: genetic
Evars: 14, 15, 15, 11, 5, 7
Program 0:
t1 = 0x7 s< y;
t2 = nondet_0 s<= 0x7;
I = nondet_1 % y;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 10, 11, 15, 15, 6, 4
Program 0:
t1 = nondet_3 != nondet_2;
t2 = y == nondet_3;
I = y >> y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 14, 5, 11, 8, 4
Program 0:
I = nondet_0 >>> x;

Fastest checker: explicit
Fails for (0, 1, 0, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 12, 2, 12, 12, 12, 5
Program 0:
t1 = nondet_2 >>> nondet_1;
t2 = y s< t1;
I = min(t1, nondet_3);

Fastest checker: explicit
Fails for (1, 1, 0, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 14, 4, 8, 8, 2, 3
Program 0:
I = nondet_2 >>> x;

Fastest checker: explicit
Fails for (0, 2, 0, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 1, 8, 14, 7, 13, 4
Program 0:
I = y < nondet_2;

Fastest checker: explicit
Fails for (0, 5, 0, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 13, 12, 0, 13, 10, 6
Program 0:
t1 = min(nondet_1, nondet_2);
I = x / 0x6;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 6, 4)

[]
Fastest checker: genetic
Evars: 7, 13, 15, 5, 4, 5
Program 0:
I = x < nondet_3;

Fastest checker: explicit
Fails for (8, 1, 0, 0, 6, 4)

[]
Fastest checker: genetic
Evars: 5, 11, 13, 13, 12, 3
Program 0:
I = nondet_2 >> 0x3;

Fastest checker: explicit
Fails for (0, 8, 0, 0, 6, 4)

[]
Fastest checker: genetic
Evars: 11, 4, 12, 12, 4, 3
Program 0:
t1 = ~y;
I = nondet_0 s<= t1;

Fastest checker: explicit
Fails for (0, 1, 0, 8, 6, 4)

[]
Fastest checker: genetic
Evars: 9, 0, 9, 9, 6, 5
Program 0:
t1 = x << nondet_1;
I = nondet_1 & nondet_3;

Fastest checker: explicit
Fails for (9, 1, 1, 8, 6, 4)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = 0x6 * y;
I = nondet_3 & y;

Fastest checker: explicit
Fails for (12, 1, 1, 8, 6, 4)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 12, 6
Program 0:
t1 = 0x6 * y;
I = 0x6 % x;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 7, 4)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = 0x6 * y;
I = y == 0x6;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 6, 5, 3, 14, 6
Program 0:
t1 = x == nondet_2;
t2 = y + x;
I = x s< nondet_3;

Fastest checker: explicit
Fails for (2, 1, 0, 0, 1, 6)

[]
Fastest checker: genetic
Evars: 0, 8, 6, 1, 9, 6
Program 0:
t1 = min(nondet_2, nondet_1);
I = x s<= t1;

Fastest checker: explicit
Fails for (0, 1, 1, 0, 1, 6)

[]
Fastest checker: genetic
Evars: 12, 5, 11, 1, 5, 7
Program 0:
I = 0x7 <= y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 10, 14, 5, 1, 4, 5
Program 0:
I = 0xd < nondet_2;

Fastest checker: explicit
Fails for (0, 14, 0, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 13, 6, 0, 13, 10, 3
Program 0:
t1 = y | nondet_3;
I = 0xc < nondet_3;

Fastest checker: explicit
Fails for (13, 14, 0, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 1, 10, 15, 12, 9, 1
Program 0:
I = x s< nondet_1;

Fastest checker: explicit
Fails for (0, 1, 2, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 7, 9, 10, 4, 14, 5
Program 0:
t1 = nondet_2 + nondet_0;
t2 = nondet_0 * nondet_1;
I = x / 0x8;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 8, 7)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = nondet_1 & nondet_3;
t2 = nondet_2 & nondet_0;
I = t1 & nondet_0;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 15, 7)

[]
Fastest checker: genetic
Evars: 5, 11, 0, 2, 11, 4
Program 0:
I = 0x5 s<= nondet_3;

Fastest checker: explicit
Fails for (5, 0, 1, 1, 15, 7)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
I = 0x6 s<= nondet_3;

Fastest checker: explicit
Fails for (6, 0, 1, 1, 15, 7)

[]
Fastest checker: genetic
Evars: 13, 14, 15, 8, 8, 6
Program 0:
t1 = x != y;
I = 0xc < nondet_1;

Fastest checker: explicit
Fails for (0, 0, 13, 1, 15, 7)

[]
Fastest checker: genetic
Evars: 13, 15, 9, 11, 15, 5
Program 0:
t1 = -nondet_3;
t2 = nondet_1 + nondet_1;
t3 = nondet_2 & nondet_0;
I = t2 & t3;

Fastest checker: explicit
Fails for (0, 2, 1, 2, 15, 7)

[]
Fastest checker: genetic
Evars: 13, 15, 15, 3, 7, 1
Program 0:
I = 0xe < nondet_1;

Fastest checker: explicit
Fails for (0, 0, 15, 2, 15, 7)

[]
Fastest checker: genetic
Evars: 7, 5, 9, 11, 15, 5
Program 0:
t1 = nondet_2 * y;
t2 = min(nondet_0, nondet_2);
t3 = nondet_1 + nondet_1;
t4 = nondet_2 * nondet_0;
I = t3 & t4;

Fastest checker: explicit
Fails for (0, 1, 15, 2, 15, 7)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = 0x6 * y;
t2 = nondet_0 + nondet_2;
t3 = nondet_1 ^ t2;
I = y == nondet_3;

Fastest checker: explicit
Fails for (7, 1, 15, 2, 15, 7)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = nondet_3 & nondet_1;
t2 = nondet_2 & nondet_0;
I = t1 & t2;

Fastest checker: explicit
Fails for (2, 2, 15, 2, 15, 7)

[]
Fastest checker: genetic
Evars: 7, 12, 14, 14, 6, 5
Program 0:
I = nondet_0 / 0xc;

Fastest checker: explicit
Fails for (0, 0, 0, 12, 15, 7)

[]
Fastest checker: genetic
Evars: 0, 9, 6, 10, 5, 5
Program 0:
t1 = nondet_3 | nondet_1;
I = 0x3 s< nondet_1;

Fastest checker: explicit
Fails for (0, 0, 4, 12, 15, 7)

[]
Fastest checker: genetic
Evars: 8, 8, 2, 4, 5, 5
Program 0:
t1 = nondet_2 < x;
I = 0x3 s<= nondet_0;

Fastest checker: cbmc
Fails for (0, 0, 0, 3, 4, 1)

[]
Fastest checker: genetic
Evars: 8, 8, 2, 4, 5, 6
Program 0:
t1 = nondet_2 < x;
I = 0x4 s<= nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 4, 1)

[]
Fastest checker: genetic
Evars: 8, 8, 8, 7, 14, 3
Program 0:
t1 = nondet_2 < x;
t2 = 0x3 s<= nondet_0;
I = 0x3 == y;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 0, 12, 12, 6, 9, 1
Program 0:
t1 = x - 0x4;
I = 0x4 s< nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 5, 1, 3)

[]
Fastest checker: genetic
Evars: 0, 11, 11, 10, 14, 1
Program 0:
t1 = nondet_3 * x;
t2 = min(t1, nondet_1);
t3 = t2 << x;
t4 = nondet_1 | nondet_0;
t5 = x * nondet_1;
I = 0xb == nondet_2;

Fastest checker: explicit
Fails for (0, 11, 0, 5, 1, 3)

[]
Fastest checker: genetic
Evars: 14, 2, 3, 14, 9, 2
Program 0:
t1 = 0xd % 0xd;
I = 0xd <= nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 13, 1, 3)

[]
Fastest checker: genetic
Evars: 4, 10, 15, 3, 2, 6
Program 0:
I = 0x4 == nondet_3;

Fastest checker: explicit
Fails for (4, 1, 0, 13, 1, 3)

[]
Fastest checker: genetic
Evars: 6, 2, 10, 3, 7, 6
Program 0:
t1 = 0x3 * y;
t2 = min(nondet_3, x);
I = t1 == nondet_2;

Fastest checker: explicit
Fails for (0, 9, 0, 13, 1, 3)

[]
Fastest checker: genetic
Evars: 9, 5, 10, 10, 3, 2
Program 0:
t1 = y * x;
I = nondet_1 == 0xa;

Fastest checker: explicit
Fails for (0, 1, 10, 13, 1, 3)

[]
Fastest checker: genetic
Evars: 15, 9, 9, 9, 14, 1
Program 0:
I = 0xd < nondet_3;

Fastest checker: explicit
Fails for (14, 1, 10, 13, 1, 3)

[]
Fastest checker: genetic
Evars: 14, 3, 6, 6, 6, 5
Program 0:
t1 = -nondet_1;
I = y == 0x5;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 5)

[]
Fastest checker: genetic
Evars: 12, 7, 8, 3, 15, 4
Program 0:
t1 = ~nondet_1;
I = 0x7 s<= nondet_2;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 1, 5)

[]
Fastest checker: genetic
Evars: 13, 6, 0, 7, 1, 7
Program 0:
I = 0x5 s< nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 6, 1, 5)

[]
Fastest checker: genetic
Evars: 0, 5, 11, 4, 7, 6
Program 0:
I = nondet_1 == 0xb;

Fastest checker: explicit
Fails for (0, 1, 11, 6, 1, 5)

[]
Fastest checker: genetic
Evars: 9, 0, 5, 11, 2, 3
Program 0:
I = 0x4 s< nondet_1;

Fastest checker: explicit
Fails for (0, 1, 5, 7, 1, 5)

[]
Fastest checker: genetic
Evars: 7, 3, 6, 15, 13, 7
Program 0:
I = nondet_1 == 0x6;

Fastest checker: explicit
Fails for (0, 1, 6, 7, 1, 5)

[]
Fastest checker: genetic
Evars: 15, 8, 5, 3, 2, 6
Program 0:
I = 0xf == nondet_3;

Fastest checker: explicit
Fails for (15, 1, 6, 7, 1, 5)

[]
Fastest checker: genetic
Evars: 3, 7, 12, 2, 8, 1
Program 0:
t1 = nondet_3 & nondet_1;
t2 = nondet_1 + 0xc;
I = 0xc == nondet_1;

Fastest checker: explicit
Fails for (0, 1, 12, 7, 1, 5)

[]
Fastest checker: genetic
Evars: 4, 1, 11, 14, 8, 6
Program 0:
t1 = y < x;
I = 0xe == nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 14, 1, 5)

[]
Fastest checker: genetic
Evars: 4, 1, 11, 14, 14, 6
Program 0:
t1 = y < x;
t2 = 0xe == nondet_0;
t3 = 0xe + t2;
t4 = 0xe + 0xe;
I = 0xe == x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 14, 5)

[]
Fastest checker: genetic
Evars: 11, 1, 10, 5, 7, 6
Program 0:
I = 0xb == nondet_3;

Fastest checker: explicit
Fails for (11, 0, 0, 0, 14, 5)

[]
Fastest checker: genetic
Evars: 1, 6, 9, 6, 1, 2
Program 0:
t1 = nondet_3 & y;
I = nondet_2 == 0x6;

Fastest checker: explicit
Fails for (0, 6, 0, 0, 14, 5)

[]
Fastest checker: genetic
Evars: 14, 1, 7, 14, 9, 2
Program 0:
t1 = nondet_0 s<= nondet_1;
t2 = nondet_1 < y;
t3 = -x;
t4 = 0x8 << nondet_2;
I = y s<= t3;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 9, 6)

[]
Fastest checker: genetic
Evars: 11, 12, 13, 3, 10, 2
Program 0:
t1 = nondet_0 | 0xc;
t2 = x % t1;
t3 = nondet_3 == nondet_1;
t4 = ~nondet_3;
I = nondet_2 == 0xc;

Fastest checker: explicit
Fails for (0, 12, 0, 0, 9, 6)

[]
Fastest checker: genetic
Evars: 6, 5, 7, 3, 7, 6
Program 0:
t1 = x >> nondet_1;
I = 0x6 s< nondet_1;

Fastest checker: explicit
Fails for (0, 0, 7, 1, 15, 6)

[]
Fastest checker: genetic
Evars: 0, 10, 7, 3, 15, 4
Program 0:
t1 = ~nondet_1;
I = 0xa == nondet_2;

Fastest checker: explicit
Fails for (0, 10, 7, 1, 15, 6)

[]
Fastest checker: genetic
Evars: 1, 3, 4, 3, 15, 4
Program 0:
t1 = ~nondet_1;
I = 0x3 == nondet_2;

Fastest checker: explicit
Fails for (0, 3, 8, 1, 15, 6)

[]
Fastest checker: genetic
Evars: 0, 4, 15, 5, 13, 7
Program 0:
t1 = nondet_3 == nondet_1;
I = 0xd == x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 13, 7)

[]
Fastest checker: genetic
Evars: 11, 14, 11, 4, 3, 7
Program 0:
t1 = nondet_3 == nondet_1;
t2 = x ^ nondet_0;
I = 0x3 == x;

Fastest checker: cbmc
Fails for (4, 1, 0, 0, 3, 4)

[]
Fastest checker: genetic
Evars: 0, 1, 3, 8, 8, 6
Program 0:
t1 = 0xd * nondet_1;
I = y s< t1;

Fastest checker: explicit
Fails for (0, 1, 3, 0, 3, 4)

[]
Fastest checker: genetic
Evars: 5, 4, 6, 14, 9, 6
Program 0:
t1 = 0x6 != nondet_2;
t2 = nondet_3 << nondet_1;
t3 = nondet_2 & nondet_0;
I = t2 & t3;

Fastest checker: explicit
Fails for (9, 1, 0, 1, 3, 4)

[]
Fastest checker: genetic
Evars: 2, 6, 7, 15, 1, 6
Program 0:
t1 = nondet_1 s<= nondet_1;
t2 = 0xf == nondet_0;
I = t2 % 0xf;

Fastest checker: explicit
Fails for (0, 1, 0, 15, 3, 4)

[]
Fastest checker: genetic
Evars: 7, 12, 0, 11, 3, 7
Program 0:
t1 = nondet_2 << nondet_0;
I = nondet_0 == 0xb;

Fastest checker: explicit
Fails for (0, 1, 0, 11, 4, 4)

[]
Fastest checker: genetic
Evars: 6, 3, 10, 3, 4, 7
Program 0:
t1 = 0x6 * y;
I = t1 == nondet_1;

Fastest checker: explicit
Fails for (0, 0, 8, 11, 4, 4)

[]
Fastest checker: genetic
Evars: 13, 7, 14, 9, 8, 6
Program 0:
I = nondet_1 == 0xe;

Fastest checker: explicit
Fails for (0, 1, 14, 11, 4, 4)

[]
Fastest checker: genetic
Evars: 10, 10, 15, 11, 2, 6
Program 0:
I = 0xa == nondet_3;

Fastest checker: explicit
Fails for (10, 1, 14, 11, 4, 4)

[]
Fastest checker: genetic
Evars: 14, 15, 14, 11, 9, 6
Program 0:
t1 = 0xf s< nondet_3;
t2 = nondet_3 | nondet_2;
t3 = nondet_1 ^ x;
I = 0xf == nondet_2;

Fastest checker: explicit
Fails for (0, 15, 14, 11, 4, 4)

[]
Fastest checker: genetic
Evars: 3, 9, 14, 6, 5, 5
Program 0:
t1 = nondet_0 >> 0x5;
t2 = t1 != 0x5;
I = 0x5 == x;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 5, 4)

[]
Fastest checker: genetic
Evars: 8, 13, 11, 5, 12, 4
Program 0:
I = nondet_2 == 0xd;

Fastest checker: explicit
Fails for (0, 13, 0, 0, 5, 4)

[]
Fastest checker: genetic
Evars: 10, 7, 2, 9, 10, 5
Program 0:
t1 = 0x9 % y;
t2 = nondet_0 s<= nondet_2;
t3 = -t1;
t4 = nondet_1 == x;
I = 0x9 == nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 9, 5, 4)

[]
Fastest checker: genetic
Evars: 13, 11, 8, 15, 11, 5
Program 0:
I = 0xb == x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 11, 4)

[]
Fastest checker: genetic
Evars: 0, 10, 3, 10, 5, 3
Program 0:
t1 = max(y, nondet_3);
t2 = -x;
I = nondet_0 == 0xa;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 15, 4)

[]
Fastest checker: genetic
Evars: 10, 3, 8, 2, 11, 1
Program 0:
t1 = x s<= nondet_2;
I = y == t1;

Fastest checker: cbmc
Fails for (0, 3, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 3, 13, 14, 11, 12, 5
Program 0:
I = nondet_3 == 0x3;

Fastest checker: explicit
Fails for (3, 0, 1, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 10, 9, 6, 2, 15, 2
Program 0:
t1 = min(nondet_3, x);
I = 0xa == t1;

Fastest checker: explicit
Fails for (10, 0, 0, 0, 10, 1)

[]
Fastest checker: genetic
Evars: 1, 9, 8, 14, 12, 3
Program 0:
t1 = nondet_2 - nondet_3;
t2 = -x;
I = 0xc == x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 12, 1)

[]
Fastest checker: genetic
Evars: 8, 5, 14, 13, 2, 5
Program 0:
t1 = nondet_1 < nondet_2;
t2 = nondet_0 >>> nondet_0;
t3 = y == nondet_2;
I = nondet_3 * t3;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 12, 1)

[]
Fastest checker: genetic
Evars: 3, 10, 4, 11, 15, 3
Program 0:
t1 = nondet_0 < nondet_1;
t2 = -y;
t3 = nondet_2 * t2;
t4 = nondet_2 + y;
I = t4 == 0xd;

Fastest checker: explicit
Fails for (0, 12, 0, 0, 12, 1)

[]
Fastest checker: genetic
Evars: 8, 15, 8, 9, 7, 7
Program 0:
t1 = y << nondet_2;
t2 = min(nondet_2, nondet_0);
I = t1 & t2;

Fastest checker: explicit
Fails for (0, 4, 0, 1, 15, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 1, 10, 2, 1
Program 0:
t1 = nondet_2 < y;
t2 = nondet_1 == y;
t3 = y s< nondet_2;
I = nondet_3 & t3;

Fastest checker: explicit
Fails for (1, 4, 0, 1, 15, 1)

[]
Fastest checker: genetic
Evars: 1, 10, 11, 4, 15, 3
Program 0:
t1 = 0x4 == nondet_0;
I = t1 & nondet_3;

Fastest checker: explicit
Fails for (1, 0, 0, 4, 15, 1)

[]







Timeout
Perf counters:
{'genetic': 93, 'cbmc': 3, 'explicit': 90, 'timeout': 1, 'iterations': 94}
Perf timers:
verify: 20.69s
checker: 119.68s
gcc: 0.46s
_: 120.00s
synth: 99.22s
