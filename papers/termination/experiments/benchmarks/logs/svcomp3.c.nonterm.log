Using seed: 1337
[]
Fastest checker: genetic
Evars: 7, 12, 3, 1, 4
Program 0:
t1 = min(nondet_0, nondet_1);
I = 0x0 < nondet_0;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 15, 14, 1, 2, 7
Program 0:
t1 = x s< z;
t2 = t1 >>> x;
I = 0xe & y;

Fastest checker: explicit
Fails for (0, 0, 1, 2, 3)

[]
Fastest checker: genetic
Evars: 4, 14, 6, 5, 2
Program 0:
t1 = nondet_0 < x;
I = nondet_1 >>> 0x5;

Fastest checker: explicit
Fails for (8, 0, 1, 2, 3)

[]
Fastest checker: genetic
Evars: 11, 9, 2, 1, 6
Program 0:
t1 = y s<= z;
t2 = min(0x5, t1);
I = t2 & nondet_1;

Fastest checker: explicit
Fails for (9, 0, 1, 2, 3)

[]
Fastest checker: genetic
Evars: 2, 3, 2, 7, 1
Program 0:
I = z < y;

Fastest checker: explicit
Fails for (0, 0, 1, 4, 3)

[]
Fastest checker: genetic
Evars: 14, 6, 1, 1, 5
Program 0:
I = nondet_0 * nondet_1;

Fastest checker: explicit
Fails for (1, 1, 1, 4, 3)

[]
Fastest checker: genetic
Evars: 8, 3, 5, 2, 5
Program 0:
t1 = y | 0x2;
t2 = 0x2 + y;
I = nondet_0 >> z;

Fastest checker: explicit
Fails for (0, 8, 1, 4, 3)

[]
Fastest checker: genetic
Evars: 15, 3, 2, 3, 6
Program 0:
I = x >>> 0x5;

Fastest checker: explicit
Fails for (0, 0, 2, 4, 3)

[]
Fastest checker: genetic
Evars: 4, 15, 2, 4, 1
Program 0:
t1 = x s<= x;
t2 = z ==> t1;
I = 0x5 >>> z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 8, 7, 2, 1
Program 0:
I = z <= x;

Fastest checker: explicit
Fails for (0, 0, 4, 1, 4)

[]
Fastest checker: genetic
Evars: 6, 0, 4, 6, 5
Program 0:
t1 = z - nondet_0;
I = y == 0x6;

Fastest checker: explicit
Fails for (0, 0, 1, 6, 4)

[]
Fastest checker: genetic
Evars: 4, 8, 3, 5, 1
Program 0:
I = z s< 0x3;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 2, 5, 1, 4
Program 0:
t1 = nondet_0 s<= y;
t2 = nondet_1 s< y;
I = nondet_0 % x;

Fastest checker: explicit
Fails for (0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 9, 5, 1, 4
Program 0:
t1 = min(nondet_0, z);
I = t1 >>> z;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 5, 9, 4, 1, 4
Program 0:
I = 0x4 s<= nondet_1;

Fastest checker: explicit
Fails for (4, 1, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 12, 11, 3, 1, 4
Program 0:
I = 0x8 < nondet_0;

Fastest checker: explicit
Fails for (0, 9, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 2, 3, 6, 3
Program 0:
t1 = nondet_0 % x;
t2 = y <= nondet_1;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 1, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 5, 8, 3, 7, 7
Program 0:
t1 = 0x6 + nondet_0;
t2 = nondet_0 + z;
I = t2 / t1;

Fastest checker: explicit
Fails for (0, 10, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 15, 13, 3, 5, 5
Program 0:
t1 = y ==> nondet_0;
I = nondet_0 / 0xb;

Fastest checker: explicit
Fails for (0, 11, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 15, 9, 3, 1, 1
Program 0:
I = 0xb < nondet_1;

Fastest checker: explicit
Fails for (12, 11, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 5, 13, 1, 1, 6
Program 0:
t1 = nondet_0 <= z;
t2 = 0x5 + t1;
I = t2 s<= nondet_1;

Fastest checker: explicit
Fails for (5, 12, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 1, 1, 1, 6
Program 0:
t1 = 0x3 + z;
I = t1 s<= nondet_1;

Fastest checker: explicit
Fails for (7, 12, 2, 1, 4)

[]
Fastest checker: genetic
Evars: 10, 9, 4, 1, 6
Program 0:
t1 = 0x6 s<= z;
I = min(t1, nondet_1);

Fastest checker: explicit
Fails for (1, 0, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 1, 7, 2, 4, 1
Program 0:
t1 = ~nondet_1;
I = y s< nondet_0;

Fastest checker: explicit
Fails for (0, 3, 1, 2, 6)

[]
Fastest checker: genetic
Evars: 5, 7, 4, 7, 4
Program 0:
t1 = z % 0x7;
I = 0x7 <= y;

Fastest checker: explicit
Fails for (0, 0, 1, 7, 6)

[]
Fastest checker: genetic
Evars: 2, 1, 5, 4, 3
Program 0:
t1 = z s<= nondet_1;
t2 = z == 0x4;
I = 0x4 < x;

Fastest checker: explicit
Fails for (0, 0, 5, 7, 6)

[]
Fastest checker: genetic
Evars: 5, 9, 4, 3, 1
Program 0:
t1 = y s<= nondet_1;
t2 = nondet_0 < t1;
I = t1 % y;

Fastest checker: explicit
Fails for (7, 0, 7, 7, 6)

[]
Fastest checker: genetic
Evars: 0, 6, 2, 5, 4
Program 0:
t1 = y >> nondet_0;
I = z s< nondet_0;

Fastest checker: explicit
Fails for (0, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 11, 4, 6, 4
Program 0:
t1 = y << nondet_1;
t2 = nondet_0 ? y : y;
I = 0x8 < t1;

Fastest checker: explicit
Fails for (2, 0, 1, 3, 1)

[]
Fastest checker: genetic
Evars: 6, 9, 4, 6, 2
Program 0:
t1 = y << nondet_1;
t2 = nondet_0 ? y : y;
t3 = t2 < t1;
I = t3 >>> x;

Fastest checker: explicit
Fails for (1, 0, 4, 3, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 5, 1, 1
Program 0:
t1 = z >> 0xc;
I = 0xc < nondet_1;

Fastest checker: explicit
Fails for (13, 0, 4, 3, 1)

[]
Fastest checker: genetic
Evars: 9, 6, 7, 4, 6
Program 0:
t1 = nondet_1 & nondet_0;
I = nondet_0 == 0x6;

Fastest checker: explicit
Fails for (0, 6, 4, 3, 1)

[]
Fastest checker: genetic
Evars: 9, 7, 3, 4, 6
Program 0:
t1 = nondet_1 & nondet_0;
I = nondet_0 == 0x7;

Fastest checker: explicit
Fails for (0, 7, 4, 3, 1)

[]
Fastest checker: genetic
Evars: 7, 15, 1, 4, 6
Program 0:
t1 = min(nondet_0, 0xe);
I = 0xe <= nondet_0;

Fastest checker: explicit
Fails for (0, 14, 4, 3, 1)

[]
Fastest checker: genetic
Evars: 11, 12, 2, 3, 1
Program 0:
t1 = z % z;
t2 = z - 0xb;
t3 = ~nondet_0;
t4 = z + 0xb;
I = t3 == y;

Fastest checker: explicit
Fails for (0, 12, 5, 3, 1)

[]
Fastest checker: genetic
Evars: 15, 2, 5, 1, 1
Program 0:
t1 = z >> 0xe;
I = 0xe < nondet_1;

Fastest checker: explicit
Fails for (15, 12, 5, 3, 1)

[]
Fastest checker: genetic
Evars: 12, 2, 6, 5, 7
Program 0:
t1 = y ? nondet_1 : z;
I = 0xc % z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 5)

[]
Fastest checker: genetic
Evars: 4, 10, 6, 2, 1
Program 0:
t1 = nondet_1 % x;
t2 = x ==> t1;
I = t1 >>> t2;

Fastest checker: explicit
Fails for (2, 0, 3, 1, 5)

[]
Fastest checker: genetic
Evars: 6, 14, 1, 4, 1
Program 0:
t1 = y / z;
t2 = y != nondet_1;
t3 = y & nondet_0;
t4 = t2 % 0x7;
I = t3 >>> y;

Fastest checker: explicit
Fails for (0, 4, 1, 4, 5)

[]
Fastest checker: genetic
Evars: 6, 14, 1, 4, 1
Program 0:
t1 = y & nondet_1;
t2 = z >> 0x7;
I = t1 >>> y;

Fastest checker: explicit
Fails for (12, 4, 1, 4, 5)

[]
Fastest checker: genetic
Evars: 7, 2, 3, 3, 1
Program 0:
t1 = max(z, 0x3);
t2 = 0x3 == x;
t3 = y s< y;
I = t2 % y;

Fastest checker: explicit
Fails for (0, 0, 3, 4, 5)

[]
Fastest checker: genetic
Evars: 14, 9, 6, 3, 1
Program 0:
t1 = max(z, z);
I = 0xe == nondet_1;

Fastest checker: explicit
Fails for (14, 0, 3, 4, 5)

[]
Fastest checker: genetic
Evars: 4, 2, 2, 4, 2
Program 0:
t1 = 0x6 * nondet_1;
t2 = z <= x;
t3 = x <= t2;
I = t2 >> y;

Fastest checker: explicit
Fails for (0, 0, 5, 4, 5)

[]
Fastest checker: genetic
Evars: 12, 5, 7, 4, 6
Program 0:
I = nondet_0 == 0x5;

Fastest checker: explicit
Fails for (0, 5, 1, 5, 5)

[]
Fastest checker: genetic
Evars: 15, 15, 4, 3, 1
Program 0:
t1 = nondet_0 == 0xf;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 15, 1, 5, 5)

[]
Fastest checker: genetic
Evars: 11, 10, 6, 1, 7
Program 0:
t1 = nondet_0 < nondet_1;
t2 = x * x;
I = 0x7 s<= z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 6, 3, 7, 3, 3
Program 0:
t1 = -nondet_1;
I = nondet_1 == 0x6;

Fastest checker: explicit
Fails for (6, 0, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 2, 9, 3, 4, 2
Program 0:
I = z == 0x2;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 5, 4, 3, 1
Program 0:
t1 = nondet_0 == 0x5;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 5, 1, 2, 2)

[]
Fastest checker: genetic
Evars: 10, 6, 2, 7, 4
Program 0:
t1 = 0xa s<= y;
t2 = max(nondet_0, 0xa);
I = nondet_1 == t2;

Fastest checker: explicit
Fails for (10, 5, 1, 2, 2)

[]
Fastest checker: genetic
Evars: 4, 4, 7, 4, 3
Program 0:
t1 = 0x7 << y;
I = x == t1;

Fastest checker: explicit
Fails for (0, 0, 7, 4, 2)

[]
Fastest checker: genetic
Evars: 7, 7, 5, 7, 1
Program 0:
t1 = nondet_0 == 0x7;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 7, 1, 5, 2)

[]
Fastest checker: genetic
Evars: 3, 2, 3, 1, 1
Program 0:
t1 = nondet_0 % x;
t2 = z != 0x9;
I = t1 >>> y;

Fastest checker: explicit
Fails for (0, 2, 3, 5, 2)

[]
Fastest checker: genetic
Evars: 10, 10, 6, 2, 1
Program 0:
t1 = 0x6 <= z;
t2 = z - t1;
t3 = ~nondet_1;
t4 = 0x6 == x;
t5 = z < y;
I = t4 % x;

Fastest checker: explicit
Fails for (0, 0, 6, 5, 2)

[]
Fastest checker: genetic
Evars: 3, 9, 2, 4, 6
Program 0:
I = nondet_1 == 0x3;

Fastest checker: explicit
Fails for (3, 0, 6, 5, 2)

[]
Fastest checker: genetic
Evars: 7, 0, 4, 3, 6
Program 0:
t1 = z * y;
t2 = nondet_0 <= t1;
I = t1 < y;

Fastest checker: explicit
Fails for (0, 0, 1, 6, 3)

[]
Fastest checker: genetic
Evars: 5, 4, 4, 3, 1
Program 0:
t1 = y s< 0xe;
t2 = nondet_1 + 0xe;
t3 = nondet_0 >> t2;
I = t2 == y;

Fastest checker: explicit
Fails for (8, 0, 1, 6, 3)

[]
Fastest checker: genetic
Evars: 5, 9, 4, 3, 1
Program 0:
t1 = y s< nondet_1;
t2 = nondet_0 < t1;
I = t1 % y;

Fastest checker: explicit
Fails for (7, 0, 6, 6, 3)

[]
Fastest checker: genetic
Evars: 12, 12, 4, 4, 4
Program 0:
t1 = max(y, nondet_1);
t2 = -nondet_0;
t3 = nondet_0 | 0xb;
I = t2 == y;

Fastest checker: explicit
Fails for (0, 10, 6, 6, 3)

[]
Fastest checker: genetic
Evars: 6, 13, 7, 4, 5
Program 0:
I = nondet_0 == 0xd;

Fastest checker: explicit
Fails for (0, 13, 6, 6, 3)

[]
Fastest checker: genetic
Evars: 6, 2, 2, 4, 5
Program 0:
t1 = max(0xc, x);
t2 = nondet_1 - x;
t3 = t2 ^ y;
I = t2 == y;

Fastest checker: explicit
Fails for (12, 13, 6, 6, 3)

[]
Fastest checker: genetic
Evars: 3, 6, 7, 4, 6
Program 0:
t1 = nondet_0 == z;
I = t1 * nondet_1;

Fastest checker: explicit
Fails for (1, 3, 7, 6, 3)

[]
Fastest checker: genetic
Evars: 15, 5, 7, 4, 2
Program 0:
t1 = x / y;
t2 = z s< nondet_0;
t3 = y s< t2;
I = t2 >> y;

Fastest checker: explicit
Fails for (0, 5, 1, 4, 4)

[]
Fastest checker: genetic
Evars: 9, 3, 6, 7, 6
Program 0:
t1 = nondet_1 % x;
t2 = x s<= nondet_0;
I = t1 >>> nondet_1;

Fastest checker: explicit
Fails for (4, 0, 3, 4, 4)

[]
Fastest checker: genetic
Evars: 3, 6, 7, 4, 5
Program 0:
t1 = min(x, y);
t2 = 0x4 == t1;
t3 = x << nondet_0;
I = t2 >>> t3;

Fastest checker: explicit
Fails for (0, 0, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 5, 12, 2, 4, 5
Program 0:
t1 = z s<= nondet_1;
t2 = 0xc | x;
I = t1 >> y;

Fastest checker: explicit
Fails for (4, 0, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 12, 11, 7, 3, 1
Program 0:
t1 = ~nondet_1;
t2 = nondet_0 == nondet_0;
I = t1 == y;

Fastest checker: explicit
Fails for (11, 0, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 4, 2, 2, 4, 5
Program 0:
t1 = nondet_1 - x;
t2 = t1 ^ y;
I = t1 == 0x2;

Fastest checker: explicit
Fails for (6, 1, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 15, 15, 4, 3, 6
Program 0:
t1 = x % x;
t2 = nondet_0 | 0xa;
I = nondet_1 == t2;

Fastest checker: explicit
Fails for (11, 1, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 6, 6, 2, 4, 5
Program 0:
t1 = nondet_1 - x;
t2 = t1 ^ y;
I = t1 == 0x4;

Fastest checker: explicit
Fails for (8, 2, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 4, 6, 4, 3, 1
Program 0:
t1 = nondet_0 == 0x6;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 6, 1, 5, 4)

[]
Fastest checker: genetic
Evars: 14, 14, 4, 3, 1
Program 0:
t1 = nondet_0 == 0xe;
I = min(nondet_1, t1);

Fastest checker: explicit
Fails for (1, 14, 1, 5, 4)

[]
Fastest checker: genetic
Evars: 0, 13, 5, 3, 5
Program 0:
t1 = nondet_0 == 0xd;
t2 = z << 0xd;
I = t1 & y;

Fastest checker: explicit
Fails for (0, 13, 2, 5, 4)

[]
Fastest checker: genetic
Evars: 12, 11, 4, 6, 4
Program 0:
t1 = min(y, nondet_1);
t2 = -nondet_1;
t3 = z ^ nondet_0;
I = t2 == x;

Fastest checker: explicit
Fails for (14, 13, 2, 5, 4)

[]
Fastest checker: genetic
Evars: 3, 7, 2, 4, 5
Program 0:
t1 = z < nondet_0;
t2 = nondet_1 & t1;
t3 = min(z, z);
I = t2 >> y;

Fastest checker: explicit
Fails for (1, 6, 1, 4, 5)

[]
Fastest checker: genetic
Evars: 10, 0, 3, 2, 7
Program 0:
t1 = nondet_1 ? 0xa : x;
t2 = 0xa & x;
t3 = x s<= t1;
I = t2 == y;

Fastest checker: explicit
Fails for (0, 0, 2, 2, 6)

[]







Timeout
Perf counters:
{'genetic': 76, 'explicit': 76, 'timeout': 1, 'iterations': 77}
Perf timers:
verify: 2.00s
checker: 119.79s
gcc: 0.45s
_: 120.00s
synth: 117.96s
