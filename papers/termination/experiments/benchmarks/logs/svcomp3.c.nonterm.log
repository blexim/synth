Using seed: 1337
[]
Fastest checker: genetic
Evars: 7, 12, 3, 1, 4
Program 0:
t1 = min(nondet_0, nondet_1);
I = 0x0 < nondet_0;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 0, 5, 1, 4
Program 0:
t1 = nondet_1 >> nondet_0;
I = min(nondet_1, 0xd);

Fastest checker: explicit
Fails for (1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 10, 3, 5, 6
Program 0:
I = nondet_0 >> x;

Fastest checker: explicit
Fails for (0, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 1, 7, 4, 1
Program 0:
t1 = 0xf * x;
t2 = x <= z;
t3 = nondet_1 & t1;
I = nondet_1 >> t1;

Fastest checker: explicit
Fails for (8, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 10, 2, 4, 6
Program 0:
I = x - z;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 10, 7, 7, 2
Program 0:
t1 = x ^ z;
t2 = ~x;
t3 = nondet_0 & x;
I = t3 ? nondet_1 : t3;

Fastest checker: explicit
Fails for (1, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 4, 5, 5, 1
Program 0:
I = y / 0x5;

Fastest checker: explicit
Fails for (0, 0, 1, 5, 1)

[]
Fastest checker: genetic
Evars: 4, 12, 4, 1, 3
Program 0:
t1 = ((sword_t) z) >> ((sword_t) 0x9);
t2 = 0x9 != 0x9;
t3 = t1 ? z : y;
t4 = nondet_1 << t3;
I = y % z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 13, 14, 2, 3, 6
Program 0:
t1 = ((sword_t) nondet_1) < ((sword_t) nondet_0);
t2 = nondet_0 + z;
I = ((sword_t) z) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 3, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 8, 4, 4, 4
Program 0:
I = nondet_1 % x;

Fastest checker: explicit
Fails for (1, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 3, 2, 6, 6
Program 0:
t1 = nondet_1 % z;
I = 0x0 ^ t1;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 14, 11, 2, 1, 6
Program 0:
t1 = nondet_0 & x;
t2 = t1 - nondet_1;
t3 = y % x;
t4 = ((sword_t) nondet_1) < ((sword_t) t3);
I = ((sword_t) t1) >> ((sword_t) y);

Fastest checker: explicit
Fails for (0, 2, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 4, 6
Program 0:
t1 = ((sword_t) x) >> ((sword_t) 0xc);
t2 = 0xc * 0xc;
t3 = z + y;
t4 = t3 + z;
t5 = t4 / 0xc;
I = !t4 || t2;

Fastest checker: explicit
Fails for (0, 0, 1, 6, 5)

[]
Fastest checker: genetic
Evars: 11, 13, 4, 4, 7
Program 0:
t1 = ~z;
I = ((sword_t) z) >> ((sword_t) t1);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 11, 13, 6, 2, 7
Program 0:
I = nondet_1 % y;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 2, 12, 7, 4, 1
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
t3 = nondet_1 + y;
t4 = 0x5 + 0x5;
I = nondet_0 % x;

Fastest checker: explicit
Fails for (0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 13, 4, 7, 2
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
t3 = 0x5 + 0x5;
t4 = x + y;
I = ((sword_t) nondet_0) >> ((sword_t) nondet_0);

Fastest checker: explicit
Fails for (0, 4, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 5, 1, 3, 4
Program 0:
t1 = nondet_0 & nondet_0;
t2 = ((sword_t) t1) >> ((sword_t) 0x2);
t3 = nondet_0 % z;
I = -t3;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 4, 9, 4, 1, 6
Program 0:
t1 = 0xa <= nondet_0;
t2 = 0xa | t1;
t3 = !0xa || t1;
I = x >> 0xa;

Fastest checker: explicit
Fails for (0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 14, 5, 2, 4
Program 0:
t1 = x < nondet_1;
t2 = y + y;
t3 = x ? z : 0x9;
t4 = nondet_0 * t1;
I = -t4;

Fastest checker: explicit
Fails for (2, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 9, 1, 5, 6
Program 0:
t1 = 0x1 & nondet_0;
t2 = z + y;
t3 = nondet_0 % y;
I = t1 * t3;

Fastest checker: explicit
Fails for (0, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 15, 4, 6, 4, 7
Program 0:
t1 = nondet_0 + z;
t2 = z < nondet_0;
t3 = z << x;
I = ((sword_t) 0x5) <= ((sword_t) x);

Fastest checker: explicit
Fails for (0, 0, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 6, 6, 7
Program 0:
t1 = x <= nondet_1;
I = 0x5 < z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 0, 2, 4, 4, 7
Program 0:
t1 = x <= nondet_1;
I = 0x6 < z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 9, 14, 3, 7, 7
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) z);
I = t1 & nondet_1;

Fastest checker: explicit
Fails for (1, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 6, 2, 6, 2
Program 0:
t1 = z ^ nondet_0;
t2 = ((sword_t) nondet_1) <= ((sword_t) t1);
t3 = 0xf + t2;
t4 = nondet_0 + x;
t5 = t4 - y;
I = ((sword_t) t4) < ((sword_t) t5);

Fastest checker: explicit
Fails for (0, 7, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 14, 2, 1, 4
Program 0:
t1 = z - nondet_0;
t2 = ((sword_t) nondet_0) <= ((sword_t) 0xf);
I = 0xf ? t2 : nondet_1;

Fastest checker: explicit
Fails for (0, 8, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 4, 5, 3
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
I = t1 >> y;

Fastest checker: explicit
Fails for (1, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 5, 13, 7, 5, 5
Program 0:
t1 = z <= nondet_0;
t2 = nondet_1 >> y;
t3 = t2 + z;
t4 = t1 * x;
I = t2 % x;

Fastest checker: explicit
Fails for (2, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 14, 2, 5, 4
Program 0:
t1 = !nondet_1 || z;
t2 = y ^ z;
t3 = t1 != nondet_0;
I = t2 == t1;

Fastest checker: explicit
Fails for (0, 0, 1, 3, 2)

[]
Fastest checker: genetic
Evars: 15, 4, 7, 4, 7
Program 0:
t1 = ((sword_t) y) < ((sword_t) 0x6);
t2 = ((sword_t) z) >> ((sword_t) 0x6);
t3 = z <= t1;
I = ((sword_t) 0x6) <= ((sword_t) x);

Fastest checker: explicit
Fails for (0, 0, 6, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 12, 7, 3, 2
Program 0:
t1 = min(y, nondet_1);
t2 = y / y;
I = ((sword_t) t1) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (2, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 0, 4, 2, 4, 2
Program 0:
t1 = nondet_0 & y;
I = t1 >> t1;

Fastest checker: explicit
Fails for (0, 4, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 1, 14, 5, 5, 2
Program 0:
t1 = nondet_0 ^ z;
t2 = ~y;
I = t1 / t2;

Fastest checker: explicit
Fails for (0, 14, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 14, 5, 2, 1
Program 0:
t1 = 0x9 * 0x9;
t2 = -t1;
t3 = x + nondet_0;
t4 = t3 + y;
t5 = t2 - nondet_1;
I = t3 < x;

Fastest checker: explicit
Fails for (0, 15, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 7, 3, 3, 2
Program 0:
t1 = x % z;
t2 = y % x;
t3 = x + x;
t4 = nondet_1 + z;
t5 = !z || t4;
t6 = t4 * x;
I = ((sword_t) t6) < ((sword_t) t4);

Fastest checker: explicit
Fails for (3, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 3, 7, 1, 3
Program 0:
t1 = min(x, z);
t2 = min(x, nondet_0);
t3 = 0x1 * t1;
I = t3 - 0x1;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 2)

[]
Fastest checker: genetic
Evars: 13, 12, 3, 3, 5
Program 0:
t1 = ~x;
t2 = y - z;
t3 = min(x, nondet_1);
I = nondet_1 / t1;

Fastest checker: explicit
Fails for (14, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 3, 7, 6
Program 0:
t1 = 0x3 ^ y;
t2 = x | z;
I = 0x3 == x;

Fastest checker: explicit
Fails for (0, 0, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 3, 7, 3
Program 0:
t1 = 0x3 ^ y;
t2 = -y;
t3 = y >> nondet_0;
t4 = max(x, nondet_0);
t5 = nondet_0 + 0x3;
t6 = x + t4;
I = t6 % x;

Fastest checker: explicit
Fails for (0, 3, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 3, 7, 3
Program 0:
t1 = 0x7 ^ x;
t2 = y >> y;
t3 = z << nondet_1;
t4 = nondet_0 != x;
t5 = 0x7 + y;
I = y / 0x7;

Fastest checker: explicit
Fails for (0, 0, 1, 7, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 3, 4, 4
Program 0:
t1 = nondet_1 % y;
t2 = 0x8 ? 0x8 : z;
I = t2 << z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 9, 12, 7, 2, 6
Program 0:
t1 = z == y;
I = nondet_1 == 0x9;

Fastest checker: explicit
Fails for (9, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 15, 7, 7, 2
Program 0:
t1 = 0x5 >> nondet_1;
I = ((sword_t) 0x5) <= ((sword_t) nondet_1);

Fastest checker: explicit
Fails for (5, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 12, 3, 1, 7
Program 0:
t1 = 0xa < nondet_0;
t2 = 0xa * z;
I = nondet_1 & t1;

Fastest checker: explicit
Fails for (1, 11, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 12, 3, 2, 5
Program 0:
t1 = 0xa < nondet_0;
t2 = 0xa * z;
I = t1 % y;

Fastest checker: explicit
Fails for (0, 11, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 5, 10, 3, 7, 6
Program 0:
t1 = min(y, nondet_1);
t2 = nondet_1 + x;
t3 = t1 ^ t2;
I = ((sword_t) t1) >> ((sword_t) t1);

Fastest checker: explicit
Fails for (4, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 6, 12, 2, 2, 5
Program 0:
t1 = -nondet_1;
t2 = nondet_0 <= z;
t3 = 0xc <= 0xc;
t4 = y - x;
t5 = min(nondet_1, nondet_0);
t6 = t5 >> z;
t7 = ~0xc;
t8 = ~0xc;
I = min(t8, t6);

Fastest checker: explicit
Fails for (2, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 8, 4, 1, 7
Program 0:
t1 = 0x2 < z;
t2 = nondet_1 | nondet_1;
t3 = nondet_0 >> t2;
t4 = 0x2 >> t3;
I = nondet_1 * t1;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 6, 3, 2, 3, 2
Program 0:
I = ((sword_t) 0x5) < ((sword_t) nondet_1);

Fastest checker: explicit
Fails for (6, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 15, 5, 7, 5
Program 0:
t1 = nondet_1 % z;
t2 = z >> z;
t3 = nondet_1 - 0x7;
t4 = t2 & nondet_1;
I = z * t4;

Fastest checker: explicit
Fails for (2, 0, 1, 1, 5)

[]
Fastest checker: genetic
Evars: 10, 2, 3, 7, 4
Program 0:
t1 = ((sword_t) nondet_1) >> ((sword_t) nondet_0);
t2 = ((sword_t) y) <= ((sword_t) y);
t3 = nondet_1 / 0x6;
t4 = x % 0x6;
t5 = nondet_1 % x;
I = min(t5, nondet_0);

Fastest checker: explicit
Fails for (1, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 11, 7, 5, 3
Program 0:
t1 = ((sword_t) nondet_1) >> ((sword_t) nondet_0);
t2 = ((sword_t) y) <= ((sword_t) y);
t3 = min(x, z);
t4 = t3 == y;
I = nondet_1 % t3;

Fastest checker: explicit
Fails for (1, 0, 2, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 2, 7, 3, 4
Program 0:
t1 = z ? x : z;
t2 = nondet_0 % z;
t3 = min(z, x);
I = nondet_0 % t3;

Fastest checker: explicit
Fails for (0, 1, 2, 1, 2)

[]
Fastest checker: genetic
Evars: 15, 15, 7, 4, 1
Program 0:
t1 = z ? 0x8 : nondet_1;
t2 = y * x;
t3 = -z;
t4 = t3 >> z;
I = ((sword_t) t2) < ((sword_t) x);

Fastest checker: explicit
Fails for (0, 0, 4, 2, 1)

[]
Fastest checker: genetic
Evars: 11, 10, 4, 7, 3
Program 0:
t1 = -x;
t2 = nondet_0 % z;
t3 = nondet_0 < nondet_0;
t4 = x >> t3;
I = t2 * nondet_1;

Fastest checker: explicit
Fails for (1, 1, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 2, 2, 2, 3, 2
Program 0:
t1 = nondet_1 % y;
I = t1 & nondet_0;

Fastest checker: explicit
Fails for (1, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 7, 8, 6, 3, 5
Program 0:
t1 = nondet_1 + y;
t2 = x / 0x5;
t3 = min(y, nondet_0);
t4 = max(y, z);
t5 = ((sword_t) y) < ((sword_t) 0x5);
I = nondet_1 & t2;

Fastest checker: explicit
Fails for (1, 0, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 13, 6, 7, 3
Program 0:
t1 = nondet_1 + y;
I = nondet_1 / t1;

Fastest checker: explicit
Fails for (15, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 15, 5, 4, 6
Program 0:
t1 = y >> y;
t2 = min(z, t1);
t3 = y & x;
t4 = nondet_1 & t2;
I = ((sword_t) t3) >> ((sword_t) y);

Fastest checker: explicit
Fails for (0, 0, 4, 4, 1)

[]
Fastest checker: genetic
Evars: 0, 15, 5, 4, 2
Program 0:
t1 = y >> y;
t2 = min(z, t1);
I = t2 & nondet_0;

Fastest checker: explicit
Fails for (0, 1, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 7, 4, 2
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
I = ((sword_t) t1) >> ((sword_t) 0x5);

Fastest checker: explicit
Fails for (2, 0, 1, 3, 1)

[]
Fastest checker: genetic
Evars: 9, 11, 5, 3, 7
Program 0:
t1 = nondet_1 * z;
t2 = -0x6;
I = t1 % z;

Fastest checker: explicit
Fails for (6, 0, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 1, 8, 7, 6, 4
Program 0:
I = 0x6 < x;

Fastest checker: explicit
Fails for (0, 0, 7, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 8, 5, 3, 7
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
I = t1 % x;

Fastest checker: explicit
Fails for (1, 0, 2, 2, 1)

[]
Fastest checker: genetic
Evars: 1, 14, 4, 7, 7
Program 0:
t1 = ((sword_t) x) <= ((sword_t) x);
t2 = min(nondet_0, x);
t3 = t2 >> x;
I = min(t3, t2);

Fastest checker: explicit
Fails for (0, 1, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 10, 4, 7, 2
Program 0:
t1 = 0x5 ? 0x5 : y;
t2 = min(t1, nondet_0);
t3 = t2 < x;
t4 = nondet_1 % x;
I = z < t4;

Fastest checker: explicit
Fails for (2, 0, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 4, 4, 1, 3
Program 0:
t1 = 0xf & x;
t2 = t1 % t1;
t3 = t1 < 0xf;
t4 = nondet_0 < nondet_1;
I = ((sword_t) t4) >> ((sword_t) x);

Fastest checker: explicit
Fails for (1, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 7, 4, 1, 3
Program 0:
t1 = 0xc & x;
I = t1 % z;

Fastest checker: explicit
Fails for (0, 0, 4, 1, 3)

[]
Fastest checker: genetic
Evars: 12, 0, 6, 5, 5
Program 0:
t1 = nondet_0 | z;
I = 0xc == nondet_1;

Fastest checker: explicit
Fails for (12, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 0, 6, 7, 5
Program 0:
t1 = nondet_1 % y;
t2 = 0x5 ? 0x5 : z;
t3 = ~x;
I = t2 == t1;

Fastest checker: explicit
Fails for (5, 0, 1, 6, 1)

[]
Fastest checker: genetic
Evars: 13, 15, 3, 3, 7
Program 0:
t1 = ~nondet_1;
t2 = nondet_1 * nondet_0;
t3 = ~t1;
I = t1 < t2;

Fastest checker: explicit
Fails for (8, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 10, 1, 4, 6
Program 0:
t1 = min(y, z);
t2 = t1 * t1;
t3 = ((sword_t) z) <= ((sword_t) t1);
t4 = t2 ? y : 0x0;
I = !t4 || 0x0;

Fastest checker: explicit
Fails for (0, 0, 1, 4, 4)

[]
Fastest checker: genetic
Evars: 7, 5, 3, 4, 6
Program 0:
t1 = min(x, nondet_0);
t2 = y + z;
t3 = min(t2, t2);
t4 = 0xc * nondet_0;
I = t4 & z;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 11, 0, 2, 6, 6
Program 0:
t1 = z >> z;
t2 = z + 0xd;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 0, 3, 1, 4)

[]
Fastest checker: genetic
Evars: 7, 4, 7, 3, 7
Program 0:
t1 = ~x;
t2 = 0x7 / x;
I = ((sword_t) 0x7) <= ((sword_t) nondet_1);

Fastest checker: explicit
Fails for (7, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 10, 1, 6, 3
Program 0:
t1 = ~nondet_0;
I = t1 < nondet_1;

Fastest checker: explicit
Fails for (15, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 13, 7, 3, 6
Program 0:
t1 = ~x;
t2 = t1 - z;
t3 = 0xc * nondet_1;
I = z & t3;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 9, 13, 7, 6, 1
Program 0:
t1 = nondet_0 & nondet_1;
t2 = y ? t1 : x;
t3 = ((sword_t) 0x3) >> ((sword_t) z);
I = t1 >> t2;

Fastest checker: explicit
Fails for (4, 4, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 13, 7, 6, 1
Program 0:
t1 = nondet_0 & nondet_1;
I = ((sword_t) t1) >> ((sword_t) 0x3);

Fastest checker: explicit
Fails for (8, 8, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 5, 7, 6, 4
Program 0:
t1 = z < 0x5;
I = 0x5 == nondet_0;

Fastest checker: explicit
Fails for (0, 5, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 13, 3, 2, 4
Program 0:
t1 = y != z;
t2 = nondet_0 - x;
t3 = 0x5 << t2;
t4 = nondet_1 + 0x5;
t5 = z == 0x5;
t6 = 0x5 + y;
t7 = nondet_0 / 0x5;
I = t7 % z;

Fastest checker: explicit
Fails for (0, 5, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 6, 13, 3, 3, 7
Program 0:
t1 = y << y;
t2 = 0xc + 0xc;
t3 = nondet_0 ^ 0xc;
I = t3 < z;

Fastest checker: explicit
Fails for (0, 12, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 15, 2, 1, 4
Program 0:
I = 0xd == nondet_1;

Fastest checker: explicit
Fails for (13, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 6, 7, 6, 3
Program 0:
I = 0x6 == nondet_0;

Fastest checker: explicit
Fails for (0, 6, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 13, 7, 3, 7
Program 0:
t1 = y != nondet_0;
I = 0xd == nondet_0;

Fastest checker: explicit
Fails for (0, 13, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 8, 4, 1, 6
Program 0:
t1 = nondet_0 % z;
t2 = y + nondet_0;
t3 = t2 + nondet_0;
t4 = nondet_0 % t3;
I = t1 >> y;

Fastest checker: explicit
Fails for (0, 7, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 2, 13, 7, 7, 7
Program 0:
t1 = nondet_1 % y;
I = t1 % z;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 2)

[]
Fastest checker: genetic
Evars: 13, 15, 7, 6, 4
Program 0:
t1 = z & y;
t2 = t1 & nondet_0;
I = ((sword_t) t2) >> ((sword_t) t1);

Fastest checker: explicit
Fails for (0, 4, 1, 4, 4)

[]
Fastest checker: genetic
Evars: 10, 13, 7, 6, 4
Program 0:
I = 0xa == nondet_1;

Fastest checker: explicit
Fails for (10, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 12, 6, 7, 5
Program 0:
t1 = x & z;
I = t1 & 0x4;

Fastest checker: explicit
Fails for (0, 0, 4, 1, 4)

[]
Fastest checker: genetic
Evars: 10, 7, 6, 7, 3
Program 0:
t1 = min(y, nondet_1);
t2 = z <= t1;
t3 = z << x;
t4 = 0x5 < t1;
I = t4 & z;

Fastest checker: explicit
Fails for (6, 0, 1, 6, 1)

[]
Fastest checker: genetic
Evars: 5, 4, 6, 2, 6
Program 0:
t1 = ~z;
t2 = nondet_1 != z;
t3 = 0x4 != z;
t4 = !y || z;
t5 = nondet_0 & x;
t6 = max(x, t5);
I = t5 / 0x4;

Fastest checker: explicit
Fails for (0, 4, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 10, 7, 7, 2
Program 0:
t1 = z + 0xa;
t2 = !x || nondet_0;
I = nondet_0 == 0xa;

Fastest checker: explicit
Fails for (0, 10, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 14, 2, 3, 4
Program 0:
t1 = min(nondet_1, nondet_0);
t2 = t1 / x;
t3 = t2 ? x : nondet_0;
t4 = -0xc;
I = t1 / 0xc;

Fastest checker: explicit
Fails for (12, 12, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 5, 7, 7, 1
Program 0:
t1 = nondet_0 * y;
t2 = t1 % y;
I = t2 & x;

Fastest checker: explicit
Fails for (0, 11, 1, 3, 1)

[]
Fastest checker: genetic
Evars: 4, 8, 7, 6, 4
Program 0:
t1 = nondet_1 ^ 0x6;
t2 = y % x;
t3 = t1 >> t1;
I = ((sword_t) t2) >> ((sword_t) 0x6);

Fastest checker: explicit
Fails for (0, 0, 5, 4, 1)

[]
Fastest checker: genetic
Evars: 4, 7, 3, 3, 7
Program 0:
t1 = z & 0x4;
t2 = y == x;
I = t1 & nondet_1;

Fastest checker: explicit
Fails for (4, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 9, 9, 6, 1, 2
Program 0:
t1 = nondet_0 % x;
t2 = -nondet_0;
t3 = t2 != t2;
t4 = t3 < z;
I = ((sword_t) t4) < ((sword_t) t1);

Fastest checker: explicit
Fails for (0, 2, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 8, 3, 5, 7
Program 0:
t1 = y % z;
t2 = 0x7 / x;
I = t1 >> y;

Fastest checker: explicit
Fails for (0, 0, 1, 4, 3)

[]
Fastest checker: genetic
Evars: 14, 3, 7, 4, 1
Program 0:
t1 = y * nondet_0;
t2 = t1 < y;
t3 = t1 % x;
t4 = nondet_1 ? t3 : y;
I = y < t4;

Fastest checker: explicit
Fails for (1, 2, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 3, 3, 3
Program 0:
t1 = max(nondet_1, 0x4);
t2 = nondet_1 | nondet_0;
t3 = x | z;
t4 = -z;
t5 = max(t4, 0x4);
t6 = ((sword_t) y) <= ((sword_t) z);
I = t5 < nondet_1;

Fastest checker: explicit
Fails for (15, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 8, 11, 3, 3, 7
Program 0:
t1 = z & nondet_0;
I = t1 % z;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 3)

[]
Fastest checker: genetic
Evars: 0, 6, 2, 2, 6
Program 0:
t1 = min(z, 0x6);
t2 = z & nondet_0;
I = ((sword_t) 0x6) <= ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 6, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 11, 14, 5, 6, 4
Program 0:
t1 = nondet_0 * z;
t2 = max(0xb, nondet_1);
I = 0xb == nondet_1;

Fastest checker: explicit
Fails for (11, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 13, 2, 5, 6
Program 0:
t1 = z << nondet_1;
t2 = min(y, z);
I = nondet_0 % t2;

Fastest checker: explicit
Fails for (0, 1, 1, 2, 2)

[]
Fastest checker: genetic
Evars: 9, 15, 7, 7, 7
Program 0:
t1 = max(nondet_1, z);
t2 = x != y;
t3 = max(t1, y);
t4 = nondet_1 + 0xe;
I = t4 == x;

Fastest checker: explicit
Fails for (3, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 10, 6, 3, 7
Program 0:
t1 = z << nondet_1;
t2 = x != nondet_1;
t3 = 0x6 <= nondet_1;
I = t3 % x;

Fastest checker: explicit
Fails for (6, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 11, 4, 3, 4
Program 0:
t1 = nondet_0 >> 0x9;
t2 = z | 0x9;
t3 = x * t2;
I = t1 / t3;

Fastest checker: explicit
Fails for (0, 4, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 14, 3, 3, 7
Program 0:
t1 = x << z;
t2 = x | t1;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 0, 5, 1, 2)

[]
Fastest checker: genetic
Evars: 5, 15, 7, 2, 1
Program 0:
t1 = x << nondet_1;
t2 = max(t1, 0xd);
t3 = 0xd * nondet_0;
I = t2 != 0xd;

Fastest checker: explicit
Fails for (1, 0, 7, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 15, 7, 5, 2
Program 0:
t1 = 0x4 + x;
t2 = z << nondet_0;
I = t2 < z;

Fastest checker: explicit
Fails for (0, 3, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 2, 3, 7, 5
Program 0:
t1 = x < y;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 0, 2, 3, 1)

[]
Fastest checker: genetic
Evars: 0, 15, 6, 7, 5
Program 0:
t1 = max(nondet_1, nondet_0);
t2 = x + y;
t3 = 0xa < t2;
I = t3 ? t3 : t3;

Fastest checker: explicit
Fails for (0, 0, 7, 4, 1)

[]
Fastest checker: genetic
Evars: 0, 2, 6, 7, 5
Program 0:
t1 = max(nondet_1, nondet_0);
t2 = 0xa != t1;
t3 = ~t2;
t4 = x + y;
t5 = 0xa + t4;
t6 = t4 + y;
I = t6 < x;

Fastest checker: explicit
Fails for (0, 0, 6, 5, 1)

[]
Fastest checker: genetic
Evars: 8, 9, 4, 7, 7
Program 0:
t1 = ((sword_t) 0x8) <= ((sword_t) nondet_1);
t2 = x < y;
I = t2 >> x;

Fastest checker: explicit
Fails for (0, 0, 4, 5, 1)

[]
Fastest checker: genetic
Evars: 3, 9, 3, 3, 7
Program 0:
t1 = 0x9 >> z;
t2 = !y || y;
t3 = nondet_1 == t1;
t4 = x != z;
I = nondet_0 == 0x9;

Fastest checker: explicit
Fails for (0, 9, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 3, 7, 3, 7
Program 0:
t1 = z == 0x7;
t2 = ((sword_t) nondet_0) < ((sword_t) x);
I = min(nondet_0, t1);

Fastest checker: explicit
Fails for (0, 1, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 15, 6, 7, 6, 4
Program 0:
t1 = y == y;
t2 = min(x, nondet_1);
t3 = nondet_1 ^ y;
I = ((sword_t) 0x4) < ((sword_t) t2);

Fastest checker: explicit
Fails for (5, 0, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 13, 2, 2, 7
Program 0:
t1 = y == y;
t2 = y < nondet_1;
t3 = t2 & y;
I = t3 < t2;

Fastest checker: explicit
Fails for (3, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 0, 9, 2, 3, 1
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) nondet_0);
I = t1 % x;

Fastest checker: explicit
Fails for (0, 6, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 4, 5, 5, 5
Program 0:
t1 = z - x;
t2 = nondet_0 % x;
t3 = t2 + x;
t4 = ((sword_t) x) <= ((sword_t) t1);
I = 0x7 < t3;

Fastest checker: explicit
Fails for (0, 3, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 6, 6, 5, 2
Program 0:
t1 = nondet_1 % y;
t2 = t1 << nondet_1;
t3 = nondet_1 == 0x7;
I = t2 & nondet_1;

Fastest checker: explicit
Fails for (11, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 5, 3, 5
Program 0:
t1 = x + nondet_1;
t2 = max(z, y);
t3 = nondet_1 % z;
t4 = t1 ^ z;
I = t2 % y;

Fastest checker: explicit
Fails for (0, 0, 1, 2, 3)

[]
Fastest checker: genetic
Evars: 11, 2, 7, 6, 6
Program 0:
t1 = nondet_0 * z;
t2 = max(0x9, t1);
t3 = 0x9 - t1;
t4 = ((sword_t) z) >> ((sword_t) t2);
I = nondet_0 & t4;

Fastest checker: explicit
Fails for (0, 6, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 2, 12, 7, 7, 1
Program 0:
t1 = -z;
t2 = z ^ t1;
t3 = ((sword_t) y) <= ((sword_t) nondet_0);
t4 = ((sword_t) 0x5) <= ((sword_t) y);
I = nondet_0 * t4;

Fastest checker: explicit
Fails for (0, 1, 1, 5, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 2, 2, 4
Program 0:
t1 = x != x;
t2 = x + z;
t3 = 0x5 < nondet_1;
t4 = x >> z;
I = t3 >> z;

Fastest checker: explicit
Fails for (6, 0, 1, 1, 4)

[]







Timeout
Perf counters:
{'genetic': 127, 'explicit': 127, 'timeout': 1, 'iterations': 128}
Perf timers:
verify: 3.06s
checker: 117.55s
gcc: 0.85s
_: 120.00s
synth: 114.86s
