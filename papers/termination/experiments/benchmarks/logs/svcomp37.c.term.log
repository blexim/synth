Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = nondet_0 >>> 0x5;
Program 1:
t1 = nondet_2 s<= y;
t2 = min(y, y);
I = nondet_1 s<= nondet_1;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 2)

[]
Fastest checker: genetic
Program 0:
t1 = x & 0xa;
I = 0xa >> y;
Program 1:
I = nondet_0 s< nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = max(0x2, nondet_2);
t2 = nondet_1 - t1;
I = t2 / t1;
Program 1:
I = min(0x4, y);

Fastest checker: explicit
Fails for (9, 0, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 - nondet_0;
t2 = -t1;
I = 0x7 >>> t1;
Program 1:
t1 = y >> 0x8;
I = 0x8 s<= y;

Fastest checker: explicit
Fails for (11, 0, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
I = max(0xf, nondet_1);
Program 1:
t1 = y << y;
t2 = nondet_2 < nondet_1;
I = y >> nondet_2;

Fastest checker: explicit
Fails for (1, 2, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
I = ~nondet_1;
Program 1:
t1 = nondet_0 >> nondet_1;
t2 = t1 | x;
I = y + t1;

Fastest checker: explicit
Fails for (0, 4, 0, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 != y;
t2 = 0x2 - 0x2;
I = ~t1;
Program 1:
t1 = 0x1 != x;
t2 = y & x;
I = nondet_1 * t2;

Fastest checker: explicit
Fails for (0, 9, 0, 2, 3)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 != 0xe;
Program 1:
t1 = nondet_2 + x;
t2 = nondet_2 * nondet_2;
I = t1 / 0xf;

Fastest checker: explicit
Fails for (14, 9, 0, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 ^ nondet_1;
I = t1 >> nondet_0;
Program 1:
t1 = nondet_2 * nondet_0;
t2 = max(x, nondet_0);
I = nondet_0 <= nondet_2;

Fastest checker: explicit
Fails for (2, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x != 0xc;
I = x | t1;
Program 1:
t1 = y | nondet_1;
I = nondet_2 < 0xc;

Fastest checker: explicit
Fails for (0, 2, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
I = ~nondet_1;
Program 1:
I = x & y;

Fastest checker: explicit
Fails for (0, 15, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
I = y - 0xd;
Program 1:
t1 = 0x8 >>> y;
I = t1 ==> t1;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 3)

[]
Fastest checker: genetic
Program 0:
I = max(nondet_1, 0x7);
Program 1:
t1 = nondet_1 ? x : y;
t2 = ~0x9;
I = y != t2;

Fastest checker: explicit
Fails for (3, 1, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
I = max(0x1, nondet_2);
Program 1:
t1 = max(y, nondet_0);
I = x | nondet_0;

Fastest checker: explicit
Fails for (4, 1, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 - nondet_0;
I = ~x;
Program 1:
t1 = nondet_1 ==> 0x2;
t2 = min(x, y);
I = nondet_0 << t1;

Fastest checker: explicit
Fails for (15, 1, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 + 0x6;
t2 = 0x6 + 0x6;
I = nondet_2 - 0x6;
Program 1:
t1 = nondet_2 s< nondet_2;
t2 = max(y, y);
t3 = x | nondet_2;
t4 = nondet_1 | y;
I = nondet_1 + nondet_0;

Fastest checker: explicit
Fails for (6, 2, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0xd < y;
t2 = nondet_0 + x;
I = nondet_0 + 0xd;
Program 1:
t1 = nondet_2 + y;
I = min(nondet_1, x);

Fastest checker: explicit
Fails for (13, 2, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc + nondet_0;
I = 0xc + t1;
Program 1:
I = min(x, y);

Fastest checker: explicit
Fails for (0, 0, 8, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 + 0x6;
I = 0x6 - nondet_0;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_2 | y;
t3 = nondet_0 | nondet_1;
t4 = nondet_2 + y;
t5 = nondet_0 + nondet_1;
t6 = y + y;
t7 = x | nondet_2;
I = nondet_1 | y;

Fastest checker: explicit
Fails for (4, 3, 0, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 + 0x6;
I = nondet_2 + 0x6;
Program 1:
t1 = nondet_2 | nondet_1;
t2 = nondet_2 | y;
t3 = nondet_0 | nondet_1;
t4 = nondet_1 + nondet_1;
t5 = y + y;
t6 = x + t5;
t7 = nondet_1 | y;
I = nondet_1 + nondet_0;

Fastest checker: explicit
Fails for (10, 3, 0, 4, 3)

[]
Fastest checker: genetic
Program 0:
I = 0x6 + nondet_0;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_2 | y;
t3 = 0xd | nondet_1;
t4 = nondet_0 + nondet_1;
t5 = y + y;
t6 = x + y;
I = nondet_1 | y;

Fastest checker: explicit
Fails for (0, 7, 0, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 + nondet_0;
t3 = 0x6 ==> 0x6;
I = y + 0x6;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_2 | y;
t3 = nondet_0 | nondet_1;
t4 = nondet_2 + y;
t5 = nondet_2 + y;
t6 = nondet_2 + x;
t7 = y * y;
I = nondet_1 + nondet_1;

Fastest checker: explicit
Fails for (0, 10, 0, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> nondet_0;
t3 = 0x6 + 0x6;
t4 = 0x6 + nondet_0;
t5 = 0x6 - 0x6;
I = nondet_2 ==> 0x6;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_2 | y;
t3 = nondet_0 + nondet_1;
t4 = nondet_2 + y;
t5 = nondet_0 | nondet_1;
t6 = nondet_1 + nondet_1;
t7 = y + y;
t8 = x + t7;
t9 = nondet_1 | y;
I = nondet_1 | nondet_0;

Fastest checker: explicit
Fails for (7, 1, 1, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> nondet_0;
t3 = 0x6 + nondet_0;
I = 0x6 + t3;
Program 1:
I = min(x, y);

Fastest checker: explicit
Fails for (0, 0, 4, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 s< nondet_0;
I = 0x6 + t2;
Program 1:
I = min(x, y);

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 5.30s

Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 s< nondet_0;
I = 0x6 + t2;
Program 1:
I = min(x, y);


Perf counters:
{'genetic': 25, 'cbmc': 1, 'explicit': 25, 'iterations': 25}
Perf timers:
verify: 3.19s
checker: 5.24s
gcc: 0.64s
_: 5.30s
synth: 2.09s
