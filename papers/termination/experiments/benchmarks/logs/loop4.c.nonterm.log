Using seed: 1337
[]
Fastest checker: genetic
Evars: 14, 1, 2, 2, 15
Program 0:
t1 = 0x0 != b;
t2 = ((sword_t) 0x0) >> ((sword_t) 0x0);
t3 = t1 == nondet_0;
t4 = 0x0 >> a;
I = x ? nondet_0 : t3;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 3, 7, 11, 7
Program 0:
t1 = min(y, 0xa);
t2 = t1 & a;
I = t2 + a;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 5, 2, 10, 13
Program 0:
t1 = y != b;
t2 = y < 0x9;
I = b * x;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 6, 4, 9, 10
Program 0:
t1 = ((sword_t) b) <= ((sword_t) b);
I = x >> y;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 9, 2, 2, 1, 9
Program 0:
I = min(b, nondet_0);

Fastest checker: explicit
Fails for (1, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 4, 3, 9, 1
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) x);
t2 = max(t1, nondet_0);
I = -t1;

Fastest checker: explicit
Fails for (2, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 5, 3, 10, 15
Program 0:
t1 = ((sword_t) b) <= ((sword_t) 0x3);
t2 = ((sword_t) 0x3) <= ((sword_t) y);
t3 = b <= t1;
I = 0x3 == b;

Fastest checker: explicit
Fails for (0, 0, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 6, 2, 3, 11
Program 0:
t1 = nondet_0 < x;
t2 = ((sword_t) a) >> ((sword_t) y);
I = a & b;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 4, 6, 2, 11
Program 0:
t1 = ((sword_t) 0xf) >> ((sword_t) a);
I = a >> a;

Fastest checker: explicit
Fails for (0, 4, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 4, 7, 4, 15
Program 0:
t1 = ((sword_t) b) >> ((sword_t) b);
t2 = max(nondet_0, b);
t3 = ((sword_t) x) < ((sword_t) t2);
t4 = !0x5 || a;
I = t3 * a;

Fastest checker: explicit
Fails for (2, 1, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 4, 3, 12, 14
Program 0:
t1 = 0x3 == a;
I = x % y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 13, 5, 3, 3, 9
Program 0:
I = nondet_0 >> 0x7;

Fastest checker: explicit
Fails for (8, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 6, 5, 1, 7
Program 0:
I = nondet_0 % x;

Fastest checker: explicit
Fails for (1, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 8, 7, 6, 10, 7
Program 0:
t1 = ~nondet_0;
t2 = x ? x : y;
t3 = b >> y;
I = t1 <= t2;

Fastest checker: explicit
Fails for (14, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 6, 7, 12, 8
Program 0:
t1 = max(a, y);
I = a % y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 3, 6, 4, 12, 8
Program 0:
I = x >> x;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 15, 3, 2, 6, 6
Program 0:
t1 = nondet_0 % y;
I = 0x0 ^ t1;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 13, 1, 4, 10, 10
Program 0:
t1 = ((sword_t) b) >> ((sword_t) 0xc);
t2 = x + x;
I = ((sword_t) t1) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 1, 5, 9, 2
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? 0x5 : y;
t3 = 0x5 + 0x5;
t4 = b + x;
t5 = a * b;
I = min(t5, nondet_0);

Fastest checker: explicit
Fails for (1, 1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 3, 5, 8, 8
Program 0:
t1 = ((sword_t) b) >> ((sword_t) 0x5);
t2 = b + 0x5;
I = t1 & a;

Fastest checker: explicit
Fails for (0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 3, 6, 8, 12
Program 0:
t1 = nondet_0 % x;
t2 = y + b;
t3 = 0x5 <= y;
I = -t3;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 5)

[]
Fastest checker: genetic
Evars: 2, 2, 3, 1, 10
Program 0:
t1 = nondet_0 % x;
t2 = nondet_0 + x;
I = b % x;

Fastest checker: explicit
Fails for (0, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 2, 5, 4, 10, 10
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? x : y;
t3 = nondet_0 + x;
t4 = 0x5 + 0x5;
t5 = 0x5 + 0x5;
I = t5 % y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 2, 2, 3, 0, 6
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? 0x5 : y;
t3 = 0x5 + b;
t4 = t2 + x;
I = t4 % y;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 2)

[]
Fastest checker: genetic
Evars: 9, 7, 4, 14, 11
Program 0:
t1 = min(b, y);
t2 = max(nondet_0, nondet_0);
t3 = ((sword_t) t2) >> ((sword_t) a);
I = t1 >> y;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 2, 5, 6, 6, 0
Program 0:
t1 = nondet_0 % x;
I = b ? t1 : b;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 11, 3, 1, 13, 14
Program 0:
t1 = a - b;
t2 = b <= x;
I = a == 0x3;

Fastest checker: explicit
Fails for (0, 3, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 0, 6, 5, 8, 4
Program 0:
t1 = !a || a;
t2 = t1 != x;
t3 = ~x;
t4 = b + x;
I = ((sword_t) t4) <= ((sword_t) 0xd);

Fastest checker: explicit
Fails for (0, 0, 7, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 7, 2, 3, 12
Program 0:
t1 = 0x7 >> y;
I = 0x7 == x;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 1)

[]
Fastest checker: genetic
Evars: 13, 1, 4, 9, 4
Program 0:
t1 = ~a;
t2 = -y;
t3 = y << x;
I = ((sword_t) a) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 8, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 4, 6, 1, 8
Program 0:
t1 = nondet_0 * y;
t2 = ((sword_t) nondet_0) >> ((sword_t) b);
I = min(t2, b);

Fastest checker: explicit
Fails for (2, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 2, 3, 15, 1
Program 0:
t1 = x << b;
t2 = t1 ? y : x;
I = b % t2;

Fastest checker: explicit
Fails for (0, 0, 3, 2, 1)

[]
Fastest checker: genetic
Evars: 10, 2, 7, 3, 12
Program 0:
t1 = x < 0x6;
t2 = x ? 0x6 : a;
I = y / t2;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 6)

[]
Fastest checker: genetic
Evars: 12, 7, 7, 15, 13
Program 0:
t1 = y == a;
t2 = a + x;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 1, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 6, 1, 5, 7, 12
Program 0:
t1 = nondet_0 + a;
I = ((sword_t) 0x5) < ((sword_t) t1);

Fastest checker: explicit
Fails for (6, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 6, 6, 6
Program 0:
t1 = nondet_0 % x;
t2 = -x;
I = b >> t2;

Fastest checker: explicit
Fails for (0, 0, 8, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 1, 5, 14, 14
Program 0:
t1 = b / x;
t2 = ((sword_t) x) <= ((sword_t) b);
I = t2 % y;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 13, 3, 5, 14, 14
Program 0:
t1 = x * b;
t2 = t1 + y;
I = x == 0x3;

Fastest checker: explicit
Fails for (0, 0, 0, 3, 1)

[]
Fastest checker: genetic
Evars: 3, 6, 4, 8, 7
Program 0:
t1 = nondet_0 % x;
t2 = 0x2 + t1;
t3 = x | y;
I = ((sword_t) 0x2) <= ((sword_t) t1);

Fastest checker: explicit
Fails for (2, 0, 0, 3, 1)

[]
Fastest checker: genetic
Evars: 2, 4, 3, 4, 11
Program 0:
t1 = y != 0xd;
t2 = b & nondet_0;
t3 = !y || b;
t4 = y & nondet_0;
I = ((sword_t) t2) >> ((sword_t) x);

Fastest checker: explicit
Fails for (2, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 6, 4, 12, 3
Program 0:
t1 = ((sword_t) b) >> ((sword_t) y);
I = nondet_0 & t1;

Fastest checker: explicit
Fails for (1, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 4, 12, 6
Program 0:
t1 = ((sword_t) a) >> ((sword_t) a);
I = x & t1;

Fastest checker: explicit
Fails for (0, 6, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 1, 2, 13, 6
Program 0:
I = nondet_0 == 0x9;

Fastest checker: explicit
Fails for (9, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 6, 7, 7, 14
Program 0:
t1 = a >> x;
t2 = ((sword_t) x) >> ((sword_t) 0x6);
t3 = nondet_0 * 0x6;
t4 = x + t1;
I = a & t3;

Fastest checker: explicit
Fails for (1, 2, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 5, 4, 15, 10
Program 0:
t1 = nondet_0 ? a : y;
t2 = t1 % y;
t3 = ((sword_t) y) <= ((sword_t) 0x8);
I = t2 * t1;

Fastest checker: explicit
Fails for (1, 1, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 7, 6, 1, 9, 4
Program 0:
t1 = ((sword_t) y) < ((sword_t) a);
I = t1 & b;

Fastest checker: explicit
Fails for (0, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 5, 10, 14
Program 0:
t1 = a + nondet_0;
t2 = ((sword_t) 0x1) >> ((sword_t) x);
I = t2 * a;

Fastest checker: explicit
Fails for (0, 1, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 6, 2, 6, 9, 0
Program 0:
t1 = y & nondet_0;
t2 = y <= x;
t3 = nondet_0 - b;
I = 0x2 < t1;

Fastest checker: explicit
Fails for (3, 0, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 9, 6, 4, 1, 15
Program 0:
t1 = 0x4 - y;
t2 = nondet_0 % x;
t3 = t2 <= a;
I = min(t3, t2);

Fastest checker: explicit
Fails for (1, 1, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 6, 3, 2, 7, 15
Program 0:
t1 = 0x3 != b;
t2 = max(0x3, 0x3);
t3 = nondet_0 + y;
t4 = 0x3 + a;
I = t4 == nondet_0;

Fastest checker: explicit
Fails for (3, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 5, 7, 13, 2
Program 0:
t1 = y % 0x6;
t2 = nondet_0 + x;
t3 = t1 % y;
t4 = max(x, nondet_0);
I = t3 * t4;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 1, 5, 2, 15, 14
Program 0:
t1 = -0x1;
t2 = y * nondet_0;
t3 = t2 - nondet_0;
t4 = b * t3;
I = t4 & t2;

Fastest checker: explicit
Fails for (3, 0, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 4, 6, 7, 10, 8
Program 0:
t1 = nondet_0 % x;
I = ((sword_t) t1) >> ((sword_t) x);

Fastest checker: explicit
Fails for (1, 0, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 7, 7, 5, 10, 2
Program 0:
I = 0x7 == a;

Fastest checker: explicit
Fails for (0, 7, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 1, 7, 14, 9
Program 0:
t1 = nondet_0 | a;
t2 = a != x;
t3 = b ^ t2;
t4 = 0xb << a;
I = y / t4;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 6)

[]
Fastest checker: genetic
Evars: 15, 6, 4, 1, 5
Program 0:
t1 = b < 0x6;
t2 = nondet_0 * a;
t3 = 0x6 * t2;
I = x == 0x6;

Fastest checker: explicit
Fails for (0, 0, 0, 6, 1)

[]
Fastest checker: genetic
Evars: 8, 6, 5, 13, 2
Program 0:
t1 = x >> x;
t2 = 0x9 != y;
t3 = t2 / t2;
t4 = min(a, nondet_0);
I = min(t1, b);

Fastest checker: explicit
Fails for (0, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 3, 7, 7, 7, 3
Program 0:
t1 = 0xb + x;
t2 = nondet_0 & y;
t3 = t2 >> a;
t4 = ((sword_t) t2) <= ((sword_t) x);
t5 = x + b;
t6 = 0xb + b;
t7 = b + x;
t8 = a + x;
t9 = 0xb <= t8;
I = -t9;

Fastest checker: explicit
Fails for (0, 10, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 3, 7, 9, 13
Program 0:
t1 = b ? nondet_0 : b;
t2 = x ? 0x8 : 0x8;
I = t1 & 0x8;

Fastest checker: explicit
Fails for (8, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 2, 4, 14, 6
Program 0:
t1 = nondet_0 ^ a;
t2 = ~a;
I = t1 == t2;

Fastest checker: explicit
Fails for (15, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 1, 4, 1, 11
Program 0:
t1 = !nondet_0 || x;
t2 = x < a;
t3 = min(y, b);
t4 = ((sword_t) t3) <= ((sword_t) 0x2);
t5 = a % 0x2;
I = t5 >> y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 4)

[]
Fastest checker: genetic
Evars: 2, 2, 2, 11, 6
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? 0x5 : y;
t3 = min(y, b);
I = t3 >> 0x5;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 2)

[]
Fastest checker: genetic
Evars: 4, 4, 4, 8, 8
Program 0:
t1 = ((sword_t) 0xc) < ((sword_t) a);
t2 = ((sword_t) a) >> ((sword_t) a);
t3 = 0xc + t2;
I = min(t2, b);

Fastest checker: explicit
Fails for (0, 4, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 4, 4, 8, 8
Program 0:
t1 = ((sword_t) 0xc) < ((sword_t) a);
t2 = ((sword_t) a) >> ((sword_t) a);
t3 = ((sword_t) b) <= ((sword_t) 0xc);
I = min(nondet_0, t2);

Fastest checker: explicit
Fails for (1, 4, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 4, 4, 5, 7
Program 0:
t1 = b ^ x;
t2 = a ? 0xe : y;
t3 = nondet_0 | x;
I = 0xe == t3;

Fastest checker: explicit
Fails for (12, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 3, 2, 7, 8, 12
Program 0:
t1 = 0x6 - x;
t2 = max(a, b);
t3 = ((sword_t) 0x6) < ((sword_t) y);
I = min(t3, b);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 2, 2, 7, 8, 12
Program 0:
t1 = ((sword_t) 0x5) < ((sword_t) y);
I = min(t1, b);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 6)

[]
Fastest checker: genetic
Evars: 0, 3, 7, 8, 13
Program 0:
t1 = 0xa << b;
t2 = nondet_0 >> a;
t3 = t1 & t1;
t4 = t1 <= a;
I = t4 & a;

Fastest checker: explicit
Fails for (0, 11, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 4, 1, 12, 8
Program 0:
t1 = 0xb << y;
t2 = nondet_0 & a;
t3 = ((sword_t) x) < ((sword_t) y);
I = ((sword_t) t2) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (4, 4, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 5, 1, 14, 11
Program 0:
t1 = max(nondet_0, y);
t2 = t1 ^ b;
t3 = x % t1;
t4 = nondet_0 + x;
t5 = x * t4;
I = 0x5 == a;

Fastest checker: explicit
Fails for (0, 5, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 7, 5, 15, 9
Program 0:
t1 = x == x;
t2 = 0xb + a;
I = t2 < b;

Fastest checker: explicit
Fails for (0, 5, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 2, 7, 10, 15
Program 0:
t1 = a < b;
t2 = min(a, a);
t3 = nondet_0 + b;
t4 = x + b;
t5 = nondet_0 >> nondet_0;
t6 = min(a, t5);
I = t6 * t6;

Fastest checker: explicit
Fails for (4, 1, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 5, 6, 6, 1
Program 0:
t1 = ((sword_t) y) <= ((sword_t) x);
t2 = 0xe ? 0xe : x;
t3 = ((sword_t) y) <= ((sword_t) b);
t4 = x * 0xe;
I = ((sword_t) x) <= ((sword_t) t4);

Fastest checker: explicit
Fails for (0, 0, 0, 5, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 5, 10, 2
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? 0x5 : y;
I = 0x5 == b;

Fastest checker: explicit
Fails for (0, 0, 5, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 2, 6, 6, 1
Program 0:
t1 = nondet_0 % x;
t2 = 0x5 ? 0x5 : y;
t3 = nondet_0 + nondet_0;
I = t3 % y;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 5, 5, 5, 6, 11
Program 0:
t1 = 0x8 >> nondet_0;
t2 = 0x8 - a;
t3 = ((sword_t) nondet_0) >> ((sword_t) nondet_0);
t4 = min(t2, t3);
I = t4 % y;

Fastest checker: explicit
Fails for (6, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 3, 6, 4, 11, 12
Program 0:
t1 = nondet_0 % y;
I = 0x2 < t1;

Fastest checker: explicit
Fails for (3, 0, 0, 1, 4)

[]
Fastest checker: genetic
Evars: 5, 7, 7, 6, 2
Program 0:
t1 = a <= nondet_0;
t2 = b < a;
t3 = 0x3 < b;
t4 = 0x3 | t2;
I = t3 % y;

Fastest checker: explicit
Fails for (0, 0, 4, 1, 2)

[]
Fastest checker: genetic
Evars: 7, 7, 5, 3, 2
Program 0:
t1 = 0x7 != 0x7;
t2 = 0x7 == nondet_0;
I = t2 << b;

Fastest checker: explicit
Fails for (7, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 6, 6, 6, 14
Program 0:
t1 = a % x;
t2 = nondet_0 ? a : 0x3;
t3 = y / y;
t4 = 0x3 + 0x3;
I = b == t4;

Fastest checker: explicit
Fails for (0, 0, 6, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 4, 3, 11, 0
Program 0:
t1 = b << x;
t2 = -0x3;
t3 = y ^ 0x3;
t4 = nondet_0 ^ 0x3;
t5 = ((sword_t) b) >> ((sword_t) x);
t6 = ((sword_t) t3) <= ((sword_t) y);
I = t6 >> x;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 2)

[]
Fastest checker: genetic
Evars: 12, 7, 7, 11, 4
Program 0:
t1 = 0x0 < a;
t2 = y << y;
t3 = nondet_0 << t2;
t4 = t1 >> t2;
I = min(t4, b);

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 5, 6, 10, 3
Program 0:
t1 = -y;
t2 = t1 <= nondet_0;
I = t2 % y;

Fastest checker: explicit
Fails for (14, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 12, 5, 6, 10, 3
Program 0:
t1 = -y;
t2 = t1 <= nondet_0;
I = min(t2, b);

Fastest checker: explicit
Fails for (15, 0, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 6, 7, 10, 9
Program 0:
t1 = max(x, 0xf);
t2 = ((sword_t) t1) >> ((sword_t) y);
t3 = t1 >> x;
I = t3 < y;

Fastest checker: explicit
Fails for (0, 0, 0, 3, 2)

[]
Fastest checker: genetic
Evars: 2, 6, 7, 3, 7
Program 0:
t1 = -b;
t2 = a + a;
t3 = t2 * y;
I = t3 < t2;

Fastest checker: explicit
Fails for (0, 4, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 5, 2, 5, 0, 4
Program 0:
t1 = b ? 0x3 : a;
t2 = b >> b;
t3 = x ^ t1;
I = a * t2;

Fastest checker: explicit
Fails for (0, 1, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 4, 6, 8, 6
Program 0:
t1 = 0xb >> y;
t2 = a & b;
t3 = y * t2;
t4 = a + t2;
I = ((sword_t) t3) < ((sword_t) 0xb);

Fastest checker: explicit
Fails for (0, 8, 8, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 7, 3, 2, 15
Program 0:
t1 = ((sword_t) nondet_0) >> ((sword_t) a);
t2 = 0xe + x;
t3 = a ^ b;
I = ((sword_t) nondet_0) < ((sword_t) t1);

Fastest checker: explicit
Fails for (8, 1, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 4, 4, 15, 12
Program 0:
t1 = y & b;
t2 = x << t1;
I = t1 & t2;

Fastest checker: explicit
Fails for (0, 0, 4, 4, 4)

[]
Fastest checker: genetic
Evars: 4, 7, 7, 10, 9
Program 0:
t1 = b + x;
t2 = t1 + a;
I = t2 < x;

Fastest checker: explicit
Fails for (0, 15, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 8, 5, 7, 7, 9
Program 0:
t1 = y ? a : b;
t2 = a < t1;
t3 = nondet_0 >> t2;
t4 = t1 * y;
I = t4 % y;

Fastest checker: explicit
Fails for (0, 6, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 0, 6, 5, 1, 1
Program 0:
t1 = ((sword_t) 0x5) >> ((sword_t) nondet_0);
t2 = x & a;
t3 = b % 0x5;
t4 = b - t2;
I = t2 >> x;

Fastest checker: explicit
Fails for (0, 4, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 11, 1, 5, 2, 10
Program 0:
t1 = -b;
t2 = a - a;
t3 = t2 <= t2;
t4 = -0xb;
t5 = ~a;
t6 = max(a, b);
t7 = 0xb != 0xb;
I = 0xb == nondet_0;

Fastest checker: explicit
Fails for (11, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 7, 15, 11
Program 0:
t1 = b & a;
t2 = t1 + 0x4;
t3 = t1 != y;
I = ((sword_t) t2) <= ((sword_t) t1);

Fastest checker: explicit
Fails for (0, 4, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 7, 12, 8
Program 0:
t1 = x < y;
t2 = !nondet_0 || a;
t3 = y & a;
t4 = x < 0xe;
I = t3 >> t4;

Fastest checker: explicit
Fails for (0, 2, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 7, 2, 5, 10, 5
Program 0:
t1 = a * b;
t2 = t1 ? nondet_0 : y;
I = ((sword_t) t1) <= ((sword_t) 0xb);

Fastest checker: explicit
Fails for (0, 8, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 6, 2, 8, 6
Program 0:
t1 = 0x2 < a;
t2 = b & 0x2;
t3 = nondet_0 & a;
I = t2 ? t3 : t2;

Fastest checker: explicit
Fails for (1, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 2, 6, 5, 13, 3
Program 0:
t1 = nondet_0 % x;
I = t1 % y;

Fastest checker: explicit
Fails for (1, 0, 0, 2, 2)

[]
Fastest checker: genetic
Evars: 12, 7, 6, 10, 0
Program 0:
t1 = ((sword_t) a) <= ((sword_t) b);
t2 = b % x;
I = 0xc & t2;

Fastest checker: explicit
Fails for (0, 0, 4, 5, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 4, 0, 5
Program 0:
t1 = x != y;
t2 = b + a;
t3 = t1 >> a;
t4 = x < t2;
t5 = !t4 || b;
t6 = -t3;
I = t4 >> x;

Fastest checker: explicit
Fails for (0, 5, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 15, 4, 4, 0, 5
Program 0:
t1 = nondet_0 & x;
t2 = y == a;
t3 = t1 + a;
t4 = t3 + b;
I = t2 >> t3;

Fastest checker: explicit
Fails for (3, 1, 0, 3, 1)

[]
Fastest checker: genetic
Evars: 7, 7, 5, 6, 9
Program 0:
t1 = ((sword_t) 0x6) < ((sword_t) x);
t2 = nondet_0 ? y : b;
I = t1 ? a : t1;

Fastest checker: explicit
Fails for (0, 1, 0, 7, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 3, 6, 3
Program 0:
t1 = x & nondet_0;
t2 = -x;
t3 = t2 & t1;
t4 = -nondet_0;
I = t3 >> 0xd;

Fastest checker: explicit
Fails for (2, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 4, 4, 6, 8, 6
Program 0:
t1 = y * 0xb;
I = t1 <= b;

Fastest checker: explicit
Fails for (0, 0, 11, 1, 1)

[]
Fastest checker: genetic
Evars: 12, 5, 5, 13, 13
Program 0:
t1 = y | nondet_0;
t2 = -x;
t3 = y ? t2 : t1;
t4 = 0xa <= t1;
I = t2 < nondet_0;

Fastest checker: explicit
Fails for (15, 0, 0, 2, 1)

[]
Fastest checker: genetic
Evars: 11, 5, 3, 8, 13
Program 0:
t1 = nondet_0 - y;
t2 = nondet_0 << nondet_0;
t3 = nondet_0 ? a : 0xf;
t4 = x << b;
I = t1 == t2;

Fastest checker: explicit
Fails for (10, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 5, 6, 3, 2, 12
Program 0:
t1 = x * a;
t2 = y ? y : x;
t3 = x != t2;
t4 = t1 != a;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 6, 0, 3, 1)

[]
Fastest checker: genetic
Evars: 10, 2, 5, 5, 7
Program 0:
t1 = b * y;
I = t1 % y;

Fastest checker: explicit
Fails for (0, 0, 6, 1, 3)

[]
Fastest checker: genetic
Evars: 15, 5, 6, 10, 2
Program 0:
t1 = b * a;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 1, 1, 2, 1)

[]
Fastest checker: genetic
Evars: 4, 5, 1, 14, 5
Program 0:
t1 = a ? 0x5 : a;
t2 = 0x5 == x;
I = min(t2, a);

Fastest checker: explicit
Fails for (0, 1, 0, 5, 1)

[]
Fastest checker: genetic
Evars: 13, 3, 3, 8, 15
Program 0:
t1 = b & 0x6;
t2 = nondet_0 & x;
I = t1 % y;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 3)

[]
Fastest checker: genetic
Evars: 11, 7, 7, 14, 2
Program 0:
t1 = -b;
t2 = a >> 0x0;
t3 = t1 ? t1 : nondet_0;
I = t3 < nondet_0;

Fastest checker: explicit
Fails for (15, 0, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 6, 6, 14, 2
Program 0:
t1 = !a || a;
t2 = min(nondet_0, b);
I = t2 >> b;

Fastest checker: explicit
Fails for (1, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 6, 6, 13
Program 0:
t1 = !a || a;
t2 = nondet_0 + y;
t3 = y <= x;
t4 = a == y;
t5 = ((sword_t) 0x5) <= ((sword_t) y);
I = min(b, t5);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 5)

[]
Fastest checker: genetic
Evars: 13, 4, 6, 10, 14
Program 0:
t1 = nondet_0 | b;
t2 = !a || a;
t3 = min(t1, x);
t4 = y & nondet_0;
I = ((sword_t) t4) >> ((sword_t) t4);

Fastest checker: explicit
Fails for (4, 0, 0, 1, 4)

[]
Fastest checker: genetic
Evars: 13, 4, 6, 10, 14
Program 0:
t1 = nondet_0 | b;
t2 = !a || a;
t3 = min(t1, x);
t4 = 0x2 % x;
t5 = ((sword_t) a) <= ((sword_t) t3);
t6 = ((sword_t) t3) >> ((sword_t) t4);
I = t4 & b;

Fastest checker: explicit
Fails for (0, 0, 2, 3, 1)

[]
Fastest checker: genetic
Evars: 3, 6, 4, 14, 15
Program 0:
t1 = b ^ nondet_0;
t2 = ~a;
t3 = ((sword_t) t1) <= ((sword_t) b);
t4 = max(t3, t3);
t5 = y >> t2;
I = min(t5, nondet_0);

Fastest checker: explicit
Fails for (1, 3, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 11, 6, 7, 9, 15
Program 0:
t1 = 0x6 <= b;
I = min(nondet_0, t1);

Fastest checker: explicit
Fails for (1, 0, 6, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 5, 3, 8, 1
Program 0:
t1 = min(a, b);
t2 = y * b;
t3 = t1 & 0x2;
I = t3 * x;

Fastest checker: explicit
Fails for (0, 2, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 7, 6, 4, 9
Program 0:
t1 = ~nondet_0;
t2 = !a || x;
t3 = t2 & t1;
t4 = 0xb - a;
I = t1 < a;

Fastest checker: explicit
Fails for (15, 1, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 3, 5, 11, 4
Program 0:
I = nondet_0 == 0xd;

Fastest checker: explicit
Fails for (13, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 7, 1, 13, 10
Program 0:
t1 = ~a;
t2 = ((sword_t) b) < ((sword_t) a);
t3 = nondet_0 & t2;
t4 = 0x7 ? nondet_0 : t2;
I = b & t3;

Fastest checker: explicit
Fails for (1, 2, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 14, 6, 6, 3, 8
Program 0:
t1 = 0x5 < x;
t2 = x + 0x5;
t3 = nondet_0 * t1;
t4 = nondet_0 ? t1 : nondet_0;
I = t3 & x;

Fastest checker: explicit
Fails for (2, 0, 0, 6, 1)

[]
Fastest checker: genetic
Evars: 15, 6, 4, 7, 13
Program 0:
t1 = ((sword_t) 0x6) <= ((sword_t) a);
I = t1 * b;

Fastest checker: explicit
Fails for (0, 6, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 5, 1, 13
Program 0:
t1 = 0x4 ^ b;
t2 = a != 0x4;
t3 = ((sword_t) t1) >> ((sword_t) nondet_0);
t4 = a != t3;
t5 = t4 ? a : nondet_0;
t6 = min(b, nondet_0);
I = 0x4 & t6;

Fastest checker: explicit
Fails for (4, 0, 4, 1, 1)

[]
Fastest checker: genetic
Evars: 9, 4, 5, 1, 13
Program 0:
t1 = 0x3 ^ b;
t2 = a != 0x3;
t3 = ((sword_t) t1) >> ((sword_t) nondet_0);
t4 = b << 0x3;
t5 = ((sword_t) x) < ((sword_t) b);
t6 = nondet_0 != a;
I = ((sword_t) t5) >> ((sword_t) x);

Fastest checker: explicit
Fails for (0, 0, 5, 4, 1)

[]
Fastest checker: genetic
Evars: 14, 6, 3, 5, 4
Program 0:
t1 = ~b;
t2 = x >> t1;
I = nondet_0 & t2;

Fastest checker: explicit
Fails for (1, 0, 3, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 7, 1, 11, 9
Program 0:
t1 = nondet_0 == y;
t2 = x ^ a;
t3 = a ? a : a;
t4 = b ? t1 : b;
I = 0x5 == nondet_0;

Fastest checker: explicit
Fails for (5, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 2, 5, 7, 9
Program 0:
t1 = 0x8 % y;
I = t1 % x;

Fastest checker: explicit
Fails for (0, 0, 0, 3, 3)

[]
Fastest checker: genetic
Evars: 7, 6, 4, 14, 0
Program 0:
t1 = ((sword_t) y) <= ((sword_t) b);
t2 = a != b;
t3 = y < a;
t4 = ((sword_t) t2) >> ((sword_t) y);
t5 = t3 >> t3;
I = t3 >> y;

Fastest checker: explicit
Fails for (0, 5, 0, 1, 4)

[]
Fastest checker: genetic
Evars: 7, 3, 6, 0, 5
Program 0:
t1 = y ^ b;
t2 = t1 == 0x2;
t3 = 0x2 - y;
t4 = ((sword_t) b) < ((sword_t) nondet_0);
t5 = x | a;
t6 = 0x2 + b;
t7 = ((sword_t) t6) <= ((sword_t) b);
I = t7 & t4;

Fastest checker: explicit
Fails for (7, 0, 6, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 4, 5, 0, 3
Program 0:
t1 = y < b;
t2 = x % y;
I = ((sword_t) t2) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 0, 0, 4, 5)

[]
Fastest checker: genetic
Evars: 13, 7, 5, 10, 2
Program 0:
t1 = ((sword_t) a) >> ((sword_t) x);
t2 = 0x7 == a;
t3 = y / y;
I = t2 * nondet_0;

Fastest checker: explicit
Fails for (1, 7, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 10, 6, 3, 15, 3
Program 0:
t1 = y % x;
t2 = y & 0xa;
t3 = y ? b : y;
t4 = max(0xa, 0xa);
I = nondet_0 == t4;

Fastest checker: explicit
Fails for (10, 0, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 6, 4, 6, 11, 10
Program 0:
t1 = a << nondet_0;
I = t1 < a;

Fastest checker: explicit
Fails for (3, 2, 0, 1, 1)

[]
Fastest checker: genetic
Evars: 13, 4, 7, 10, 2
Program 0:
t1 = x << x;
t2 = y + b;
t3 = t1 & nondet_0;
t4 = 0x4 - t2;
I = ((sword_t) 0x4) <= ((sword_t) t3);

Fastest checker: explicit
Fails for (4, 0, 0, 4, 1)

[]
Fastest checker: genetic
Evars: 0, 1, 4, 1, 5
Program 0:
t1 = x < y;
t2 = y << b;
t3 = x * t2;
t4 = max(a, y);
I = b == t3;

Fastest checker: explicit
Fails for (0, 0, 4, 4, 1)

[]
Fastest checker: genetic
Evars: 2, 7, 7, 15, 13
Program 0:
t1 = 0x7 == y;
I = t1 & a;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 7)

[]
Fastest checker: genetic
Evars: 15, 5, 3, 7, 11
Program 0:
t1 = ~nondet_0;
t2 = a % y;
t3 = a & y;
I = ((sword_t) t2) >> ((sword_t) a);

Fastest checker: explicit
Fails for (0, 4, 0, 1, 3)

[]
Fastest checker: genetic
Evars: 14, 4, 2, 10, 7
Program 0:
t1 = b & x;
t2 = a ? x : 0x1;
t3 = b >> nondet_0;
t4 = t3 < b;
I = ((sword_t) t4) >> ((sword_t) x);

Fastest checker: explicit
Fails for (1, 0, 1, 4, 1)

[]
Fastest checker: genetic
Evars: 3, 5, 3, 6, 7
Program 0:
t1 = ((sword_t) nondet_0) <= ((sword_t) a);
t2 = t1 | y;
t3 = a & nondet_0;
t4 = a << y;
t5 = nondet_0 ^ nondet_0;
t6 = !t4 || 0xd;
I = t4 % y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 3)

[]







Timeout
Perf counters:
{'genetic': 142, 'explicit': 142, 'timeout': 1, 'iterations': 143}
Perf timers:
verify: 3.45s
checker: 117.19s
gcc: 0.88s
_: 120.00s
synth: 114.19s
