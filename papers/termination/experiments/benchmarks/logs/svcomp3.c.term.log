Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = x >>> 0x0;
t2 = 0x0 * 0x0;
res1 = min(x, y);
Program 1:
res1 = 0x7 s<= 0x7;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 2)

[]
Fastest checker: genetic
Program 0:
res1 = y & 0xf;
Program 1:
t1 = max(0x7, nondet_1);
t2 = x s< y;
t3 = t2 ==> nondet_1;
t4 = y s<= nondet_1;
res1 = t1 - 0x7;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= y;
t2 = nondet_0 >>> x;
t3 = x ==> y;
t4 = z >> t3;
res1 = t4 s<= 0x7;
Program 1:
t1 = x >> 0x1;
t2 = x % nondet_1;
t3 = nondet_1 s<= nondet_0;
t4 = t3 % t2;
res1 = min(z, x);

Fastest checker: explicit
Fails for (0, 0, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_1 ==> y;
Program 1:
res1 = x ^ nondet_0;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y != y;
res1 = y - z;
Program 1:
res1 = z >>> nondet_1;

Fastest checker: explicit
Fails for (1, 1, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = min(0x7, nondet_0);
t2 = ~z;
t3 = y << nondet_0;
res1 = nondet_0 ^ t2;
Program 1:
t1 = x % z;
t2 = z + nondet_0;
t3 = z - t2;
res1 = -y;

Fastest checker: explicit
Fails for (0, 12, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
res1 = max(nondet_1, z);
Program 1:
t1 = z & 0x1;
t2 = nondet_0 * t1;
t3 = t2 >>> nondet_0;
res1 = nondet_0 <= t3;

Fastest checker: explicit
Fails for (0, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y <= 0x0;
res1 = ~nondet_1;
Program 1:
t1 = z s< nondet_1;
t2 = z - 0x7;
t3 = nondet_1 << z;
res1 = nondet_1 & y;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x ? nondet_1 : 0x0;
t2 = nondet_1 == t1;
t3 = t2 ? nondet_1 : t1;
res1 = ~t3;
Program 1:
t1 = nondet_0 ? z : nondet_0;
t2 = y - z;
t3 = nondet_0 s<= x;
t4 = z | t2;
res1 = t4 ==> nondet_1;

Fastest checker: explicit
Fails for (5, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
res1 = y != z;
Program 1:
t1 = nondet_0 <= 0x1;
t2 = -nondet_0;
t3 = x << z;
t4 = -nondet_0;
res1 = t1 ^ t3;

Fastest checker: explicit
Fails for (6, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z << z;
res1 = z | nondet_1;
Program 1:
t1 = -y;
t2 = z << z;
t3 = -0x8;
t4 = 0x8 >>> t2;
res1 = t1 << t4;

Fastest checker: explicit
Fails for (0, 2, 2, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = max(0x1, y);
t2 = x + t1;
t3 = 0x1 ? z : nondet_1;
t4 = nondet_1 << t1;
res1 = ~x;
Program 1:
t1 = z | nondet_1;
res1 = z << y;

Fastest checker: explicit
Fails for (0, 15, 2, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 >>> y;
t2 = x / 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = x + z;
t2 = nondet_0 + nondet_0;
t3 = t1 <= y;
t4 = 0xf * x;
res1 = t1 * z;

Fastest checker: explicit
Fails for (0, 0, 3, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 != y;
t2 = y s< nondet_0;
t3 = nondet_1 s< t2;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = nondet_0 - y;
t2 = 0x8 s< x;
res1 = nondet_0 * y;

Fastest checker: explicit
Fails for (0, 3, 3, 2, 3)

[]
Fastest checker: genetic
Program 0:
res1 = 0xf << x;
Program 1:
t1 = -z;
t2 = t1 | z;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;

Fastest checker: explicit
Fails for (2, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z ^ 0x7;
t2 = t1 + t1;
t3 = ~nondet_0;
res1 = 0x7 + 0x7;
Program 1:
t1 = z ^ 0x8;
res1 = x s<= y;

Fastest checker: explicit
Fails for (8, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, z);
t2 = 0xf & z;
res1 = 0xf + 0xf;
Program 1:
t1 = nondet_0 / 0x8;
t2 = ~x;
t3 = 0x8 | nondet_1;
t4 = ~y;
res1 = t3 * z;

Fastest checker: explicit
Fails for (11, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 ? z : nondet_1;
t2 = x | 0x7;
t3 = nondet_1 - z;
res1 = 0x7 + 0x7;
Program 1:
t1 = ~x;
res1 = z << y;

Fastest checker: explicit
Fails for (0, 1, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z << 0x1;
t2 = nondet_1 ==> t1;
t3 = 0x1 << x;
t4 = -t3;
res1 = 0x1 + 0x1;
Program 1:
t1 = z + z;
t2 = -x;
res1 = nondet_1 != nondet_0;

Fastest checker: explicit
Fails for (1, 0, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z <= 0xf;
t2 = 0xf <= z;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = x < z;
t2 = 0x1 | nondet_1;
t3 = max(z, nondet_1);
t4 = 0x1 + 0x1;
res1 = t4 ==> x;

Fastest checker: explicit
Fails for (3, 1, 3, 3, 3)

[]
Fastest checker: genetic
Program 0:
res1 = x s<= x;
Program 1:
t1 = z >>> nondet_1;
t2 = nondet_1 & nondet_0;
t3 = x != nondet_1;
res1 = t2 * y;

Fastest checker: explicit
Fails for (6, 1, 3, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 + nondet_0;
t2 = 0x8 ^ x;
res1 = 0x8 - z;
Program 1:
t1 = nondet_1 ^ x;
res1 = z << y;

Fastest checker: explicit
Fails for (0, 3, 3, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ==> y;
res1 = 0x8 - y;
Program 1:
t1 = 0x7 & nondet_0;
t2 = x - nondet_1;
t3 = z * z;
t4 = y == nondet_1;
res1 = x == y;

Fastest checker: explicit
Fails for (0, 9, 3, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 | 0x1;
t2 = nondet_1 < 0x1;
t3 = 0x1 + 0x1;
t4 = 0x1 + 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = -z;
res1 = z * z;

Fastest checker: explicit
Fails for (4, 0, 1, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 < z;
t2 = 0x1 + 0x1;
t3 = x s<= z;
t4 = x ? 0x1 : nondet_0;
res1 = 0x1 + 0x1;
Program 1:
t1 = z + nondet_0;
t2 = -x;
t3 = z << 0x7;
res1 = nondet_1 == 0x7;

Fastest checker: explicit
Fails for (2, 13, 2, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = 0xf + 0xf;
t3 = t2 ^ nondet_1;
res1 = 0xf ==> t2;
Program 1:
t1 = max(z, nondet_0);
t2 = y + t1;
t3 = 0x8 + 0x8;
t4 = -x;
res1 = z * z;

Fastest checker: explicit
Fails for (4, 11, 4, 5, 3)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 s<= nondet_0;
Program 1:
t1 = z * y;
t2 = nondet_1 | 0x8;
t3 = 0x8 + 0x8;
t4 = -x;
res1 = z * z;

Fastest checker: explicit
Fails for (4, 0, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y / 0x8;
t2 = ~x;
res1 = nondet_1 + z;
Program 1:
t1 = z << y;
t2 = z + t1;
t3 = t2 * y;
t4 = z * z;
res1 = 0x1 + 0x1;

Fastest checker: explicit
Fails for (13, 0, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> x;
t2 = t1 - nondet_1;
t3 = 0xf + 0xf;
t4 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = 0xf << y;
t2 = nondet_1 - x;
t3 = 0xf + 0xf;
t4 = t3 | z;
res1 = 0xf + 0xf;

Fastest checker: explicit
Fails for (2, 0, 2, 7, 3)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = z + y;
t2 = x <= y;
t3 = 0x7 + 0x7;
t4 = -0x7;
res1 = nondet_1 < x;

Fastest checker: explicit
Fails for (7, 8, 7, 7, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z << y;
t2 = t1 & t1;
res1 = 0x7 + 0x7;
Program 1:
t1 = nondet_0 s<= x;
t2 = z + y;
t3 = nondet_1 | x;
t4 = 0x8 + 0x8;
res1 = z * z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf ==> 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = y + z;
t2 = nondet_0 * x;
res1 = t1 - x;

Fastest checker: explicit
Fails for (0, 3, 3, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = y ==> 0x1;
t2 = z s<= 0x1;
t3 = max(0x1, 0x1);
t4 = nondet_0 < nondet_1;
res1 = 0x1 + 0x1;
Program 1:
t1 = z + 0x7;
t2 = x s<= y;
t3 = 0x7 + 0x7;
res1 = x < 0x7;

Fastest checker: explicit
Fails for (0, 0, 7, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = 0xf + 0xf;
t3 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = max(nondet_1, z);
t2 = z - x;
res1 = t2 + y;

Fastest checker: explicit
Fails for (0, 0, 4, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z <= nondet_1;
t2 = y ^ 0x1;
res1 = 0x1 + 0x1;
Program 1:
t1 = z * z;
t2 = y + z;
t3 = z & 0xf;
t4 = z + y;
res1 = t4 - x;

Fastest checker: explicit
Fails for (0, 5, 4, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + 0x7;
t2 = 0x7 + 0x7;
t3 = 0x7 + 0x7;
res1 = z + 0x7;
Program 1:
t1 = z << y;
t2 = z + y;
t3 = z + z;
res1 = t2 - x;

Fastest checker: explicit
Fails for (0, 0, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 s< 0xf;
t2 = 0xf + 0xf;
t3 = 0xf + nondet_0;
res1 = z ==> z;
Program 1:
t1 = y + z;
t2 = -x;
t3 = 0x7 + z;
res1 = t3 < t2;

Fastest checker: explicit
Fails for (0, 1, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = nondet_0 == t1;
t3 = -0xf;
t4 = nondet_0 + x;
res1 = 0xf + 0xf;
Program 1:
t1 = nondet_0 - x;
t2 = z s< y;
t3 = z + 0x1;
res1 = nondet_1 != t3;

Fastest checker: explicit
Fails for (5, 1, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 << x;
t2 = nondet_0 - y;
t3 = 0x7 + 0x7;
res1 = 0x7 / 0x7;
Program 1:
t1 = z + z;
t2 = 0x8 + 0x8;
t3 = t2 s< x;
t4 = nondet_1 >> y;
res1 = t2 < y;

Fastest checker: explicit
Fails for (2, 2, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf + 0xf;
t2 = nondet_0 * nondet_0;
res1 = 0xf + 0xf;
Program 1:
t1 = nondet_0 != z;
t2 = z + nondet_1;
t3 = x <= y;
res1 = t3 s<= x;

Fastest checker: explicit
Fails for (12, 2, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 + 0x7;
Program 1:
t1 = 0x7 + 0x7;
t2 = z - 0x7;
t3 = x ==> z;
t4 = x s<= y;
res1 = nondet_1 s< nondet_0;

Fastest checker: explicit
Fails for (0, 8, 5, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 & x;
t2 = 0x7 + 0x7;
t3 = 0x7 + 0x7;
res1 = 0x7 + 0x7;
Program 1:
t1 = z + 0x8;
t2 = x < y;
res1 = nondet_0 s<= y;

Fastest checker: explicit
Fails for (0, 4, 1, 3, 4)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 + 0x1;
Program 1:
t1 = z - 0x8;
t2 = x < y;
res1 = 0x8 ==> x;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc







Finished in 146.36s

Program 0:
res1 = 0x11111111 + 0x11111111;
Program 1:
t1 = z - 0x88888888;
t2 = x < y;
res1 = 0x88888888 ==> x;


Perf counters:
{'genetic': 43, 'cbmc': 2, 'explicit': 43, 'iterations': 43}
Perf timers:
gcc: 0.54s
verify: 2.67s
checker: 146.28s
generalize: 0.94s
synth: 143.66s
_: 146.36s
