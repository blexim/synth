Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = x >>> 0x5;
Program 1:
t1 = nondet_1 s<= z;
t2 = min(z, z);
I = nondet_0 s<= nondet_0;

Fastest checker: explicit
Fails for (0, 0, 0, 10, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y & 0xa;
I = 0xa >> z;
Program 1:
I = x s< x;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = max(0x2, nondet_1);
t2 = nondet_0 - t1;
I = t2 / t1;
Program 1:
I = min(0x4, z);

Fastest checker: explicit
Fails for (9, 0, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
I = 0xd >>> 0xd;
Program 1:
t1 = ~nondet_1;
t2 = max(0xa, z);
I = x * 0xa;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z != nondet_1;
t2 = -y;
I = y ==> t2;
Program 1:
I = min(x, y);

Fastest checker: explicit
Fails for (0, 2, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x ? 0x2 : z;
t2 = nondet_1 ? 0x2 : y;
I = t1 + nondet_1;
Program 1:
t1 = -nondet_1;
t2 = t1 + z;
I = -nondet_1;

Fastest checker: explicit
Fails for (3, 2, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
I = ~nondet_0;
Program 1:
t1 = x >> nondet_0;
t2 = t1 | y;
I = z + t1;

Fastest checker: explicit
Fails for (0, 4, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
I = max(z, nondet_1);
Program 1:
t1 = max(0x6, 0x6);
t2 = t1 < nondet_0;
I = 0x6 | z;

Fastest checker: explicit
Fails for (0, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
I = z ==> 0x8;
Program 1:
t1 = y ? x : 0x0;
I = -t1;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
I = y s<= y;
Program 1:
I = x ? z : nondet_0;

Fastest checker: explicit
Fails for (4, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x >>> 0x5;
I = x + y;
Program 1:
t1 = max(z, z);
I = 0x0 - x;

Fastest checker: explicit
Fails for (13, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x >> x;
t2 = nondet_0 <= z;
I = z <= z;
Program 1:
t1 = nondet_0 | nondet_0;
t2 = nondet_1 | z;
t3 = x | nondet_0;
t4 = z + z;
t5 = nondet_0 + nondet_0;
I = y + 0xd;

Fastest checker: explicit
Fails for (0, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> x;
t3 = x + 0x6;
I = x + z;
Program 1:
t1 = nondet_0 | nondet_0;
t2 = nondet_1 | z;
t3 = x | nondet_0;
I = 0xd + y;

Fastest checker: explicit
Fails for (2, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
I = 0x6 + z;
Program 1:
t1 = nondet_0 | nondet_0;
t2 = z + z;
t3 = z + x;
I = x s<= z;

Fastest checker: explicit
Fails for (8, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> x;
I = 0x6 + x;
Program 1:
t1 = x + x;
t2 = z + nondet_1;
I = 0xd + t1;

Fastest checker: explicit
Fails for (10, 0, 1, 3, 3)

[]
Fastest checker: genetic
Program 0:
I = x ==> x;
Program 1:
t1 = nondet_1 | z;
t2 = nondet_1 + z;
I = -x;

Fastest checker: explicit
Fails for (1, 0, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z ? y : x;
t2 = z == nondet_0;
t3 = y >> t2;
I = y + z;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (14, 0, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z == nondet_0;
t2 = y >> t1;
I = t1 + z;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (1, 1, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0xb - 0xb;
t2 = y + nondet_0;
t3 = y == nondet_0;
t4 = 0xb + x;
I = nondet_0 + y;
Program 1:
t1 = z / 0xb;
t2 = nondet_0 + x;
t3 = nondet_0 | nondet_0;
t4 = nondet_1 + z;
t5 = x != nondet_1;
I = t5 + nondet_1;

Fastest checker: explicit
Fails for (15, 1, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 s< x;
t2 = 0xd != nondet_0;
t3 = 0xd * 0xd;
I = 0xd + x;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (3, 2, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 s< x;
I = 0xd != nondet_0;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (0, 13, 2, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y - y;
t2 = nondet_1 + z;
t3 = 0xe s<= nondet_0;
I = 0xe != y;
Program 1:
t1 = -x;
t2 = z + 0x9;
I = t1 | y;

Fastest checker: explicit
Fails for (0, 15, 3, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
I = 0x6 + nondet_0;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (0, 10, 4, 3, 3)

[]
Fastest checker: genetic
Program 0:
I = z | 0x2;
Program 1:
t1 = z * nondet_1;
t2 = nondet_1 - x;
I = t2 ? z : t2;

Fastest checker: explicit
Fails for (4, 10, 4, 3, 3)

[]
Fastest checker: genetic
Program 0:
I = 0x6 - z;
Program 1:
t1 = y - x;
I = t1 + z;

Fastest checker: explicit
Fails for (0, 0, 5, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y < z;
t2 = z != z;
t3 = 0x7 <= 0x7;
I = 0x7 - x;
Program 1:
t1 = x << y;
t2 = x ? 0xb : nondet_0;
t3 = max(nondet_1, t2);
I = z + 0xb;

Fastest checker: explicit
Fails for (0, 7, 5, 3, 3)

[]
Fastest checker: genetic
Program 0:
t1 = y < z;
t2 = ~z;
I = 0x7 | x;
Program 1:
t1 = x << y;
t2 = x ? 0xb : nondet_0;
t3 = max(nondet_1, t2);
I = z + 0xb;

Fastest checker: explicit
Fails for (5, 0, 1, 4, 3)

[]
Fastest checker: genetic
Program 0:
I = y == y;
Program 1:
t1 = nondet_0 | nondet_0;
t2 = nondet_1 | z;
t3 = -x;
I = 0xd >>> z;

Fastest checker: explicit
Fails for (3, 0, 3, 4, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z == z;
t2 = t1 ? nondet_1 : t1;
t3 = y ? t2 : x;
t4 = 0xb + nondet_0;
I = 0xb != z;
Program 1:
t1 = nondet_1 == y;
t2 = nondet_1 ==> 0x6;
t3 = nondet_0 s<= nondet_0;
t4 = x + nondet_0;
t5 = nondet_1 | nondet_0;
t6 = x << y;
I = z << 0x6;

Fastest checker: explicit
Fails for (12, 0, 3, 4, 3)

[]
Fastest checker: genetic
Program 0:
I = y == y;
Program 1:
t1 = x << nondet_0;
t2 = min(nondet_1, nondet_0);
t3 = 0xc + 0xc;
t4 = z + 0xc;
t5 = x + 0xc;
t6 = ~x;
I = z + 0xc;

Fastest checker: explicit
Fails for (4, 0, 4, 5, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 ^ nondet_1;
t2 = 0x6 | nondet_0;
I = 0x6 + z;
Program 1:
t1 = x << y;
I = z + 0xc;

Fastest checker: explicit
Fails for (11, 0, 4, 5, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z + 0x3;
t2 = 0x3 + nondet_0;
I = 0x3 | z;
Program 1:
t1 = nondet_0 | nondet_0;
t2 = x << nondet_0;
t3 = nondet_1 << nondet_0;
t4 = x << y;
I = z + 0xc;

Fastest checker: explicit
Fails for (4, 0, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 == z;
I = max(t1, z);
Program 1:
t1 = x s<= z;
t2 = z | y;
t3 = z + 0xe;
t4 = 0xe + t3;
I = 0xe s< t4;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> x;
I = z ^ 0x6;
Program 1:
t1 = ~z;
t2 = 0xd + y;
t3 = -x;
t4 = nondet_1 * 0xd;
I = nondet_1 ==> z;

Fastest checker: explicit
Fails for (0, 1, 2, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z ? nondet_0 : 0x6;
t2 = y ==> z;
t3 = x >> nondet_0;
t4 = z + z;
t5 = nondet_0 ^ 0x6;
I = max(nondet_0, t5);
Program 1:
t1 = min(0x7, z);
t2 = z % 0x7;
t3 = x s< y;
I = nondet_1 s<= z;

Fastest checker: explicit
Fails for (0, 8, 2, 1, 4)

[]
Fastest checker: genetic
Program 0:
I = z ==> 0xe;
Program 1:
t1 = min(x, y);
t2 = t1 >>> x;
t3 = nondet_0 s<= nondet_0;
t4 = nondet_0 - x;
I = nondet_1 s<= z;

Fastest checker: explicit
Fails for (0, 3, 3, 1, 4)

[]
Fastest checker: genetic
Program 0:
I = max(y, 0x8);
Program 1:
t1 = y + x;
t2 = z + 0x6;
t3 = 0x6 ==> y;
t4 = x < nondet_1;
t5 = nondet_1 & 0x6;
I = ~nondet_1;

Fastest checker: explicit
Fails for (1, 0, 4, 1, 4)

[]







Timeout
Perf counters:
{'genetic': 37, 'explicit': 37, 'timeout': 1, 'iterations': 38}
Perf timers:
verify: 0.44s
checker: 119.69s
gcc: 0.44s
_: 120.00s
synth: 119.35s
