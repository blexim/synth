Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = y & 0x2;
res1 = 0x2 >> z;
Program 1:
res1 = x s< x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 == y;
Program 1:
t1 = 0x5 ^ y;
res1 = 0x5 ? y : nondet_0;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, 0x2);
t2 = t1 + 0x2;
res1 = -z;
Program 1:
res1 = x <= z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 s< nondet_0;
res1 = nondet_1 s< t1;
Program 1:
t1 = z ^ nondet_1;
res1 = nondet_0 - 0x4;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
res1 = 0x5 >>> 0x5;
Program 1:
t1 = ~nondet_1;
t2 = max(0x2, z);
res1 = x * 0x2;

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 - x;
t2 = -t1;
res1 = 0x7 >>> t1;
Program 1:
t1 = z >> 0x0;
res1 = 0x0 s<= z;

Fastest checker: explicit
Fails for (3, 0, 1, 2, 2)

[]
Fastest checker: genetic
Program 0:
res1 = 0x3 ^ y;
Program 1:
t1 = 0x2 ^ x;
res1 = 0x2 & z;

Fastest checker: explicit
Fails for (4, 0, 1, 2, 2)

[]
Fastest checker: genetic
Program 0:
res1 = y | 0x7;
Program 1:
t1 = nondet_1 s<= y;
t2 = min(z, 0x0);
t3 = nondet_0 & nondet_0;
t4 = t2 + z;
res1 = 0x0 - x;

Fastest checker: explicit
Fails for (0, 1, 2, 2, 2)

[]
Fastest checker: genetic
Program 0:
res1 = ~nondet_1;
Program 1:
t1 = 0x3 - x;
res1 = z * 0x3;

Fastest checker: explicit
Fails for (7, 1, 2, 2, 2)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 | z;
Program 1:
t1 = z s< y;
t2 = -x;
t3 = nondet_0 + t1;
res1 = -y;

Fastest checker: explicit
Fails for (0, 2, 2, 2, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_1;
t2 = max(0x7, 0x7);
t3 = x <= z;
t4 = z ? 0x7 : y;
res1 = z + z;
Program 1:
t1 = max(nondet_1, nondet_0);
t2 = x << t1;
t3 = nondet_1 + z;
t4 = x + t3;
res1 = nondet_0 s<= nondet_0;

Fastest checker: explicit
Fails for (4, 2, 2, 2, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_1;
res1 = max(0x3, 0x3);
Program 1:
t1 = nondet_1 s<= nondet_0;
t2 = x < nondet_1;
t3 = z s<= y;
res1 = t3 + z;

Fastest checker: explicit
Fails for (5, 0, 1, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 - nondet_1;
res1 = 0x4 ? z : z;
Program 1:
t1 = 0x6 & y;
t2 = z + nondet_1;
res1 = nondet_0 - x;

Fastest checker: explicit
Fails for (0, 1, 1, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x5;
res1 = 0x5 <= 0x5;
Program 1:
t1 = z << x;
res1 = 0x1 << z;

Fastest checker: explicit
Fails for (6, 1, 1, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = -0x6;
t2 = x < z;
t3 = x ? z : t1;
t4 = t2 + z;
res1 = 0x6 + 0x6;
Program 1:
t1 = -z;
t2 = y s< t1;
t3 = nondet_1 - x;
res1 = x == y;

Fastest checker: explicit
Fails for (2, 2, 1, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = z | 0x2;
t2 = -t1;
t3 = t2 <= nondet_0;
t4 = ~t3;
res1 = 0x2 == 0x2;
Program 1:
t1 = y * y;
t2 = x * t1;
t3 = nondet_1 ? nondet_0 : nondet_1;
res1 = x s<= z;

Fastest checker: explicit
Fails for (0, 0, 3, 3, 2)

[]
Fastest checker: genetic
Program 0:
res1 = y | 0x7;
Program 1:
t1 = x ^ y;
res1 = z * z;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 ==> nondet_0;
t2 = min(y, 0x5);
t3 = 0x5 + y;
t4 = x + z;
t5 = -x;
t6 = t4 < z;
res1 = 0x5 ? 0x5 : nondet_0;
Program 1:
t1 = min(z, y);
t2 = nondet_1 + x;
res1 = x s< y;

Fastest checker: explicit
Fails for (7, 0, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 ? z : x;
t2 = x % z;
res1 = x ==> z;
Program 1:
t1 = -x;
res1 = y - 0x4;

Fastest checker: explicit
Fails for (0, 3, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_0;
res1 = 0x2 + 0x2;
Program 1:
t1 = nondet_0 ? nondet_0 : nondet_0;
t2 = 0x6 / 0x6;
t3 = x <= y;
res1 = t3 + y;

Fastest checker: explicit
Fails for (0, 4, 1, 1, 3)

[]
Fastest checker: genetic
Program 0:
res1 = max(nondet_0, 0x3);
Program 1:
t1 = nondet_0 + z;
res1 = x <= y;

Fastest checker: explicit
Fails for (0, 0, 2, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z & nondet_0;
t2 = 0x1 < y;
t3 = x s<= z;
t4 = x < z;
t5 = t3 ? t2 : y;
res1 = 0x1 ? 0x1 : t4;
Program 1:
t1 = z s< z;
t2 = nondet_1 - x;
res1 = x s<= y;

Fastest checker: explicit
Fails for (2, 0, 2, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = ~nondet_1;
t2 = y ? 0x5 : z;
res1 = 0x5 ? z : z;
Program 1:
t1 = y < 0x0;
t2 = y + y;
t3 = nondet_1 < y;
t4 = t2 >> y;
t5 = t1 ==> z;
t6 = t4 s<= z;
t7 = z ==> nondet_1;
res1 = t4 == x;

Fastest checker: explicit
Fails for (0, 2, 2, 1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 & 0x0;
t2 = t1 s<= 0x0;
t3 = ~nondet_1;
res1 = ~0x0;
Program 1:
t1 = y << x;
t2 = t1 >>> nondet_0;
t3 = z != z;
t4 = nondet_1 ==> t2;
t5 = z s<= y;
t6 = nondet_0 ==> nondet_0;
t7 = z << nondet_1;
t8 = z + t4;
res1 = t5 s<= x;

Fastest checker: explicit
Fails for (2, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >> 0x5;
res1 = 0x5 << z;
Program 1:
t1 = 0x6 >>> z;
t2 = x != z;
t3 = y ==> t1;
t4 = t3 == x;
t5 = nondet_0 ==> nondet_0;
t6 = t3 == 0x6;
t7 = z + t3;
res1 = t4 s<= x;

Fastest checker: explicit
Fails for (3, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = ~x;
Program 1:
t1 = nondet_1 ^ z;
t2 = x * 0x7;
res1 = z & t2;

Fastest checker: explicit
Fails for (7, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = min(nondet_0, nondet_0);
t2 = y & nondet_0;
t3 = 0x7 s<= nondet_1;
t4 = x - 0x7;
res1 = ~t1;
Program 1:
t1 = 0x5 | y;
t2 = x >> nondet_0;
t3 = min(nondet_0, t2);
t4 = z - nondet_1;
t5 = x <= z;
res1 = t3 s< x;

Fastest checker: explicit
Fails for (0, 3, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y + x;
t2 = nondet_0 * t1;
t3 = nondet_1 ^ 0x6;
res1 = 0x6 + 0x6;
Program 1:
t1 = 0x4 ==> 0x4;
t2 = -y;
t3 = t1 s< nondet_0;
t4 = x <= y;
t5 = z * x;
t6 = -x;
res1 = min(t4, x);

Fastest checker: explicit
Fails for (0, 1, 3, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x5 >> nondet_0;
Program 1:
t1 = nondet_0 ==> y;
t2 = t1 == x;
t3 = nondet_0 - nondet_0;
t4 = t1 == z;
t5 = z + t1;
res1 = t2 << x;

Fastest checker: explicit
Fails for (1, 0, 2, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z - 0x2;
res1 = max(0x2, t1);
Program 1:
t1 = x < y;
t2 = z s< t1;
t3 = x ? z : z;
res1 = t1 * x;

Fastest checker: explicit
Fails for (2, 0, 1, 2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 ==> y;
res1 = 0x7 >> nondet_1;
Program 1:
t1 = 0x1 == 0x1;
t2 = t1 == x;
t3 = nondet_0 ==> nondet_0;
t4 = t1 == nondet_1;
t5 = z + y;
res1 = t2 s<= x;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 * y;
t2 = nondet_0 - x;
t3 = t2 | nondet_0;
t4 = t1 s<= z;
t5 = x <= 0x7;
t6 = nondet_0 | t5;
t7 = y + t5;
res1 = 0x7 << 0x7;
Program 1:
t1 = z * x;
t2 = z >>> x;
t3 = nondet_1 <= y;
t4 = z >>> nondet_1;
t5 = x <= z;
res1 = t3 s<= x;

Fastest checker: explicit
Fails for (2, 3, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x s<= z;
t2 = x <= 0x3;
t3 = nondet_0 | nondet_0;
t4 = y + t2;
res1 = 0x3 << 0x3;
Program 1:
t1 = z | x;
t2 = 0x4 >>> x;
t3 = y <= y;
t4 = z >>> nondet_1;
t5 = x <= z;
res1 = t3 s<= x;

Fastest checker: explicit
Fails for (1, 1, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
res1 = 0x7 >> z;
Program 1:
t1 = x != nondet_0;
t2 = y ==> x;
t3 = t2 == x;
t4 = nondet_0 == nondet_1;
t5 = t2 == 0x2;
t6 = z + y;
res1 = t3 s<= x;

Fastest checker: explicit
Fails for (0, 3, 3, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 - nondet_0;
t2 = y < z;
res1 = 0x4 | 0x4;
Program 1:
t1 = nondet_0 < z;
t2 = t1 != z;
t3 = x <= z;
res1 = t1 <= x;

Fastest checker: explicit
Fails for (0, 7, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
res1 = -0x3;
Program 1:
t1 = x < y;
t2 = y s< t1;
t3 = x ? z : z;
res1 = min(t1, x);

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 36.69s

Program 0:
res1 = -0x3;
Program 1:
t1 = x < y;
t2 = y s< t1;
t3 = x ? z : z;
res1 = min(t1, x);


Perf counters:
{'genetic': 36, 'cbmc': 1, 'explicit': 36, 'iterations': 36}
Perf timers:
verify: 2.45s
checker: 36.61s
gcc: 0.64s
_: 36.69s
synth: 34.22s
