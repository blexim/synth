Using seed: 1337
[]
Fastest checker: genetic
Evars: 3, 2
Program 0:
t1 = y1 != y2;
t2 = y2 & 0x6;
I = y2 <= t2;

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = y1 != y2;
t2 = y2 & t1;
t3 = ~y1;
I = t1 == y1;

Fastest checker: explicit
Fails for (1, 4)

[]
Fastest checker: genetic
Evars: 1, 3
Program 0:
t1 = y1 >>> 0x1;
I = 0x1 >>> y2;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = y2 | 0x2;
I = 0x2 / t1;

Fastest checker: explicit
Fails for (0, 2)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = y2 >>> 0x1;
t2 = min(y2, y1);
I = t1 == y1;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = 0x5 << 0x5;
t2 = y2 * y1;
I = y2 == t2;

Fastest checker: explicit
Fails for (1, 5)

[]
Fastest checker: genetic
Evars: 2, 3
Program 0:
t1 = y2 ==> y1;
t2 = t1 & y1;
t3 = 0x0 * y2;
I = t1 >>> y2;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: explicit
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 6
[]
Fastest checker: genetic
Evars: 3, 1
Program 0:
I = y1 != y2;

Fastest checker: explicit
Fails for (22, 43)

[]
Fastest checker: genetic
Evars: 2, 1
Program 0:
t1 = 0x7 == 0x7;
I = y2 <= t1;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Evars: 1, 3
Program 0:
t1 = y2 >>> y1;
t2 = min(y2, y1);
I = t1 == t2;

Fastest checker: explicit
Fails for (6, 1)

[]
Fastest checker: genetic
Evars: 1, 2
Program 0:
t1 = 0x5 << 0x5;
t2 = y2 * y1;
I = y2 == t2;

Fastest checker: explicit
Fails for (17, 4)

[]
Fastest checker: genetic
Evars: 29, 24
Program 0:
t1 = y2 + y1;
t2 = 0x39 ? t1 : y2;
t3 = y1 == 0x39;
I = t2 >>> y2;

Fastest checker: explicit
Fails for (27, 5)

[]
Fastest checker: genetic
Evars: 6, 4
Program 0:
t1 = min(0xa, y2);
t2 = y2 | y2;
t3 = t2 & 0xa;
t4 = y1 + y2;
t5 = y1 >>> 0xa;
I = y1 & t4;

Fastest checker: explicit
Fails for (8, 6)

[]
Fastest checker: genetic
Evars: 3, 20
Program 0:
t1 = y2 << 0x2d;
t2 = -0x2d;
t3 = y2 >>> t2;
I = y1 << t3;

Fastest checker: explicit
Fails for (12, 6)

[]
Fastest checker: genetic
Evars: 3, 27
Program 0:
t1 = y2 % 0x15;
I = t1 s< y2;

Fastest checker: explicit
Fails for (0, 21)

[]
Fastest checker: genetic
Evars: 19, 20
Program 0:
t1 = -0x14;
t2 = y2 << t1;
t3 = t2 << y1;
I = 0x14 == y2;

Fastest checker: explicit
Fails for (0, 20)

[]
Fastest checker: genetic
Evars: 24, 30
Program 0:
t1 = y2 + 0x2f;
t2 = y1 ? y2 : 0x2f;
I = y1 s< t2;

Fastest checker: explicit
Fails for (1, 20)

[]
Fastest checker: genetic
Evars: 16, 14
Program 0:
t1 = 0x17 >> 0x17;
t2 = y2 + y2;
I = 0x17 s<= t2;

Fastest checker: explicit
Fails for (24, 44)

[]
Fastest checker: genetic
Evars: 2, 29
Program 0:
I = 0x18 s< y2;

Fastest checker: explicit
Fails for (0, 25)

[]
Fastest checker: genetic
Evars: 19, 30
Program 0:
t1 = max(0x1b, y1);
I = t1 s<= y2;

Fastest checker: explicit
Fails for (0, 27)

[]
Fastest checker: genetic
Evars: 26, 9
Program 0:
t1 = min(0x1b, y1);
t2 = 0x1b * y1;
I = y2 <= t2;

Fastest checker: explicit
Fails for (30, 27)

[]
Fastest checker: genetic
Evars: 27, 30
Program 0:
I = 0x1b s< y2;

Fastest checker: explicit
Fails for (0, 28)

[]
Fastest checker: genetic
Evars: 2, 1
Program 0:
t1 = y2 ==> y1;
t2 = t1 < 0x26;
I = y2 == t1;

Fastest checker: explicit
Fails for (2, 1)

[]
Fastest checker: genetic
Evars: 11, 12
Program 0:
t1 = min(0xb, 0xb);
I = t1 == y1;

Fastest checker: explicit
Fails for (11, 1)

[]
Fastest checker: genetic
Evars: 7, 29
Program 0:
t1 = min(y1, y2);
t2 = y2 | y2;
I = 0x7 == y1;

Fastest checker: explicit
Fails for (7, 2)

[]
Fastest checker: genetic
Evars: 16, 25
Program 0:
I = 0x10 == y1;

Fastest checker: explicit
Fails for (16, 2)

[]
Fastest checker: genetic
Evars: 3, 26
Program 0:
t1 = y2 / y2;
t2 = 0xd << t1;
t3 = t2 s<= t1;
t4 = t3 | y2;
I = t2 == t4;

Fastest checker: explicit
Fails for (0, 26)

[]
Fastest checker: genetic
Evars: 12, 19
Program 0:
t1 = 0x19 == 0x19;
t2 = 0x19 ^ t1;
t3 = 0x19 <= t1;
t4 = -y2;
t5 = 0x19 >>> y2;
I = y1 == t5;

Fastest checker: explicit
Fails for (6, 26)

[]
Fastest checker: genetic
Evars: 1, 9
Program 0:
I = 0x1 == y1;

Fastest checker: explicit
Fails for (1, 32)

[]
Fastest checker: genetic
Evars: 1, 9
Program 0:
t1 = 0x26 s<= y2;
I = t1 == y1;

Fastest checker: explicit
Fails for (0, 33)

[]
Fastest checker: genetic
Evars: 16, 14
Program 0:
t1 = y2 + y2;
I = 0x1a s<= t1;

Fastest checker: explicit
Fails for (26, 45)

[]
Fastest checker: genetic
Evars: 31, 21
Program 0:
I = 0x1f == y1;

Fastest checker: explicit
Fails for (31, 45)

[]
Fastest checker: genetic
Evars: 1, 6
Program 0:
t1 = min(y2, y1);
t2 = y1 < y2;
I = t2 >>> y2;

Fastest checker: explicit
Fails for (32, 48)

[]
Fastest checker: genetic
Evars: 23, 8
Program 0:
t1 = y1 << y1;
t2 = t1 < 0x8;
t3 = y1 * y2;
I = 0x8 == y2;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Evars: 3, 21
Program 0:
I = 0x3 == y1;

Fastest checker: explicit
Fails for (3, 32)

[]
Fastest checker: genetic
Evars: 1, 16
Program 0:
t1 = min(0x3d, y1);
t2 = 0x3d * y2;
I = y2 == t2;

Fastest checker: explicit
Fails for (0, 16)

[]
Fastest checker: genetic
Evars: 26, 7
Program 0:
I = y2 == 0x7;

Fastest checker: explicit
Fails for (0, 7)

[]
Fastest checker: genetic
Evars: 23, 19
Program 0:
t1 = 0x14 == 0x14;
t2 = 0x14 ^ y1;
t3 = 0x14 <= t1;
t4 = -y2;
t5 = 0x14 | y2;
I = y1 == t5;

Fastest checker: explicit
Fails for (23, 7)

[]
Fastest checker: genetic
Evars: 10, 12
Program 0:
I = 0xc == y2;

Fastest checker: explicit
Fails for (0, 12)

[]
Fastest checker: genetic
Evars: 11, 10
Program 0:
t1 = y2 < 0xa;
I = 0xa == y2;

Fastest checker: explicit
Fails for (0, 10)

[]
Fastest checker: genetic
Evars: 14, 26
Program 0:
t1 = 0xf >> 0xf;
t2 = min(t1, 0xf);
t3 = -y2;
t4 = 0xf <= 0xf;
t5 = t4 + y1;
I = t5 == 0xf;

Fastest checker: explicit
Fails for (14, 10)

[]
Fastest checker: genetic
Evars: 27, 30
Program 0:
I = 0x1d s< y2;

Fastest checker: explicit
Fails for (0, 30)

[]
Fastest checker: genetic
Evars: 4, 14
Program 0:
t1 = 0x12 >>> y2;
I = y1 == t1;

Fastest checker: explicit
Fails for (9, 31)

[]
Fastest checker: genetic
Evars: 29, 17
Program 0:
t1 = y2 | 0x3a;
t2 = 0x3a <= 0x3a;
t3 = y1 + y1;
I = t3 == 0x3a;

Fastest checker: explicit
Fails for (29, 33)

[]
Fastest checker: genetic
Evars: 21, 18
Program 0:
t1 = y2 ==> 0x12;
t2 = -y1;
t3 = min(t1, y2);
t4 = y2 == y2;
I = 0x12 == y2;

Fastest checker: explicit
Fails for (0, 18)

[]
Fastest checker: genetic
Evars: 10, 3
Program 0:
t1 = y1 - y1;
I = 0x3 == y2;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Evars: 1, 9
Program 0:
I = 0x9 == y2;

Fastest checker: explicit
Fails for (0, 9)

[]
Fastest checker: genetic
Evars: 20, 29
Program 0:
t1 = ~0x2b;
t2 = min(t1, t1);
I = y1 == t1;

Fastest checker: explicit
Fails for (20, 9)

[]
Fastest checker: genetic
Evars: 25, 1
Program 0:
t1 = y1 != 0x16;
t2 = 0x16 s< y1;
I = y2 <= t2;

Fastest checker: explicit
Fails for (23, 1)

[]
Fastest checker: genetic
Evars: 28, 13
Program 0:
t1 = 0x11 ^ y2;
I = y1 == t1;

Fastest checker: explicit
Fails for (19, 2)

[]
Fastest checker: genetic
Evars: 27, 17
Program 0:
t1 = 0x11 | y2;
I = 0x11 == y2;

Fastest checker: explicit
Fails for (0, 17)

[]
Fastest checker: genetic
Evars: 18, 28
Program 0:
I = 0x12 == y1;

Fastest checker: explicit
Fails for (18, 17)

[]
Fastest checker: genetic
Evars: 10, 31
Program 0:
t1 = min(y2, y2);
t2 = y2 | 0xa;
I = 0xa == y1;

Fastest checker: explicit
Fails for (10, 32)

[]
Fastest checker: genetic
Evars: 5, 22
Program 0:
I = y2 == 0x16;

Fastest checker: explicit
Fails for (0, 22)

[]
Fastest checker: genetic
Evars: 31, 1
Program 0:
t1 = 0xa <= y1;
t2 = -0xa;
I = t1 / y2;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Evars: 5, 19
Program 0:
I = y2 == 0x13;

Fastest checker: explicit
Fails for (0, 19)

[]
Fastest checker: genetic
Evars: 8, 18
Program 0:
t1 = y2 >>> y1;
t2 = y1 >> y2;
t3 = y2 << y1;
I = y1 == t3;

Fastest checker: explicit
Fails for (16, 21)

[]
Fastest checker: genetic
Evars: 27, 24
Program 0:
I = 0x18 == y2;

Fastest checker: explicit
Fails for (0, 24)

[]
Fastest checker: genetic
Evars: 12, 16
Program 0:
t1 = y1 * y1;
I = y2 == t1;

Fastest checker: explicit
Fails for (5, 25)

[]
Fastest checker: genetic
Evars: 26, 15
Program 0:
I = y2 == 0xf;

Fastest checker: explicit
Fails for (0, 15)

[]
Fastest checker: genetic
Evars: 29, 5
Program 0:
t1 = ~0x3a;
I = t1 == y2;

Fastest checker: explicit
Fails for (0, 5)

[]
Fastest checker: genetic
Evars: 18, 29
Program 0:
I = 0x1d == y2;

Fastest checker: explicit
Fails for (0, 29)

[]
Fastest checker: genetic
Evars: 29, 1
Program 0:
t1 = 0x7 s< y1;
I = y2 <= t1;

Fastest checker: explicit
Fails for (8, 1)

[]
Fastest checker: genetic
Evars: 4, 8
Program 0:
t1 = y2 s<= 0x4;
t2 = t1 << 0x4;
t3 = y2 + y2;
I = 0x4 == y1;

Fastest checker: explicit
Fails for (4, 2)

[]
Fastest checker: genetic
Evars: 18, 11
Program 0:
t1 = y1 & 0xb;
t2 = y2 ==> y2;
t3 = t1 >> t2;
t4 = ~0xb;
I = 0xb == y2;

Fastest checker: explicit
Fails for (0, 11)

[]
Fastest checker: genetic
Evars: 25, 1
Program 0:
t1 = 0x12 s< y1;
I = y2 <= t1;

Fastest checker: explicit
Fails for (19, 1)

[]
Fastest checker: genetic
Evars: 5, 27
Program 0:
I = 0x5 == y1;

Fastest checker: explicit
Fails for (5, 2)

[]
Fastest checker: genetic
Evars: 25, 1
Program 0:
t1 = 0x6 | 0x6;
t2 = y2 != y2;
t3 = t1 s< y1;
I = y2 <= t3;

Fastest checker: explicit
Fails for (7, 1)

[]
Fastest checker: genetic
Evars: 13, 23
Program 0:
t1 = 0x17 * y2;
t2 = y1 != y1;
t3 = y1 s<= y2;
t4 = y1 | y1;
I = 0x17 == y2;

Fastest checker: explicit
Fails for (0, 23)

[]
Fastest checker: genetic
Evars: 20, 4
Program 0:
t1 = -y2;
I = t1 == 0x3c;

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Evars: 28, 9
Program 0:
t1 = 0x3c << 0x3c;
t2 = y2 * y1;
I = 0x3c == t2;

Fastest checker: explicit
Fails for (15, 4)

[]
Fastest checker: genetic
Evars: 5, 13
Program 0:
I = y2 == 0xd;

Fastest checker: explicit
Fails for (0, 13)

[]
Fastest checker: genetic
Evars: 9, 27
Program 0:
t1 = -0x37;
I = y1 == t1;

Fastest checker: explicit
Fails for (9, 32)

[]
Fastest checker: genetic
Evars: 21, 17
Program 0:
I = 0x15 == y1;

Fastest checker: explicit
Fails for (21, 32)

[]
Fastest checker: genetic
Evars: 14, 28
Program 0:
t1 = 0x35 ? y1 : 0x35;
t2 = 0x35 ? y2 : 0x35;
t3 = t1 ? y2 : 0x35;
t4 = y1 s<= t3;
I = t3 ==> t4;

Fastest checker: explicit
Correct for wordlen=6
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc







Finished in 50.64s

Evars: 939524096, 1879048192
Program 0:
t1 = 0xd4000000L ? y1 : 0xd4000000L;
t2 = 0xd4000000L ? y2 : 0xd4000000L;
t3 = t1 ? y2 : 0xd4000000L;
t4 = y1 s<= t3;
I = t3 ==> t4;


Perf counters:
{'genetic': 75, 'cbmc': 10, 'explicit': 84, 'iterations': 75}
Perf timers:
gcc: 1.10s
verify: 20.82s
checker: 50.45s
generalize: 17.94s
synth: 29.78s
_: 50.64s
