Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 + y;
res1 = N + N;
Program 1:
t1 = -y;
t2 = -nondet_0;
res1 = N % N;

Fastest checker: explicit
Fails for (0, 5, 5, 5)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 >> nondet_0;
Program 1:
t1 = y != 0x6;
t2 = nondet_0 ^ y;
res1 = 0x6 * y;

Fastest checker: explicit
Fails for (0, 2, 6, 5)

[]
Fastest checker: genetic
Program 0:
res1 = y - N;
Program 1:
t1 = nondet_0 >>> x;
res1 = -y;

Fastest checker: explicit
Fails for (0, 4, 6, 5)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> N;
t2 = y << x;
t3 = 0x7 != N;
t4 = N + 0x7;
res1 = x + x;
Program 1:
t1 = y s<= x;
res1 = t1 - x;

Fastest checker: explicit
Fails for (0, 5, 6, 5)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 ^ y;
Program 1:
t1 = min(y, y);
res1 = 0x1 - x;

Fastest checker: explicit
Fails for (7, 5, 6, 5)

[]
Fastest checker: genetic
Program 0:
t1 = x >>> x;
t2 = x & x;
t3 = N / N;
res1 = y + y;
Program 1:
t1 = 0x5 < 0x5;
t2 = y & t1;
t3 = t1 >>> N;
t4 = ~x;
res1 = t4 <= 0x5;

Fastest checker: explicit
Fails for (1, 4, 7, 5)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> x;
t2 = x & x;
res1 = N / t1;
Program 1:
t1 = ~x;
t2 = y ^ nondet_0;
t3 = t1 >>> N;
t4 = -y;
t5 = 0x4 s<= x;
res1 = N + 0x4;

Fastest checker: explicit
Fails for (1, 4, 0, 6)

[]
Fastest checker: genetic
Program 0:
t1 = min(y, 0x4);
res1 = x + 0x4;
Program 1:
t1 = ~x;
t2 = nondet_0 * t1;
res1 = ~0x7;

Fastest checker: explicit
Fails for (1, 5, 0, 6)

[]
Fastest checker: genetic
Program 0:
t1 = -N;
res1 = t1 / x;
Program 1:
t1 = ~y;
res1 = ~y;

Fastest checker: explicit
Fails for (0, 0, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ^ 0x3;
t2 = t1 << x;
t3 = t2 >>> nondet_0;
res1 = -0x3;
Program 1:
t1 = -x;
res1 = nondet_0 - y;

Fastest checker: explicit
Fails for (1, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y != x;
t2 = y % N;
t3 = y >> t2;
res1 = max(t1, t3);
Program 1:
t1 = 0x3 ^ x;
res1 = 0x3 ^ y;

Fastest checker: explicit
Fails for (0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x s< x;
t2 = t1 <= x;
res1 = 0x4 != x;
Program 1:
t1 = ~x;
res1 = ~y;

Fastest checker: explicit
Fails for (1, 5, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 <= N;
res1 = y - N;
Program 1:
t1 = y + x;
t2 = y - N;
t3 = ~t1;
t4 = y ? t2 : t3;
res1 = ~t2;

Fastest checker: explicit
Fails for (0, 4, 3, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 <= N;
res1 = t1 != nondet_0;
Program 1:
t1 = ~x;
res1 = ~y;

Fastest checker: explicit
Fails for (1, 5, 3, 6)

[]
Fastest checker: genetic
Program 0:
res1 = nondet_0 + y;
Program 1:
t1 = -x;
t2 = 0x4 << nondet_0;
res1 = ~y;

Fastest checker: explicit
Fails for (4, 5, 3, 6)

[]
Fastest checker: genetic
Program 0:
t1 = N >>> nondet_0;
res1 = -0x7;
Program 1:
t1 = -x;
res1 = 0x4 - y;

Fastest checker: explicit
Fails for (1, 4, 4, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 << N;
t2 = 0x7 <= N;
res1 = y - N;
Program 1:
t1 = nondet_0 + x;
t2 = y - N;
t3 = ~t1;
t4 = y ? t2 : t3;
res1 = ~t2;

Fastest checker: explicit
Fails for (1, 4, 5, 6)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = 0x5 ==> x;
res1 = t2 ==> t1;
Program 1:
t1 = -x;
res1 = ~y;

Fastest checker: explicit
Fails for (1, 4, 6, 6)

[]
Fastest checker: genetic
Program 0:
t1 = N - 0x6;
res1 = max(t1, y);
Program 1:
t1 = ~x;
res1 = -y;

Fastest checker: explicit
Fails for (1, 4, 7, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x & nondet_0;
res1 = -N;
Program 1:
t1 = ~x;
t2 = -y;
t3 = x s<= N;
res1 = ~N;

Fastest checker: explicit
Fails for (1, 6, 0, 7)

[]
Fastest checker: genetic
Program 0:
res1 = ~N;
Program 1:
t1 = ~x;
t2 = -y;
t3 = x s<= N;
res1 = ~N;

Fastest checker: explicit
Fails for (0, 0, 1, 7)

[]







Timeout
Perf counters:
{'genetic': 21, 'explicit': 21, 'timeout': 1, 'iterations': 22}
Perf timers:
verify: 0.25s
checker: 59.95s
gcc: 0.47s
_: 60.00s
synth: 59.73s
