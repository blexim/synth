Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = y <= 0xb;
I = t1 | 0xb;
Program 1:
I = 0x7 >>> y;

Fastest checker: explicit
Fails for (0, 11)

[]
Fastest checker: genetic
Program 0:
t1 = q ==> q;
I = y s<= y;
Program 1:
t1 = y & 0x6;
I = -y;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y | y;
t2 = y ^ y;
I = 0x4 - t2;
Program 1:
t1 = ~y;
t2 = t1 s<= t1;
I = 0x5 != 0x5;

Fastest checker: explicit
Fails for (0, 15)

[]
Fastest checker: genetic
Program 0:
I = 0x8 s< q;
Program 1:
t1 = q == y;
I = 0xe - y;

Fastest checker: explicit
Fails for (7, 15)

[]
Fastest checker: genetic
Program 0:
t1 = q ? 0x6 : q;
I = ~q;
Program 1:
I = 0x7 ^ y;

Fastest checker: explicit
Fails for (15, 15)

[]
Fastest checker: genetic
Program 0:
t1 = y - 0x3;
I = 0x3 | y;
Program 1:
t1 = y | y;
I = 0x7 - y;

Fastest checker: explicit
Fails for (0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = q ? 0x6 : q;
I = t1 <= 0x6;
Program 1:
I = 0x6 - y;

Fastest checker: explicit
Fails for (0, 6)

[]
Fastest checker: genetic
Program 0:
I = 0x5 >>> 0x5;
Program 1:
t1 = y | y;
I = 0x3 - y;

Fastest checker: explicit
Fails for (0, 3)

[]
Fastest checker: genetic
Program 0:
I = 0x9 >>> 0x9;
Program 1:
t1 = y | y;
I = 0xd - y;

Fastest checker: explicit
Fails for (0, 13)

[]
Fastest checker: genetic
Program 0:
t1 = q + q;
I = max(0xc, 0xc);
Program 1:
I = 0x1 - y;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xc + q;
Program 1:
t1 = y + 0x7;
I = ~t1;

Fastest checker: explicit
Fails for (4, 1)

[]
Fastest checker: genetic
Program 0:
I = 0xf ==> 0xf;
Program 1:
I = 0x4 - y;

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, y);
I = max(q, 0x2);
Program 1:
I = 0x8 - y;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Program 0:
I = 0x1 s<= 0x1;
Program 1:
t1 = 0xe - y;
I = t1 s< t1;

Fastest checker: explicit
Fails for (0, 14)

[]
Fastest checker: genetic
Program 0:
t1 = y < y;
I = min(0xd, 0xd);
Program 1:
I = 0x9 - y;

Fastest checker: explicit
Fails for (0, 9)

[]
Fastest checker: genetic
Program 0:
t1 = -q;
t2 = t1 < y;
t3 = y < y;
t4 = 0x7 ==> 0x7;
t5 = 0x7 >>> 0x7;
I = 0x7 + t4;
Program 1:
t1 = 0x0 - y;
t2 = 0x0 == y;
t3 = 0x0 ? 0x0 : t2;
I = q ==> y;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
I = max(0x4, q);
Program 1:
t1 = 0x3 < q;
t2 = -q;
t3 = 0x3 - y;
t4 = y != 0x3;
t5 = y - y;
I = t5 s<= q;

Fastest checker: explicit
Fails for (3, 3)

[]
Fastest checker: genetic
Program 0:
I = max(0x9, q);
Program 1:
t1 = -q;
t2 = 0xc - y;
t3 = y != 0xc;
t4 = y - y;
I = t4 s<= q;

Fastest checker: explicit
Fails for (0, 12)

[]
Fastest checker: genetic
Program 0:
t1 = y >> 0x5;
I = ~0x5;
Program 1:
t1 = 0x8 - y;
I = 0x8 != q;

Fastest checker: explicit
Fails for (1, 8)

[]
Fastest checker: genetic
Program 0:
t1 = min(y, 0x8);
t2 = 0x8 - y;
I = q | 0x8;
Program 1:
t1 = 0x7 - y;
I = q <= 0x7;

Fastest checker: explicit
Fails for (7, 7)

[]
Fastest checker: genetic
Program 0:
t1 = q << 0x2;
t2 = t1 != q;
I = 0x2 >> t2;
Program 1:
t1 = q >>> y;
t2 = q ? 0xb : 0xb;
t3 = 0xb - y;
t4 = t3 | t3;
I = t4 == q;

Fastest checker: explicit
Fails for (1, 11)

[]
Fastest checker: genetic
Program 0:
I = 0x2 + 0x2;
Program 1:
t1 = 0xe - y;
t2 = t1 | t1;
I = t2 == q;

Fastest checker: explicit
Fails for (1, 14)

[]
Fastest checker: genetic
Program 0:
t1 = 0xb + 0xb;
t2 = 0xb s<= q;
t3 = 0xb + 0xb;
t4 = ~y;
t5 = q + 0xb;
t6 = t5 & q;
I = 0xb << t6;
Program 1:
t1 = 0x9 - y;
t2 = t1 | t1;
I = t2 == q;

Fastest checker: explicit
Fails for (1, 9)

[]
Fastest checker: genetic
Program 0:
t1 = 0xe + 0xe;
t2 = ~y;
t3 = q + 0xe;
t4 = t3 & q;
I = 0xe << t4;
Program 1:
t1 = 0xd - y;
t2 = t1 | t1;
I = t2 == q;

Fastest checker: explicit
Fails for (1, 13)

[]
Fastest checker: genetic
Program 0:
I = 0x8 / 0x8;
Program 1:
t1 = 0xa - y;
I = q <= 0xa;

Fastest checker: explicit
Fails for (0, 10)

[]







Timeout
Perf counters:
{'genetic': 25, 'explicit': 25, 'timeout': 1, 'iterations': 26}
Perf timers:
verify: 0.27s
checker: 119.90s
gcc: 0.46s
_: 120.00s
synth: 119.67s
