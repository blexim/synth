Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = x & y;
I = 0x2 >> c;
Program 1:
I = v s< c;

Fastest checker: explicit
Fails for (0, 0, 3, 4, 1, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = z ? v : z;
I = w >>> w;
Program 1:
I = y < c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = w >> u;
I = c < t1;
Program 1:
t1 = z ==> y;
I = c >> w;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
I = x <= z;
Program 1:
t1 = u >>> v;
t2 = z s< c;
I = -0x4;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = w * z;
t2 = y ^ x;
I = v <= v;
Program 1:
t1 = z s< c;
I = t1 >> v;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z * 0x7;
I = t1 <= t1;
Program 1:
t1 = z - c;
I = y s<= z;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 ==> z;
t2 = max(t1, x);
I = z | 0x5;
Program 1:
I = ~y;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = x | x;
I = 0x7 + c;
Program 1:
t1 = 0x0 ==> u;
I = -c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> z;
t2 = max(v, t1);
I = w != 0x7;
Program 1:
t1 = z - 0x6;
t2 = v < v;
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 7, 0)

[]
Fastest checker: genetic
Program 0:
I = x | 0x7;
Program 1:
I = 0x3 >> c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 2)

[]
Fastest checker: genetic
Program 0:
t1 = u s< c;
t2 = z s< z;
t3 = t2 ==> u;
I = max(w, 0x3);
Program 1:
t1 = v < v;
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
I = c != 0x7;
Program 1:
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 6)

[]
Fastest checker: genetic
Program 0:
I = c <= 0x5;
Program 1:
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 5)

[]
Fastest checker: genetic
Program 0:
t1 = w == 0x1;
I = c <= 0x1;
Program 1:
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = z << c;
t2 = t1 <= c;
I = t2 ? 0x7 : 0x7;
Program 1:
t1 = 0x5 - y;
t2 = u == w;
t3 = 0x5 & x;
t4 = max(t2, w);
t5 = z - v;
I = z != 0x5;

Fastest checker: explicit
Fails for (0, 0, 0, 5, 0, 0, 1)

[]
Fastest checker: genetic
Program 0:
I = u ==> x;
Program 1:
t1 = -c;
t2 = w | c;
I = 0x6 - y;

Fastest checker: explicit
Fails for (0, 0, 0, 6, 0, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = c >> 0x4;
t2 = 0x4 != c;
t3 = 0x4 * t2;
I = w ^ t3;
Program 1:
t1 = w == w;
t2 = t1 | w;
I = 0x3 - y;

Fastest checker: explicit
Fails for (0, 3, 0, 3, 1, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = c == v;
t2 = u + z;
I = 0x0 <= z;
Program 1:
t1 = u ^ 0x1;
I = 0x1 - y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 2, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = c ? z : 0x5;
I = 0x5 + w;
Program 1:
t1 = y ^ 0x3;
I = t1 ==> u;

Fastest checker: explicit
Fails for (0, 2, 0, 2, 2, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = max(v, c);
t2 = z s<= c;
I = z ? 0x2 : t2;
Program 1:
I = ~y;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 2, 0, 1)

[]
Fastest checker: genetic
Program 0:
t1 = w == x;
I = max(0x1, w);
Program 1:
t1 = -v;
t2 = ~c;
t3 = w ==> w;
I = y s<= x;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = c s< z;
t2 = z == w;
I = t2 >> t1;
Program 1:
t1 = v << z;
t2 = 0x1 - y;
I = z s<= z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 1, 7)

[]
Fastest checker: genetic
Program 0:
I = u == x;
Program 1:
t1 = w s< y;
t2 = -c;
I = ~t1;

Fastest checker: explicit
Fails for (3, 3, 0, 3, 0, 1, 7)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 s< u;
t2 = x | w;
I = 0x2 << w;
Program 1:
t1 = w & v;
t2 = t1 - c;
I = y s<= x;

Fastest checker: explicit
Fails for (0, 1, 7, 0, 7, 1, 7)

[]
Fastest checker: genetic
Program 0:
t1 = w >> u;
t2 = -y;
t3 = c - v;
I = 0x6 s<= w;
Program 1:
t1 = c << v;
t2 = -t1;
I = y s<= x;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 4, 7)

[]
Fastest checker: genetic
Program 0:
t1 = u <= 0x4;
t2 = max(v, x);
t3 = x <= v;
t4 = 0x4 == 0x4;
I = w <= z;
Program 1:
t1 = 0x2 >> w;
I = t1 - y;

Fastest checker: explicit
Fails for (0, 2, 0, 2, 0, 4, 7)

[]
Fastest checker: genetic
Program 0:
t1 = max(w, u);
I = 0x6 >>> v;
Program 1:
t1 = min(y, v);
t2 = t1 >> t1;
t3 = z - c;
I = c s<= t3;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 4, 0)

[]
Fastest checker: genetic
Program 0:
I = w <= z;
Program 1:
t1 = c < w;
t2 = 0x1 - y;
I = 0x1 ? w : t1;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 0, 4, 0)

[]
Fastest checker: genetic
Program 0:
I = z <= w;
Program 1:
I = 0x4 - y;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 4, 4, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x == w;
t2 = x >>> w;
I = z == w;
Program 1:
t1 = ~c;
t2 = u + t1;
I = c s< t2;

Fastest checker: explicit
Fails for (1, 0, 0, 4, 4, 4, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x7;
I = w == z;
Program 1:
t1 = max(y, y);
t2 = ~c;
t3 = w << v;
I = c s< z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 2, 1)

[]







Timeout
Perf counters:
{'genetic': 31, 'explicit': 31, 'timeout': 1, 'iterations': 32}
Perf timers:
verify: 11.12s
checker: 44.91s
gcc: 0.40s
_: 45.00s
synth: 33.87s
