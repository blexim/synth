Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = x % N;
t2 = 0x5 ==> N;
I = 0x5 | N;
Program 1:
t1 = 0x4 - x;
t2 = N | t1;
I = t1 != t2;

Fastest checker: explicit
Fails for (5, 11)

[]
Fastest checker: genetic
Program 0:
t1 = 0x9 ? N : 0x9;
t2 = N == 0x9;
I = t1 >> 0x9;
Program 1:
I = x * 0xe;

Fastest checker: explicit
Fails for (8, 11)

[]
Fastest checker: genetic
Program 0:
t1 = N s<= 0x7;
I = -N;
Program 1:
t1 = 0x0 ^ x;
t2 = -x;
I = -t1;

Fastest checker: explicit
Fails for (0, 12)

[]
Fastest checker: genetic
Program 0:
t1 = x / N;
t2 = x >> N;
I = x | 0x4;
Program 1:
I = ~x;

Fastest checker: explicit
Fails for (0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~N;
I = x ==> x;
Program 1:
t1 = ~x;
I = 0xc >> N;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 2.68s

Program 0:
t1 = ~N;
I = x ==> x;
Program 1:
t1 = ~x;
I = 0xc >> N;


Perf counters:
{'genetic': 5, 'cbmc': 1, 'explicit': 5, 'iterations': 5}
Perf timers:
verify: 2.23s
checker: 2.63s
gcc: 0.62s
_: 2.68s
synth: 0.44s
