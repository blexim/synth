Using seed: 1337
[]
Fastest checker: genetic
Evars: 7, 1, 0, 0, 2, 5
Program 0:
t1 = id s< nondet_2;
I = 0x6 ^ nondet_2;

Fastest checker: explicit
Fails for (1, 0, 0, 7, 1, 6)

[]
Fastest checker: genetic
Evars: 2, 7, 4, 0, 1, 3
Program 0:
t1 = nondet_0 != nondet_1;
I = 0x4 << id;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 6, 6, 5, 1, 2, 5
Program 0:
t1 = id != nondet_1;
t2 = maxId << 0x3;
I = id < nondet_1;

Fastest checker: explicit
Fails for (1, 1, 0, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 6, 4, 0, 0, 2, 3
Program 0:
I = nondet_1 >>> maxId;

Fastest checker: explicit
Fails for (1, 2, 0, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 6, 5, 7, 2, 3, 3
Program 0:
t1 = nondet_2 >>> nondet_1;
t2 = nondet_0 - nondet_2;
I = tmp ? nondet_0 : t2;

Fastest checker: explicit
Fails for (1, 0, 1, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 4, 4, 6, 0, 3, 1
Program 0:
t1 = 0x5 >>> tmp;
t2 = 0x5 + nondet_1;
I = nondet_1 s< t2;

Fastest checker: explicit
Fails for (1, 4, 1, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 2, 0, 7, 0, 3, 4
Program 0:
t1 = 0x5 >>> 0x5;
I = t1 % nondet_2;

Fastest checker: explicit
Fails for (2, 4, 1, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 4, 0, 3, 2, 3, 7
Program 0:
I = nondet_2 s<= tmp;

Fastest checker: explicit
Fails for (4, 4, 1, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 3, 4, 3, 0, 3, 4
Program 0:
I = 0x4 / tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 2, 1, 7, 2, 3, 7
Program 0:
t1 = id != 0x4;
I = nondet_1 % nondet_2;

Fastest checker: explicit
Fails for (2, 1, 0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 6, 6, 7, 0, 1, 3
Program 0:
t1 = maxId + maxId;
I = nondet_0 >> nondet_2;

Fastest checker: explicit
Fails for (3, 0, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 4, 4, 2, 1, 3, 6
Program 0:
t1 = maxId >>> nondet_2;
I = id * t1;

Fastest checker: explicit
Fails for (3, 0, 0, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 1, 0, 3, 1, 3, 7
Program 0:
t1 = nondet_2 < nondet_0;
I = min(t1, maxId);

Fastest checker: explicit
Fails for (1, 0, 2, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 7, 3, 1, 0, 2, 3
Program 0:
t1 = nondet_1 <= nondet_0;
I = id s< tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 1)

[]
Fastest checker: genetic
Evars: 4, 6, 4, 0, 2, 1
Program 0:
I = nondet_0 & nondet_1;

Fastest checker: explicit
Fails for (1, 1, 1, 0, 0, 1)

[]
Fastest checker: genetic
Evars: 7, 5, 3, 0, 2, 7
Program 0:
t1 = maxId - nondet_0;
t2 = -nondet_1;
I = nondet_0 >>> nondet_0;

Fastest checker: explicit
Fails for (1, 0, 3, 0, 0, 1)

[]
Fastest checker: genetic
Evars: 2, 6, 7, 0, 1, 7
Program 0:
t1 = id - 0x0;
I = maxId & nondet_0;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 4, 0, 7, 1, 3, 7
Program 0:
t1 = tmp << tmp;
I = t1 < tmp;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 2)

[]
Fastest checker: genetic
Evars: 4, 6, 2, 1, 3, 6
Program 0:
t1 = maxId >>> maxId;
I = id * t1;

Fastest checker: explicit
Fails for (1, 0, 0, 3, 3, 2)

[]
Fastest checker: genetic
Evars: 1, 5, 0, 2, 3, 1
Program 0:
t1 = maxId ^ tmp;
t2 = nondet_0 * nondet_1;
I = 0x4 < nondet_1;

Fastest checker: explicit
Fails for (1, 5, 0, 3, 3, 2)

[]
Fastest checker: genetic
Evars: 6, 4, 0, 0, 3, 4
Program 0:
t1 = min(tmp, maxId);
I = 0x3 s<= t1;

Fastest checker: explicit
Fails for (1, 0, 0, 4, 3, 3)

[]
Fastest checker: genetic
Evars: 1, 1, 7, 0, 2, 1
Program 0:
I = nondet_0 & 0x4;

Fastest checker: explicit
Fails for (1, 0, 4, 4, 3, 3)

[]
Fastest checker: genetic
Evars: 7, 7, 3, 0, 2, 1
Program 0:
t1 = nondet_0 ==> maxId;
I = 0x6 <= nondet_2;

Fastest checker: explicit
Fails for (6, 0, 4, 4, 3, 3)

[]
Fastest checker: genetic
Evars: 6, 7, 6, 0, 1, 7
Program 0:
t1 = tmp >> tmp;
t2 = nondet_2 << t1;
t3 = 0x7 < maxId;
t4 = t3 | t2;
I = nondet_1 == 0x7;

Fastest checker: explicit
Fails for (1, 7, 4, 4, 3, 3)

[]
Fastest checker: genetic
Evars: 2, 0, 7, 0, 3, 5
Program 0:
t1 = id ? 0x5 : id;
I = tmp == 0x5;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 5)

[]
Fastest checker: genetic
Evars: 7, 5, 3, 1, 2, 6
Program 0:
t1 = nondet_1 ==> maxId;
I = 0x7 <= nondet_2;

Fastest checker: explicit
Fails for (7, 0, 0, 6, 0, 5)

[]
Fastest checker: genetic
Evars: 6, 4, 4, 1, 2, 4
Program 0:
t1 = tmp s<= 0x4;
t2 = t1 >> nondet_2;
I = t2 % nondet_2;

Fastest checker: explicit
Fails for (3, 0, 0, 0, 0, 4)

[]
Fastest checker: genetic
Evars: 6, 3, 1, 0, 3, 7
Program 0:
t1 = min(nondet_1, nondet_1);
t2 = tmp & tmp;
I = 0x6 < t2;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 7)

[]
Fastest checker: genetic
Evars: 2, 3, 7, 1, 3, 5
Program 0:
t1 = tmp | maxId;
I = nondet_1 == 0x3;

Fastest checker: explicit
Fails for (1, 3, 0, 0, 0, 7)

[]
Fastest checker: genetic
Evars: 1, 1, 0, 0, 2, 5
Program 0:
t1 = maxId << maxId;
I = t1 s< maxId;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 4, 5, 1, 1, 2, 5
Program 0:
t1 = ~maxId;
t2 = nondet_1 == t1;
I = min(nondet_1, t2);

Fastest checker: explicit
Fails for (1, 5, 0, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 3, 0, 7, 1, 3, 4
Program 0:
t1 = -0x3;
t2 = maxId * nondet_1;
I = t1 <= nondet_0;

Fastest checker: explicit
Fails for (1, 0, 5, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 5, 1, 6, 1, 3, 0
Program 0:
t1 = nondet_2 + 0x5;
t2 = 0x5 >>> tmp;
I = t2 < nondet_0;

Fastest checker: explicit
Fails for (1, 0, 7, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 6, 1, 6, 1, 3, 4
Program 0:
t1 = tmp >>> maxId;
t2 = min(nondet_1, maxId);
I = t2 % nondet_2;

Fastest checker: explicit
Fails for (2, 1, 7, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 6, 3, 7, 1, 2, 5
Program 0:
t1 = max(0x2, tmp);
t2 = 0x2 < nondet_2;
I = nondet_1 & t2;

Fastest checker: explicit
Fails for (3, 1, 7, 0, 2, 7)

[]
Fastest checker: genetic
Evars: 3, 4, 1, 1, 2, 6
Program 0:
t1 = min(tmp, nondet_0);
t2 = id & nondet_0;
t3 = nondet_1 * t2;
I = nondet_0 < t3;

Fastest checker: explicit
Fails for (1, 2, 1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 7, 0, 4, 2, 3, 7
Program 0:
t1 = 0x5 >>> nondet_0;
t2 = nondet_0 >> nondet_0;
I = t2 * id;

Fastest checker: explicit
Fails for (1, 0, 3, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 6, 5, 5, 1, 2, 6
Program 0:
t1 = id == tmp;
t2 = tmp - nondet_0;
t3 = min(id, nondet_0);
t4 = nondet_1 & t3;
I = nondet_0 * t4;

Fastest checker: explicit
Fails for (1, 1, 3, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 1, 0, 2, 2, 3, 4
Program 0:
t1 = min(id, nondet_0);
t2 = 0x2 & t1;
I = nondet_0 * t2;

Fastest checker: explicit
Fails for (1, 0, 2, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 7, 2, 1, 2, 6
Program 0:
t1 = 0x3 - nondet_2;
t2 = nondet_1 >> nondet_1;
I = nondet_0 & t2;

Fastest checker: explicit
Fails for (1, 3, 2, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 3, 6, 0, 1, 7
Program 0:
t1 = nondet_2 ==> tmp;
t2 = nondet_1 <= t1;
t3 = 0x6 < nondet_0;
I = nondet_0 == 0x6;

Fastest checker: explicit
Fails for (1, 0, 6, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 7, 7, 0, 2, 7
Program 0:
I = 0x5 == nondet_2;

Fastest checker: explicit
Fails for (5, 0, 6, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 6, 1, 2, 3, 6
Program 0:
t1 = 0x6 < nondet_0;
t2 = t1 | tmp;
I = nondet_1 == 0x6;

Fastest checker: explicit
Fails for (1, 6, 6, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 1, 6, 3, 2, 3, 5
Program 0:
t1 = maxId - nondet_1;
t2 = -nondet_1;
t3 = t1 ^ t2;
I = 0x7 <= t3;

Fastest checker: explicit
Fails for (1, 1, 7, 2, 1, 1)

[]
Fastest checker: genetic
Evars: 3, 6, 7, 1, 3, 3
Program 0:
t1 = nondet_2 >>> nondet_2;
t2 = nondet_2 ==> tmp;
I = t2 == id;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 0, 2)

[]
Fastest checker: genetic
Evars: 4, 2, 7, 1, 3, 3
Program 0:
t1 = id & tmp;
I = min(nondet_0, t1);

Fastest checker: explicit
Fails for (1, 0, 1, 3, 0, 2)

[]
Fastest checker: genetic
Evars: 6, 7, 0, 1, 2, 3
Program 0:
t1 = 0x5 < nondet_2;
I = nondet_1 & t1;

Fastest checker: explicit
Fails for (6, 1, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 6, 7, 6, 0, 1, 7
Program 0:
t1 = min(nondet_1, nondet_2);
t2 = tmp / nondet_2;
t3 = 0x4 == maxId;
t4 = nondet_1 ^ t2;
I = 0x4 < t1;

Fastest checker: explicit
Fails for (5, 5, 0, 0, 1, 2)

[]
Fastest checker: genetic
Evars: 3, 3, 0, 0, 3, 6
Program 0:
t1 = nondet_2 <= maxId;
t2 = id >>> nondet_0;
I = t1 >>> nondet_2;

Fastest checker: explicit
Fails for (3, 0, 0, 3, 3, 2)

[]
Fastest checker: genetic
Evars: 4, 3, 1, 1, 3, 6
Program 0:
t1 = nondet_0 ^ nondet_1;
t2 = nondet_1 % nondet_2;
t3 = 0x1 | nondet_0;
I = t2 >> 0x1;

Fastest checker: explicit
Fails for (3, 2, 0, 3, 3, 2)

[]
Fastest checker: genetic
Evars: 4, 5, 3, 2, 3, 3
Program 0:
t1 = nondet_0 s< tmp;
t2 = tmp - id;
t3 = id <= 0x6;
I = t2 < maxId;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 4, 2)

[]
Fastest checker: genetic
Evars: 7, 5, 7, 1, 3, 4
Program 0:
t1 = ~id;
t2 = t1 < nondet_2;
I = nondet_1 * t2;

Fastest checker: explicit
Fails for (4, 1, 0, 4, 3, 3)

[]
Fastest checker: genetic
Evars: 3, 3, 1, 1, 3, 7
Program 0:
t1 = ~id;
t2 = t1 < tmp;
I = nondet_1 * t2;

Fastest checker: explicit
Fails for (1, 1, 0, 5, 4, 3)

[]
Fastest checker: genetic
Evars: 5, 4, 6, 0, 2, 2
Program 0:
t1 = nondet_2 ==> nondet_0;
t2 = nondet_0 < nondet_2;
t3 = min(nondet_2, nondet_2);
t4 = nondet_2 ==> maxId;
t5 = maxId == tmp;
I = t5 >>> id;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 4, 4)

[]
Fastest checker: genetic
Evars: 4, 7, 3, 1, 2, 0
Program 0:
t1 = id >> tmp;
t2 = nondet_1 % nondet_2;
I = 0x3 <= t2;

Fastest checker: explicit
Fails for (4, 3, 0, 5, 4, 4)

[]
Fastest checker: genetic
Evars: 6, 7, 6, 0, 1, 1
Program 0:
t1 = min(nondet_1, nondet_2);
t2 = tmp / nondet_2;
t3 = 0x5 != t2;
t4 = nondet_1 ^ t2;
I = 0x5 < t1;

Fastest checker: explicit
Fails for (6, 6, 0, 5, 4, 4)

[]
Fastest checker: genetic
Evars: 6, 4, 4, 1, 2, 6
Program 0:
t1 = id * maxId;
I = id < t1;

Fastest checker: explicit
Fails for (1, 0, 0, 5, 6, 4)

[]
Fastest checker: genetic
Evars: 7, 7, 0, 1, 2, 3
Program 0:
t1 = 0x6 < nondet_2;
I = nondet_1 & t1;

Fastest checker: explicit
Fails for (7, 1, 0, 5, 6, 4)

[]
Fastest checker: genetic
Evars: 6, 0, 6, 1, 3, 2
Program 0:
t1 = nondet_0 / 0x5;
I = t1 >> maxId;

Fastest checker: explicit
Fails for (1, 0, 5, 5, 6, 4)

[]
Fastest checker: genetic
Evars: 5, 4, 0, 1, 2, 3
Program 0:
t1 = max(tmp, 0x4);
I = nondet_1 == t1;

Fastest checker: explicit
Fails for (1, 4, 5, 5, 6, 4)

[]
Fastest checker: genetic
Evars: 6, 7, 4, 0, 3, 6
Program 0:
t1 = nondet_1 >> nondet_2;
t2 = nondet_0 s< id;
t3 = tmp - nondet_0;
I = t1 == 0x7;

Fastest checker: explicit
Fails for (3, 7, 5, 5, 6, 4)

[]
Fastest checker: genetic
Evars: 3, 5, 4, 1, 3, 2
Program 0:
t1 = maxId * 0x1;
t2 = 0x1 s< t1;
t3 = id ==> t2;
I = t3 == id;

Fastest checker: explicit
Fails for (1, 0, 0, 1, 2, 0)

[]
Fastest checker: genetic
Evars: 7, 5, 0, 2, 3, 6
Program 0:
t1 = min(nondet_2, tmp);
t2 = maxId * id;
t3 = tmp ==> id;
I = t1 == 0x6;

Fastest checker: explicit
Fails for (7, 0, 0, 0, 0, 6)

[]
Fastest checker: genetic
Evars: 4, 1, 5, 1, 2, 4
Program 0:
t1 = 0x6 / nondet_2;
I = t1 == id;

Fastest checker: explicit
Fails for (7, 0, 0, 0, 4, 6)

[]
Fastest checker: genetic
Evars: 3, 4, 5, 2, 3, 4
Program 0:
t1 = min(tmp, 0x2);
I = t1 == id;

Fastest checker: explicit
Fails for (1, 0, 0, 2, 4, 6)

[]







Timeout
Perf counters:
{'genetic': 65, 'explicit': 65, 'timeout': 1, 'iterations': 66}
Perf timers:
verify: 1.28s
checker: 59.84s
gcc: 0.46s
_: 60.00s
synth: 58.68s
