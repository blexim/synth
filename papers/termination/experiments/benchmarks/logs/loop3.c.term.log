Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = ((sword_t) 0x1) <= ((sword_t) y);
Program 1:
I = x & x;

Fastest checker: explicit
Fails for (1, 2)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = x <= x;
t3 = t1 << 0x5;
I = t2 / y;
Program 1:
t1 = y * x;
t2 = t1 <= t1;
t3 = 0x1 != t2;
t4 = t1 | y;
I = t2 + t3;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = -y;
t2 = 0xb / 0xb;
t3 = !0xb || y;
I = y == t2;
Program 1:
t1 = x | 0xd;
t2 = min(0xd, t1);
t3 = x == t1;
I = -t3;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 ^ 0x1;
I = y & 0x1;
Program 1:
t1 = x << x;
t2 = x & 0x3;
I = t1 == 0x3;

Fastest checker: explicit
Fails for (4, 1)

[]
Fastest checker: genetic
Program 0:
I = y * 0x8;
Program 1:
t1 = x == x;
t2 = 0xc == y;
t3 = y ^ x;
I = y ? x : t3;

Fastest checker: explicit
Fails for (1, 3)

[]
Fastest checker: genetic
Program 0:
t1 = x * y;
t2 = !y || 0x6;
I = x == t1;
Program 1:
t1 = x + x;
I = 0xf == 0xf;

Fastest checker: explicit
Fails for (8, 1)

[]
Fastest checker: genetic
Program 0:
t1 = !x || x;
t2 = max(y, t1);
I = y == t1;
Program 1:
t1 = x == 0x5;
I = max(t1, x);

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 3.90s

Program 0:
t1 = !x || x;
t2 = max(y, t1);
I = y == t1;
Program 1:
t1 = x == 0x5;
I = max(t1, x);


Perf counters:
{'genetic': 7, 'cbmc': 1, 'explicit': 7, 'iterations': 7}
Perf timers:
verify: 2.48s
checker: 3.66s
gcc: 1.15s
_: 3.90s
synth: 1.27s
