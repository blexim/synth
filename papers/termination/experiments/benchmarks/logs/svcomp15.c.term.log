Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = d - nondet_1;
Program 1:
t1 = 0x5 == nondet_0;
t2 = nondet_2 - y;
I = x - 0x5;

Fastest checker: explicit
Fails for (0, 5, 2, 4, 1, 6, 3, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 s< z;
I = y s< z;
Program 1:
t1 = nondet_1 ^ k;
I = t1 - nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 1, 4, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 s< 0x2;
I = z + nondet_0;
Program 1:
t1 = k & nondet_2;
I = nondet_2 == t1;

Fastest checker: explicit
Fails for (0, 0, 7, 0, 0, 1, 4, 6)

[]
Fastest checker: genetic
Program 0:
I = y | nondet_1;
Program 1:
t1 = z / nondet_0;
t2 = nondet_2 ? nondet_1 : t1;
I = t1 >>> t1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 5, 6)

[]
Fastest checker: genetic
Program 0:
I = ~x;
Program 1:
t1 = 0x4 >> nondet_1;
t2 = z | nondet_1;
I = z + z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 0, 5, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 + nondet_0;
I = ~d;
Program 1:
I = d << z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 7, 6)

[]
Fastest checker: genetic
Program 0:
I = y | k;
Program 1:
t1 = z ^ nondet_2;
I = nondet_0 ==> k;

Fastest checker: explicit
Fails for (2, 0, 0, 0, 0, 0, 7, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 | nondet_0;
I = -d;
Program 1:
t1 = x / y;
I = nondet_1 >> z;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0, 7, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 + x;
I = d - k;
Program 1:
t1 = z >> y;
I = 0x2 >>> t1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 2, 7, 6)

[]
Fastest checker: genetic
Program 0:
t1 = d * x;
I = d <= d;
Program 1:
t1 = nondet_2 ? nondet_0 : 0x4;
I = z >>> 0x4;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = k ? x : nondet_1;
t2 = ~z;
I = t1 s<= t1;
Program 1:
t1 = -x;
I = max(z, x);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 0, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = y / z;
I = t1 + d;
Program 1:
t1 = 0x3 ? z : x;
t2 = k < y;
I = ~t2;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 6, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = 0x3 ^ x;
t2 = nondet_1 + 0x3;
I = z | y;
Program 1:
I = z >>> d;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 6, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = z != nondet_1;
I = max(k, d);
Program 1:
t1 = 0x1 << k;
t2 = nondet_2 == d;
I = z >>> k;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 1, 7)

[]
Fastest checker: genetic
Program 0:
I = 0x0 s< d;
Program 1:
t1 = k == x;
I = z - y;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 7, 1, 7)

[]
Fastest checker: genetic
Program 0:
I = d << x;
Program 1:
t1 = k >>> z;
t2 = 0x0 s< nondet_0;
t3 = nondet_1 >>> nondet_0;
t4 = nondet_0 + z;
I = y >> y;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 0, 7, 1, 7)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 >>> 0x0;
t2 = nondet_0 + z;
I = t2 ? d : k;
Program 1:
t1 = d s<= x;
t2 = 0x0 + z;
t3 = k ? 0x0 : y;
I = nondet_0 < nondet_2;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 1, 7, 1, 7)

[]
Fastest checker: genetic
Program 0:
t1 = y >>> 0x3;
I = z | z;
Program 1:
t1 = d s<= y;
t2 = 0x7 + z;
t3 = max(z, t2);
I = d + nondet_1;

Fastest checker: cbmc
Fails for (0, 6, 1, 4, 0, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = d >> k;
t2 = z <= z;
t3 = y + 0x7;
I = x + d;
Program 1:
t1 = z s< k;
t2 = z + nondet_1;
t3 = k s<= 0x0;
t4 = 0x0 + k;
I = -nondet_0;

Fastest checker: explicit
Fails for (0, 7, 1, 4, 0, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y ==> k;
I = z | nondet_1;
Program 1:
t1 = y & z;
t2 = min(x, nondet_2);
I = nondet_1 | z;

Fastest checker: explicit
Fails for (0, 0, 2, 4, 0, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 >> y;
t2 = y + 0x0;
I = d / z;
Program 1:
t1 = y / z;
I = y < t1;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 1, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = k == k;
Program 1:
t1 = y ^ nondet_0;
t2 = z << k;
I = d % 0x1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
t1 = -k;
t2 = y + y;
t3 = k s<= t2;
t4 = 0x7 s< x;
t5 = ~nondet_1;
t6 = nondet_0 & nondet_0;
I = 0x7 s<= nondet_0;
Program 1:
t1 = nondet_0 >> nondet_0;
I = z + 0x6;

Fastest checker: explicit
Fails for (0, 0, 4, 0, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
I = d + nondet_2;
Program 1:
t1 = ~z;
t2 = x + z;
t3 = z << t2;
t4 = 0x7 + nondet_2;
I = y - nondet_2;

Fastest checker: explicit
Fails for (7, 0, 4, 0, 0, 0, 3, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_1 <= nondet_1;
Program 1:
t1 = -z;
t2 = y | z;
t3 = -nondet_0;
t4 = nondet_2 | x;
I = max(t1, z);

Fastest checker: cbmc
Fails for (0, 0, 0, 0, 0, 7, 3, 5)

[]
Fastest checker: genetic
Program 0:
t1 = x << x;
t2 = x s< z;
t3 = nondet_0 + t2;
t4 = 0x4 ? t3 : t2;
t5 = 0x4 & t2;
I = ~d;
Program 1:
I = z - 0x2;

Fastest checker: cbmc
Fails for (0, 0, 7, 5, 0, 0, 3, 2)

[]
Fastest checker: genetic
Program 0:
t1 = y >> 0x7;
t2 = x & 0x7;
I = nondet_1 | d;
Program 1:
t1 = 0x2 / z;
t2 = z - k;
I = 0x2 s< z;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 0, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 ^ 0x5;
Program 1:
t1 = z * 0x7;
t2 = k s<= nondet_2;
I = z ^ t1;

Fastest checker: explicit
Fails for (0, 0, 5, 0, 0, 0, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z == nondet_1;
t2 = z < nondet_0;
t3 = nondet_1 * k;
I = -d;
Program 1:
t1 = d s< z;
t2 = max(t1, nondet_0);
t3 = z - k;
I = x + 0x2;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 0, 0, 1, 4)

[]
Fastest checker: genetic
Program 0:
I = d + d;
Program 1:
t1 = z / d;
t2 = nondet_0 << k;
t3 = x + z;
t4 = z + t3;
t5 = k & t4;
I = y + nondet_2;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 4, 0, 1, 4)

[]
Fastest checker: genetic
Program 0:
I = d * d;
Program 1:
t1 = z + y;
t2 = z << nondet_0;
t3 = d == z;
I = nondet_0 + k;

Fastest checker: explicit
Fails for (0, 0, 1, 1, 0, 4, 1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = z == 0x0;
t2 = nondet_1 + k;
I = 0x0 ==> nondet_1;
Program 1:
t1 = z * 0x7;
t2 = d s<= nondet_2;
I = z ^ t1;

Fastest checker: cbmc
Fails for (2, 0, 0, 3, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = d == x;
I = d s<= 0x2;
Program 1:
t1 = -z;
t2 = 0x4 != nondet_2;
I = z | t1;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 0, 0, 1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = d + z;
t2 = nondet_1 <= z;
t3 = d >>> nondet_0;
t4 = d s<= d;
t5 = t3 >> 0x4;
I = t5 s<= z;
Program 1:
t1 = z s<= d;
I = 0x2 != z;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 1, 0, 1, 0)

[]







Timeout
Perf counters:
{'genetic': 34, 'cbmc': 4, 'explicit': 30, 'timeout': 1, 'iterations': 35}
Perf timers:
verify: 13.18s
checker: 59.90s
gcc: 0.46s
_: 60.00s
synth: 46.80s
