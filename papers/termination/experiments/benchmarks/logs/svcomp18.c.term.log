Using seed: 1337
[]
Fastest checker: genetic
Program 0:
res1 = 0x5 >>> z';
Program 1:
t1 = y' s<= x;
t2 = min(x', z);
res1 = 0x0 s<= 0x0;
Program 2:
t1 = y + y';
t2 = z - t1;
res1 = y' == y';

Fastest checker: explicit
Fails for (0, 2, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = 0x1 != z;
Program 1:
t1 = z' * y;
res1 = max(t1, z);
Program 2:
res1 = y != 0x5;

Fastest checker: explicit
Fails for (0, 1, 0, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = x % 0x1;
Program 1:
t1 = z ^ y';
t2 = x * z';
res1 = 0x3 ? y : z;
Program 2:
t1 = z >>> 0x1;
res1 = ~t1;

Fastest checker: explicit
Fails for (0, 1, 6, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z ==> 0x1;
res1 = t1 * y;
Program 1:
t1 = x ==> x;
t2 = x' ^ y';
res1 = t2 s<= 0x1;
Program 2:
t1 = x' * y';
res1 = x <= x';

Fastest checker: explicit
Fails for (1, 1, 6, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x >> y;
t2 = t1 + y';
res1 = 0x7 ^ z';
Program 1:
t1 = 0x4 + x';
res1 = 0x4 - x;
Program 2:
t1 = z' >> x;
res1 = 0x2 >>> x;

Fastest checker: explicit
Fails for (2, 1, 6, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x ^ y;
res1 = z | 0x6;
Program 1:
t1 = y' ==> x';
t2 = max(y', z);
res1 = z | 0x5;
Program 2:
res1 = ~y;

Fastest checker: explicit
Fails for (0, 1, 0, 7, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = z >>> x';
Program 1:
res1 = 0x5 | x';
Program 2:
t1 = y | 0x7;
res1 = x ^ 0x7;

Fastest checker: explicit
Fails for (7, 1, 0, 7, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = -x;
t2 = t1 - x;
res1 = t2 s<= t1;
Program 1:
t1 = max(z, z');
res1 = y' ^ z;
Program 2:
res1 = -y;

Fastest checker: explicit
Fails for (0, 1, 1, 7, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = y' >> z;
Program 1:
t1 = x & y';
t2 = 0x0 == y';
res1 = ~z';
Program 2:
t1 = x << z;
t2 = z' s< y;
res1 = t2 >> 0x2;

Fastest checker: explicit
Fails for (0, 1, 7, 7, 1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = x >>> z';
Program 1:
t1 = y' s<= y;
t2 = y + t1;
res1 = y ^ 0x0;
Program 2:
res1 = y + 0x5;

Fastest checker: explicit
Fails for (0, 3, 7, 7, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(y, 0x5);
t2 = y' != x';
res1 = x' * 0x5;
Program 1:
t1 = y' s<= x;
t2 = y + z;
res1 = t1 + y;
Program 2:
t1 = y + y';
res1 = z' s< t1;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(x, z);
t2 = z + x;
res1 = y' + t1;
Program 1:
t1 = y >> x';
t2 = y + x;
t3 = x' s<= z;
t4 = min(0x4, 0x4);
res1 = x' s<= y';
Program 2:
t1 = y + y';
t2 = z' - t1;
t3 = 0x5 s< y';
res1 = min(y', x);

Fastest checker: explicit
Fails for (3, 1, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(x, z);
t2 = x' >> t1;
res1 = y + t1;
Program 1:
res1 = x' + x;
Program 2:
res1 = -y;

Fastest checker: explicit
Fails for (1, 2, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x < x';
res1 = -z;
Program 1:
t1 = 0x6 | x';
res1 = z' ? z : 0x6;
Program 2:
res1 = -y;

Fastest checker: explicit
Fails for (0, 2, 1, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x * 0x4;
res1 = y' ? x : z';
Program 1:
t1 = x' ? y' : z';
res1 = 0x0 + y;
Program 2:
t1 = y' s< z;
t2 = y + 0x2;
res1 = 0x2 + z;

Fastest checker: explicit
Fails for (0, 1, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z ^ z;
t2 = x < y;
res1 = x' < y;
Program 1:
t1 = z' | x;
res1 = max(0x4, z');
Program 2:
t1 = z' ^ z';
t2 = z - z';
t3 = z + y;
res1 = z - 0x6;

Fastest checker: explicit
Fails for (0, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z' ? y' : x;
t2 = z' % x';
t3 = t2 s< x';
res1 = ~z;
Program 1:
t1 = y' <= y;
res1 = x' - x;
Program 2:
t1 = z' s<= x;
t2 = z' * y;
res1 = z <= t2;

Fastest checker: explicit
Fails for (1, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 - x';
t2 = x s< x;
t3 = z' - 0x2;
res1 = -y;
Program 1:
t1 = z + z';
res1 = max(x', x);
Program 2:
t1 = y << x;
t2 = y' << y';
res1 = 0x7 * y;

Fastest checker: explicit
Fails for (2, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y' ^ x';
res1 = x' % z;
Program 1:
t1 = y' s< x';
t2 = min(t1, x');
res1 = x' ^ x;
Program 2:
res1 = x + 0x4;

Fastest checker: explicit
Fails for (4, 2, 6, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y' ? y' : z';
res1 = min(y, x');
Program 1:
res1 = x' + x;
Program 2:
t1 = z' <= z;
t2 = x >> x';
res1 = y' s< y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z' >>> x;
res1 = z + x;
Program 1:
t1 = x' ==> y';
res1 = x' + x;
Program 2:
t1 = min(x, z);
t2 = y' == y;
t3 = max(0x2, z');
t4 = z s< x';
t5 = y + 0x2;
t6 = t5 + t4;
res1 = x' s<= z;

Fastest checker: explicit
Fails for (0, 1, 4, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x' s<= x';
t2 = t1 s< z;
res1 = x & y';
Program 1:
res1 = x' + x;
Program 2:
t1 = x | x';
t2 = x >>> x';
res1 = y' - y;

Fastest checker: explicit
Fails for (0, 3, 4, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
res1 = y <= y';
Program 1:
t1 = ~z';
t2 = max(x, y);
res1 = max(x, x');
Program 2:
t1 = y ==> x;
t2 = y + z;
res1 = z' - y;

Fastest checker: explicit
Fails for (0, 3, 5, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x' < 0x1;
res1 = z' | y';
Program 1:
t1 = x' << z';
t2 = x' + z;
res1 = max(x', x);
Program 2:
t1 = x ? 0x1 : z';
t2 = ~z;
res1 = y' s< y;

Fastest checker: explicit
Fails for (0, 1, 6, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
res1 = z' << x;
Program 1:
t1 = x' < y';
t2 = z ==> 0x6;
t3 = -y;
res1 = t1 ==> x;
Program 2:
t1 = z & y;
t2 = x' * 0x3;
t3 = max(x, x');
res1 = y' - y;

Fastest checker: explicit
Fails for (1, 3, 6, 1, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 == z;
res1 = z' + x;
Program 1:
t1 = min(x', 0x5);
res1 = x' ^ x;
Program 2:
t1 = 0x6 + z';
t2 = 0x6 ==> x;
t3 = t1 >> 0x6;
t4 = z % 0x6;
t5 = y ==> t3;
res1 = y' - y;

Fastest checker: explicit
Fails for (2, 3, 6, 1, 2, 6)

[]







Timeout
Perf counters:
{'genetic': 26, 'explicit': 26, 'timeout': 1, 'iterations': 27}
Perf timers:
verify: 0.29s
checker: 59.94s
gcc: 0.48s
_: 60.00s
synth: 59.69s
