Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x0 >>> z';
t2 = x' * 0x0;
res1 = min(y', y);
Program 1:
res1 = x' s<= y;
Program 2:
t1 = y + y';
res1 = z - t1;

Fastest checker: explicit
Fails for (3, 1, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x % y';
t2 = y' s< y';
t3 = y <= 0x0;
t4 = x' ? y : y';
res1 = x' * x';
Program 1:
t1 = y | y;
res1 = z << z';
Program 2:
t1 = y s<= y';
t2 = x >>> y;
t3 = t2 ==> y;
t4 = y >> t2;
res1 = t3 s<= t2;

Fastest checker: explicit
Fails for (8, 1, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z' <= x';
t2 = y == 0x7;
res1 = z' - z;
Program 1:
res1 = z s< 0x7;
Program 2:
t1 = -y;
t2 = z * z;
res1 = z / y;

Fastest checker: explicit
Fails for (0, 4, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0xf >>> y;
t2 = y != x';
t3 = t2 << t1;
res1 = ~x';
Program 1:
t1 = x' <= y';
res1 = 0x8 << 0x8;
Program 2:
t1 = 0x8 s<= x';
t2 = ~z;
t3 = x' != y;
res1 = y <= z;

Fastest checker: explicit
Fails for (0, 7, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = max(y, x);
Program 1:
res1 = x' != 0x1;
Program 2:
t1 = y - 0x0;
t2 = y + x;
t3 = max(t2, x);
t4 = z - y';
res1 = -z;

Fastest checker: explicit
Fails for (2, 7, 6, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x' < z;
t2 = x' ^ y';
t3 = t2 != y';
t4 = x' <= 0x8;
res1 = max(t2, 0x8);
Program 1:
res1 = y' * z';
Program 2:
t1 = x <= x;
t2 = z << t1;
t3 = 0x1 ==> x';
t4 = t1 * z;
res1 = -y;

Fastest checker: explicit
Fails for (0, 2, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = min(x', 0x7);
res1 = ~z;
Program 1:
t1 = min(y', 0x0);
t2 = z' << y;
res1 = x' + t1;
Program 2:
t1 = -z';
t2 = z ? t1 : t1;
t3 = t1 == x;
t4 = t2 s<= z;
res1 = 0x1 >>> t2;

Fastest checker: explicit
Fails for (1, 2, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y' < z';
t2 = y | z;
t3 = t2 | t2;
res1 = min(x, t1);
Program 1:
t1 = 0x1 < 0x1;
t2 = ~t1;
t3 = x' ==> x';
t4 = t2 < z;
res1 = x ? 0x1 : y;
Program 2:
t1 = z' == z';
t2 = y' != y;
t3 = x' | z';
res1 = ~x;

Fastest checker: explicit
Fails for (9, 2, 8, 9, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x * z;
t2 = x | x';
t3 = 0xf + y;
res1 = 0xf ==> t2;
Program 1:
t1 = y' == y';
t2 = t1 >> y';
res1 = z != t2;
Program 2:
t1 = 0x7 s<= z;
t2 = y' - z;
t3 = t1 s< y;
t4 = ~y;
res1 = t2 == x;

Fastest checker: explicit
Fails for (0, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y == z;
t2 = t1 + x;
t3 = t2 | 0xf;
res1 = y s<= z;
Program 1:
t1 = y' - z';
t2 = max(y, y);
t3 = t1 != 0xf;
t4 = t3 << 0xf;
res1 = min(t3, y);
Program 2:
t1 = y' << z;
t2 = t1 - z;
t3 = t1 < x;
t4 = t3 s<= x;
res1 = min(x', y');

Fastest checker: explicit
Fails for (8, 1, 0, 10, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = z & y';
Program 1:
t1 = ~y;
t2 = y << x;
res1 = ~t2;
Program 2:
t1 = y * y;
t2 = y + t1;
t3 = y' - y;
res1 = y' s< t1;

Fastest checker: explicit
Fails for (0, 3, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z ^ z';
t2 = y' != z';
res1 = x % x';
Program 1:
res1 = ~x;
Program 2:
t1 = y' << x;
t2 = 0x7 % y;
res1 = t2 s<= y;

Fastest checker: explicit
Fails for (15, 3, 0, 12, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y' << 0xf;
t2 = z * x;
res1 = y' & y';
Program 1:
t1 = z' << 0x1;
res1 = ~t1;
Program 2:
t1 = x | x';
t2 = y & z';
t3 = -y';
t4 = y' * y';
res1 = x' s<= y;

Fastest checker: explicit
Fails for (0, 1, 0, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x8 s< z;
t2 = x ==> y;
res1 = t1 ==> x;
Program 1:
t1 = ~y;
t2 = t1 ? z' : 0x1;
res1 = -t1;
Program 2:
res1 = ~z;

Fastest checker: explicit
Fails for (0, 1, 13, 14, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = z * x';
Program 1:
t1 = z' ^ y';
t2 = 0x8 ? y' : x';
t3 = 0x8 + 0x8;
t4 = z <= x';
res1 = t2 + 0x8;
Program 2:
t1 = x' != y';
t2 = z' << y;
t3 = -y;
t4 = y' ^ 0xf;
res1 = z ^ z;

Fastest checker: explicit
Fails for (0, 1, 0, 15, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x' + y';
res1 = -z';
Program 1:
t1 = 0x8 ==> z';
t2 = t1 <= t1;
t3 = min(z, t2);
res1 = z' <= z;
Program 2:
t1 = y >>> z;
t2 = max(y, y);
t3 = z * x';
t4 = y' >> y';
res1 = y' >> 0x7;

Fastest checker: explicit
Fails for (0, 1, 13, 15, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x' >>> z';
t2 = z != z';
t3 = min(y, z');
t4 = ~x';
res1 = t1 == t2;
Program 1:
t1 = y' < x';
t2 = x >>> z';
t3 = z' < y;
res1 = y' == y;
Program 2:
t1 = 0x7 s< z';
t2 = 0x7 + z;
t3 = min(y', y');
t4 = z == x;
res1 = x + 0x7;

Fastest checker: explicit
Fails for (9, 2, 13, 15, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x % y;
res1 = y' == z;
Program 1:
t1 = y + y';
t2 = t1 ^ y;
res1 = y + z';
Program 2:
t1 = y' == z;
t2 = ~x;
res1 = y' s< y;

Fastest checker: explicit
Fails for (15, 2, 13, 15, 2, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y & y;
t2 = z' + z';
res1 = t2 != z;
Program 1:
t1 = min(z, 0x7);
t2 = z' | z;
res1 = 0x7 + 0x7;
Program 2:
t1 = z' ? y : y;
t2 = y >> x;
res1 = x' s< t1;

Fastest checker: explicit
Fails for (1, 1, 14, 15, 2, 13)

[]
Fastest checker: genetic
Program 0:
res1 = ~y;
Program 1:
res1 = z' == z;
Program 2:
t1 = y' == y;
t2 = max(y', y');
t3 = y >> x';
t4 = x ==> t2;
res1 = y' >> t1;

Fastest checker: explicit
Fails for (0, 1, 13, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = z' ^ y;
t2 = 0xf + 0xf;
res1 = 0xf + 0xf;
Program 1:
t1 = 0x1 + 0x1;
t2 = 0x1 s< y;
res1 = y == y';
Program 2:
t1 = z' ^ y;
t2 = 0x0 + 0x0;
t3 = t2 == t2;
t4 = min(y', 0x0);
res1 = t3 - z;

Fastest checker: explicit
Fails for (0, 3, 13, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x + z';
t2 = z / y';
t3 = t1 + 0x1;
res1 = y <= z';
Program 1:
t1 = 0xf + y;
t2 = z' < x';
res1 = x != x';
Program 2:
t1 = z >>> z';
t2 = ~x;
t3 = x' s< y;
res1 = 0x8 + 0x8;

Fastest checker: explicit
Fails for (1, 3, 13, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
res1 = x' % x;
Program 1:
t1 = -x';
t2 = y' ^ z';
t3 = x + y;
t4 = min(y', x);
res1 = x' != x;
Program 2:
t1 = ~x;
t2 = z' s<= y;
t3 = 0x1 + 0x1;
res1 = x' s< x;

Fastest checker: explicit
Fails for (8, 3, 13, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = x | x';
t2 = x' - 0x8;
res1 = x' * z';
Program 1:
t1 = ~0x7;
t2 = x <= z;
t3 = z' != y';
t4 = z + y';
res1 = x' != x;
Program 2:
t1 = x' s< y;
t2 = 0x0 + 0x0;
t3 = y + x;
t4 = y' s< y;
res1 = 0x0 >>> 0x0;

Fastest checker: explicit
Fails for (13, 3, 13, 0, 3, 13)

[]
Fastest checker: genetic
Program 0:
t1 = y >>> z;
t2 = max(x, x');
t3 = t2 s< t2;
t4 = z' % z';
res1 = x < 0x1;
Program 1:
res1 = x' ^ x;
Program 2:
t1 = z - x;
t2 = t1 ^ 0xf;
t3 = y' s<= y;
res1 = x' >> y';

Fastest checker: explicit
Fails for (14, 3, 13, 0, 3, 13)

[]







Timeout
Perf counters:
{'genetic': 25, 'explicit': 25, 'timeout': 1, 'iterations': 26}
Perf timers:
verify: 0.29s
checker: 179.96s
gcc: 0.38s
_: 180.00s
synth: 179.70s
