Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = y <= 0xb;
I = t1 | 0xb;
Program 1:
I = 0x7 >>> y;

Fastest checker: explicit
Fails for (1, 11)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> x;
I = y s<= y;
Program 1:
t1 = y & 0x6;
I = -y;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y | y;
t2 = y ^ y;
I = 0x4 - t2;
Program 1:
t1 = ~y;
t2 = t1 s<= t1;
I = 0x5 != 0x5;

Fastest checker: explicit
Fails for (1, 15)

[]
Fastest checker: genetic
Program 0:
t1 = x < 0x4;
t2 = t1 ==> 0x4;
I = y s<= 0x4;
Program 1:
t1 = ~y;
I = x % 0x2;

Fastest checker: explicit
Fails for (2, 15)

[]
Fastest checker: genetic
Program 0:
t1 = 0xa <= y;
I = t1 s< y;
Program 1:
t1 = x + x;
I = x <= t1;

Fastest checker: explicit
Fails for (1, 7)

[]
Fastest checker: genetic
Program 0:
I = 0x8 s< x;
Program 1:
t1 = x == y;
I = 0xe - y;

Fastest checker: explicit
Fails for (8, 7)

[]
Fastest checker: genetic
Program 0:
t1 = x | y;
I = y <= 0x1;
Program 1:
t1 = y ? x : 0x2;
I = x ^ t1;

Fastest checker: explicit
Fails for (2, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y == 0x1;
t2 = min(t1, 0x1);
I = t2 | t2;
Program 1:
t1 = x < y;
t2 = x * 0x3;
I = t1 <= x;

Fastest checker: explicit
Fails for (1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x ? 0x6 : x;
I = t1 <= 0x6;
Program 1:
I = 0x6 - y;

Fastest checker: explicit
Fails for (1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = 0x6 ==> x;
t3 = 0x6 ==> 0x6;
I = x + t3;
Program 1:
t1 = y | y;
t2 = t1 s<= y;
t3 = 0xd - y;
I = ~0xd;

Fastest checker: explicit
Fails for (5, 6)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x8;
t2 = 0x8 + 0x8;
t3 = 0x8 - t2;
I = 0x8 ==> 0x8;
Program 1:
t1 = y == 0x2;
t2 = 0x2 - y;
I = 0x2 + t2;

Fastest checker: explicit
Fails for (1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x8;
I = y + t1;
Program 1:
t1 = y == 0xd;
I = 0xd - y;

Fastest checker: explicit
Fails for (1, 8)

[]
Fastest checker: genetic
Program 0:
I = ~0x8;
Program 1:
t1 = y == 0xd;
I = 0xd - y;

Fastest checker: explicit
Fails for (1, 13)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 - 0x6;
t2 = x + x;
I = y + 0x6;
Program 1:
t1 = y == 0xd;
t2 = 0xd - y;
I = 0xd + t2;

Fastest checker: explicit
Fails for (1, 9)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 ==> y;
I = t1 + y;
Program 1:
t1 = y | y;
t2 = y + 0xd;
I = -y;

Fastest checker: explicit
Fails for (1, 14)

[]
Fastest checker: genetic
Program 0:
t1 = 0x7 s< 0x7;
t2 = t1 | x;
I = 0x7 != t1;
Program 1:
t1 = x ==> 0x3;
t2 = 0x3 - y;
I = t1 ==> 0x3;

Fastest checker: explicit
Fails for (1, 3)

[]
Fastest checker: genetic
Program 0:
I = y == y;
Program 1:
t1 = ~0x6;
t2 = 0x6 - y;
t3 = t2 ==> 0x6;
t4 = y s< y;
I = t4 s<= x;

Fastest checker: explicit
Fails for (6, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(x, 0x8);
I = y <= t1;
Program 1:
t1 = x | 0xe;
I = 0xe - y;

Fastest checker: explicit
Correct for wordlen=4
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc







Finished in 19.03s

Program 0:
t1 = max(x, 0x80000000L);
I = y <= t1;
Program 1:
t1 = x | 0xe0000000L;
I = 0xe0000000L - y;


Perf counters:
{'genetic': 18, 'cbmc': 5, 'explicit': 18, 'iterations': 18}
Perf timers:
gcc: 0.64s
verify: 10.61s
checker: 18.96s
generalize: 8.33s
synth: 8.41s
_: 19.03s
