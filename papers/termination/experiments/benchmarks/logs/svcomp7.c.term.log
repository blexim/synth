Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = x ==> x;
res1 = y s<= y;
Program 1:
t1 = y & 0x6;
res1 = -y;

Fastest checker: explicit
Fails for (1, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y | y;
t2 = y ^ y;
res1 = 0x4 - t2;
Program 1:
t1 = ~y;
t2 = t1 s<= t1;
res1 = 0x5 != 0x5;

Fastest checker: explicit
Fails for (1, 7)

[]
Fastest checker: genetic
Program 0:
res1 = 0x6 / 0x6;
Program 1:
t1 = 0x6 + y;
t2 = t1 | t1;
t3 = t2 s< 0x6;
t4 = t3 + 0x6;
res1 = t1 + x;

Fastest checker: explicit
Fails for (3, 7)

[]
Fastest checker: genetic
Program 0:
t1 = y != x;
t2 = y <= 0x3;
res1 = ~y;
Program 1:
t1 = 0x7 ^ y;
t2 = t1 / t1;
res1 = t2 != t2;

Fastest checker: explicit
Fails for (1, 6)

[]
Fastest checker: genetic
Program 0:
res1 = y <= y;
Program 1:
t1 = y & y;
t2 = y < 0x6;
t3 = 0x6 - y;
res1 = 0x6 + t3;

Fastest checker: explicit
Fails for (1, 4)

[]
Fastest checker: genetic
Program 0:
t1 = y & y;
res1 = max(y, x);
Program 1:
t1 = 0x3 - 0x3;
t2 = x s<= y;
t3 = 0x3 >> t2;
res1 = t2 - y;

Fastest checker: explicit
Fails for (2, 0)

[]
Fastest checker: genetic
Program 0:
res1 = y ==> 0x2;
Program 1:
t1 = 0x4 - y;
t2 = x < 0x4;
res1 = t2 << t2;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc







Finished in 9.65s

Program 0:
res1 = y ==> 0x40000000;
Program 1:
t1 = 0x80000000L - y;
t2 = x < 0x80000000L;
res1 = t2 << t2;


Perf counters:
{'genetic': 7, 'cbmc': 2, 'explicit': 7, 'iterations': 7}
Perf timers:
gcc: 0.63s
verify: 4.26s
checker: 9.63s
generalize: 2.02s
synth: 5.39s
_: 9.65s
