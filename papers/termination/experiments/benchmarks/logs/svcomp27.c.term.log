Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = i <= b;
Program 1:
t1 = max(i, c);
t2 = min(N, j);
I = a ==> t2;

Fastest checker: explicit
Fails for (0, 5, 2, 4, 1, 6, 3)

[]
Fastest checker: genetic
Program 0:
I = N - i;
Program 1:
t1 = c == M;
t2 = M - j;
I = t2 - 0x5;

Fastest checker: explicit
Fails for (0, 2, 3, 4, 1, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = M s< M;
I = b s< t1;
Program 1:
t1 = N ^ c;
I = a - b;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 2, 6, 3)

[]
Fastest checker: genetic
Program 0:
I = M & N;
Program 1:
t1 = N - c;
I = c < t1;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = N == M;
t2 = 0x4 & i;
I = t2 ==> a;
Program 1:
t1 = max(a, M);
t2 = ~i;
I = a ==> i;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = M != c;
t2 = j ^ c;
I = t1 - b;
Program 1:
t1 = b & N;
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 0, 1, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
I = c s<= c;
Program 1:
t1 = ~i;
t2 = min(b, a);
I = i <= b;

Fastest checker: explicit
Fails for (0, 7, 0, 1, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
I = M >>> c;
Program 1:
t1 = N - i;
I = 0x5 | a;

Fastest checker: explicit
Fails for (0, 3, 1, 1, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = a * 0x5;
I = c <= 0x5;
Program 1:
t1 = i ? b : b;
I = N >>> j;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 ==> M;
t2 = max(t1, i);
I = M | 0x5;
Program 1:
I = ~j;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = j ? M : a;
t2 = t1 == M;
I = c <= a;
Program 1:
t1 = c & N;
t2 = t1 << b;
I = i >> a;

Fastest checker: explicit
Fails for (3, 0, 0, 7, 3, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 ^ c;
I = b + N;
Program 1:
t1 = -c;
t2 = -0x5;
I = a ? a : N;

Fastest checker: explicit
Fails for (0, 0, 0, 5, 4, 6, 3)

[]
Fastest checker: genetic
Program 0:
t1 = N | c;
I = c ==> 0x0;
Program 1:
I = min(a, i);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 7, 3)

[]
Fastest checker: genetic
Program 0:
I = i | 0x7;
Program 1:
t1 = j s< 0x1;
I = M - c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 7, 7, 3)

[]
Fastest checker: genetic
Program 0:
t1 = -i;
I = c <= M;
Program 1:
I = j ^ N;

Fastest checker: explicit
Fails for (0, 4, 0, 3, 7, 7, 3)

[]
Fastest checker: genetic
Program 0:
t1 = N & c;
t2 = -N;
I = N | b;
Program 1:
t1 = j / 0x6;
I = 0x6 - c;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 6, 0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = j | b;
t2 = c >> j;
t3 = j ^ t1;
t4 = i + 0x2;
t5 = c + M;
t6 = t5 | a;
t7 = b | b;
I = max(t3, 0x2);
Program 1:
t1 = a s< 0x1;
I = 0x1 - i;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 0, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = N * M;
t2 = j s<= t1;
I = a ^ M;
Program 1:
I = M - j;

Fastest checker: explicit
Fails for (0, 2, 0, 0, 0, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = N & M;
t2 = b * N;
I = N | b;
Program 1:
t1 = a + M;
t2 = ~i;
I = 0x6 - i;

Fastest checker: explicit
Fails for (0, 6, 0, 0, 0, 2, 4)

[]
Fastest checker: genetic
Program 0:
t1 = c | 0x7;
t2 = c - M;
I = N | b;
Program 1:
I = M - i;

Fastest checker: explicit
Fails for (0, 0, 0, 4, 0, 0, 5)

[]
Fastest checker: genetic
Program 0:
I = M | 0x1;
Program 1:
t1 = j == N;
t2 = 0x2 + c;
I = ~t2;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 5, 0, 5)

[]
Fastest checker: genetic
Program 0:
t1 = a + j;
t2 = t1 + c;
t3 = ~N;
I = N + t3;
Program 1:
t1 = c != c;
t2 = 0x6 - j;
I = j ==> M;

Fastest checker: explicit
Fails for (0, 4, 0, 6, 5, 0, 5)

[]
Fastest checker: genetic
Program 0:
t1 = N | N;
I = i | N;
Program 1:
t1 = N * M;
t2 = b == a;
t3 = i < j;
t4 = j >> c;
I = t2 - c;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 1, 5)

[]
Fastest checker: genetic
Program 0:
t1 = c >> i;
t2 = 0x5 | a;
I = t1 - N;
Program 1:
t1 = ~j;
I = b | N;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 0, 1, 5)

[]
Fastest checker: genetic
Program 0:
t1 = c * b;
t2 = i s< i;
t3 = N >> c;
I = b == b;
Program 1:
t1 = M == 0x2;
t2 = -N;
I = t2 - c;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 3, 1, 5)

[]
Fastest checker: genetic
Program 0:
I = a ? 0x5 : N;
Program 1:
t1 = ~i;
I = i s< c;

Fastest checker: explicit
Fails for (0, 7, 0, 0, 4, 1, 5)

[]
Fastest checker: genetic
Program 0:
t1 = c & M;
I = 0x7 != t1;
Program 1:
I = N - j;

Fastest checker: explicit
Fails for (0, 0, 0, 5, 4, 1, 5)

[]
Fastest checker: genetic
Program 0:
t1 = ~b;
I = 0x1 == 0x1;
Program 1:
t1 = c & i;
t2 = b s<= a;
I = t2 - c;

Fastest checker: explicit
Fails for (4, 0, 0, 0, 0, 2, 5)

[]
Fastest checker: genetic
Program 0:
I = 0x6 s<= M;
Program 1:
t1 = max(j, i);
I = M - t1;

Fastest checker: explicit
Fails for (0, 0, 0, 2, 0, 2, 5)

[]
Fastest checker: genetic
Program 0:
I = ~0x2;
Program 1:
t1 = M - N;
t2 = min(0x2, i);
t3 = a & j;
t4 = M + a;
t5 = t4 - 0x2;
I = t1 - j;

Fastest checker: explicit
Fails for (0, 0, 0, 5, 0, 2, 5)

[]
Fastest checker: genetic
Program 0:
t1 = b | c;
t2 = M < N;
I = j == t1;
Program 1:
I = ~c;

Fastest checker: explicit
Fails for (0, 0, 5, 5, 0, 2, 5)

[]
Fastest checker: genetic
Program 0:
t1 = b == N;
t2 = c | c;
I = t2 ==> N;
Program 1:
t1 = 0x1 << M;
t2 = b <= M;
I = t1 - i;

Fastest checker: explicit
Fails for (0, 4, 5, 5, 0, 2, 5)

[]
Fastest checker: genetic
Program 0:
I = N ^ M;
Program 1:
t1 = max(0x5, b);
t2 = b s< M;
t3 = j - 0x5;
I = M - t3;

Fastest checker: explicit
Fails for (0, 0, 0, 7, 0, 2, 5)

[]







Timeout
Perf counters:
{'genetic': 33, 'explicit': 33, 'timeout': 1, 'iterations': 34}
Perf timers:
verify: 0.84s
checker: 44.92s
gcc: 0.48s
_: 45.00s
synth: 44.14s
