Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = 0x5 >>> d;
Program 1:
t1 = y s<= nondet_2;
t2 = min(x, nondet_0);
I = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 15)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_1 + y;
t2 = nondet_0 - t1;
I = y == y;
Program 1:
t1 = max(d, x);
I = d - 0x4;

Fastest checker: explicit
Fails for (1, 0, 1, 1, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = d ^ 0x5;
I = nondet_2 | 0x5;
Program 1:
I = x * 0x2;

Fastest checker: explicit
Fails for (0, 2, 0, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_2 <= nondet_1;
I = 0xa ^ t1;
Program 1:
t1 = nondet_1 ? 0x9 : x;
I = d & t1;

Fastest checker: explicit
Fails for (1, 0, 1, 2, 1, 1)

[]
Fastest checker: genetic
Program 0:
I = nondet_0 ==> 0x2;
Program 1:
I = y ? x : y;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y | 0x9;
t2 = max(0x9, t1);
I = t1 ? t2 : nondet_1;
Program 1:
t1 = nondet_0 s< d;
t2 = max(x, nondet_1);
I = min(nondet_1, nondet_0);

Fastest checker: explicit
Fails for (0, 1, 1, 1, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = y - d;
t2 = nondet_2 ==> nondet_0;
I = ~0x2;
Program 1:
t1 = 0x7 != nondet_2;
I = y + x;

Fastest checker: explicit
Fails for (0, 3, 0, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = min(0x9, 0x9);
Program 1:
t1 = x + nondet_0;
t2 = d << y;
I = nondet_2 s<= y;

Fastest checker: explicit
Fails for (2, 0, 1, 2, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = x <= x;
Program 1:
t1 = nondet_2 >>> d;
t2 = nondet_1 == 0xa;
I = y * x;

Fastest checker: explicit
Fails for (0, 6, 0, 3, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc >>> d;
t2 = nondet_2 + x;
t3 = max(t2, x);
I = ~nondet_1;
Program 1:
t1 = y s<= nondet_2;
t2 = nondet_0 + x;
I = max(d, y);

Fastest checker: explicit
Fails for (0, 15, 0, 3, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >>> d;
t2 = x + nondet_2;
I = t2 | 0x5;
Program 1:
t1 = y s<= nondet_2;
t2 = min(x, nondet_0);
t3 = 0x0 s<= 0x0;
t4 = x + x;
I = nondet_2 + y;

Fastest checker: explicit
Fails for (14, 15, 0, 3, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x >> nondet_2;
I = max(0x5, nondet_1);
Program 1:
t1 = y s<= nondet_2;
t2 = min(x, nondet_0);
t3 = nondet_0 + x;
I = y + nondet_1;

Fastest checker: explicit
Fails for (0, 0, 13, 3, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = 0x5 | d;
Program 1:
t1 = y s<= nondet_2;
t2 = min(x, nondet_0);
t3 = x + y;
I = y + nondet_1;

Fastest checker: explicit
Fails for (0, 14, 0, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 >>> d;
I = x + 0x5;
Program 1:
t1 = nondet_1 == x;
t2 = 0x0 ? x : y;
I = max(nondet_1, x);

Fastest checker: explicit
Fails for (0, 5, 1, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = d - nondet_1;
t2 = x ==> nondet_0;
I = t2 + nondet_1;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = y + nondet_2;
t3 = x s<= nondet_0;
t4 = min(nondet_2, nondet_1);
t5 = y + x;
I = y + 0xd;

Fastest checker: explicit
Fails for (0, 15, 1, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 >>> d;
I = 0x6 + d;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_0 | nondet_2;
t3 = x + nondet_0;
t4 = 0xd + 0xd;
t5 = min(0xd, d);
t6 = t5 s<= x;
I = nondet_0 + nondet_2;

Fastest checker: explicit
Fails for (2, 15, 1, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = d - nondet_1;
I = 0x6 + d;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_0 | nondet_2;
t3 = t1 | nondet_2;
t4 = nondet_1 + x;
I = nondet_0 + y;

Fastest checker: explicit
Fails for (10, 15, 1, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = d - nondet_1;
t2 = d + nondet_1;
I = 0x6 - d;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_0 | nondet_2;
t3 = t1 + nondet_2;
t4 = nondet_1 + x;
I = nondet_0 | y;

Fastest checker: explicit
Fails for (6, 0, 2, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x ==> nondet_0;
I = nondet_0 + 0x6;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = nondet_0 | nondet_2;
t3 = nondet_1 | y;
t4 = nondet_0 + nondet_2;
t5 = x + nondet_2;
I = nondet_2 | d;

Fastest checker: explicit
Fails for (0, 0, 10, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = x <= x;
Program 1:
t1 = x == nondet_0;
t2 = d + nondet_2;
t3 = nondet_0 + nondet_2;
t4 = t2 | nondet_2;
t5 = y | nondet_2;
t6 = x | nondet_0;
I = y + nondet_0;

Fastest checker: explicit
Fails for (0, 0, 12, 4, 2, 1)

[]
Fastest checker: genetic
Program 0:
t1 = x <= x;
I = nondet_0 + 0xa;
Program 1:
t1 = x == nondet_0;
t2 = d | nondet_2;
t3 = nondet_1 + nondet_1;
t4 = nondet_0 + nondet_2;
t5 = nondet_0 | nondet_2;
t6 = nondet_1 | nondet_1;
t7 = nondet_0 + nondet_2;
t8 = x + nondet_2;
I = nondet_2 | d;

Fastest checker: explicit
Fails for (11, 0, 0, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = x <= x;
Program 1:
t1 = nondet_1 | nondet_1;
t2 = x + nondet_0;
t3 = d == nondet_2;
I = nondet_2 | d;

Fastest checker: explicit
Fails for (3, 5, 0, 5, 2, 1)

[]
Fastest checker: genetic
Program 0:
I = x <= x;
Program 1:
t1 = x == nondet_0;
t2 = d | nondet_2;
t3 = nondet_0 < 0xd;
t4 = x + x;
I = t3 + y;

Fastest checker: cbmc
Correct for wordlen=4
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 7.91s

Program 0:
I = x <= x;
Program 1:
t1 = x == nondet_0;
t2 = d | nondet_2;
t3 = nondet_0 < 0xd;
t4 = x + x;
I = t3 + y;


Perf counters:
{'genetic': 23, 'cbmc': 2, 'explicit': 22, 'iterations': 23}
Perf timers:
verify: 6.26s
checker: 7.85s
gcc: 0.64s
_: 7.91s
synth: 1.63s
