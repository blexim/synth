Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = 0x5 >>> n;
Program 1:
t1 = m s<= nondet_0;
t2 = min(z, y);
I = 0x0 s<= 0x0;

Fastest checker: explicit
Fails for (0, 5, 2, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y ? m : nondet_0;
I = n >>> nondet_0;
Program 1:
I = y < n;

Fastest checker: explicit
Fails for (0, 6, 2, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 / x;
I = max(z, y);
Program 1:
t1 = z s< n;
I = nondet_0 == z;

Fastest checker: explicit
Fails for (6, 6, 2, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = ~0x1;
I = x s<= y;
Program 1:
t1 = z < n;
t2 = nondet_0 s< x;
I = 0x3 * y;

Fastest checker: explicit
Fails for (0, 0, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = n < nondet_0;
t2 = n != n;
I = t1 < x;
Program 1:
t1 = 0x4 * x;
t2 = 0x4 * nondet_0;
I = m s< y;

Fastest checker: explicit
Fails for (7, 0, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
I = x & m;
Program 1:
t1 = 0x3 >>> z;
I = t1 + z;

Fastest checker: explicit
Fails for (0, 1, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(z, n);
t2 = ~n;
I = x - 0x0;
Program 1:
t1 = m - y;
I = t1 == x;

Fastest checker: explicit
Fails for (0, 3, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = y * x;
I = m & x;
Program 1:
t1 = n >>> x;
t2 = ~y;
I = x & x;

Fastest checker: explicit
Fails for (0, 5, 3, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = 0x1 < z;
t2 = m << y;
I = -x;
Program 1:
t1 = -z;
t2 = ~m;
I = t1 + y;

Fastest checker: explicit
Fails for (0, 1, 4, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = max(n, n);
t2 = n != n;
I = n ==> x;
Program 1:
t1 = -y;
I = 0x3 ? t1 : y;

Fastest checker: explicit
Fails for (0, 5, 4, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = n - 0x3;
t2 = y ? m : x;
I = x * m;
Program 1:
I = z s< n;

Fastest checker: explicit
Fails for (0, 7, 4, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z == y;
t2 = y ^ nondet_0;
I = x >> t1;
Program 1:
I = z ^ 0x3;

Fastest checker: explicit
Fails for (1, 7, 4, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = x << n;
I = t1 * n;
Program 1:
t1 = 0x3 | z;
t2 = z <= z;
t3 = x != x;
I = y % t1;

Fastest checker: explicit
Fails for (0, 2, 7, 4, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z s< m;
I = n ? x : 0x6;
Program 1:
t1 = z + x;
t2 = n + t1;
t3 = m < t2;
I = n + t2;

Fastest checker: explicit
Fails for (0, 7, 0, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = m <= x;
t2 = z <= z;
I = x << x;
Program 1:
t1 = min(n, y);
t2 = z s< n;
I = x != n;

Fastest checker: explicit
Fails for (0, 1, 1, 5, 1, 6)

[]
Fastest checker: genetic
Program 0:
t1 = ~x;
I = x * 0x4;
Program 1:
t1 = m ==> z;
t2 = 0x1 << nondet_0;
t3 = -m;
I = z * x;

Fastest checker: explicit
Fails for (0, 1, 0, 0, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = z * n;
t2 = 0x4 != n;
t3 = z * nondet_0;
t4 = m != t2;
t5 = z * 0x4;
t6 = m != z;
t7 = 0x4 << t3;
I = 0x4 * x;
Program 1:
t1 = z + n;
I = t1 * x;

Fastest checker: explicit
Fails for (0, 1, 0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = m ^ y;
t2 = 0x7 - y;
I = m & x;
Program 1:
t1 = nondet_0 >> 0x3;
I = x * z;

Fastest checker: explicit
Fails for (1, 1, 0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
t1 = n < n;
I = x & 0x5;
Program 1:
t1 = ~y;
t2 = z s< n;
t3 = x * t1;
I = x ==> nondet_0;

Fastest checker: explicit
Fails for (0, 6, 0, 2, 2, 6)

[]
Fastest checker: genetic
Program 0:
I = x & 0x1;
Program 1:
t1 = ~y;
t2 = z - n;
t3 = x * t1;
I = x >>> nondet_0;

Fastest checker: explicit
Fails for (0, 1, 7, 2, 2, 6)

[]







Timeout
Perf counters:
{'genetic': 20, 'explicit': 20, 'timeout': 1, 'iterations': 21}
Perf timers:
verify: 0.27s
checker: 59.96s
gcc: 0.46s
_: 60.00s
synth: 59.72s
