Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = !nondet_0 || z;
t2 = x / x;
t3 = nondet_0 * nondet_0;
I = max(t2, 0xe);
Program 1:
t1 = ((sword_t) z) < ((sword_t) n);
I = ((sword_t) x) <= ((sword_t) z);

Fastest checker: explicit
Fails for (0, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = x + x;
Program 1:
t1 = m ^ nondet_0;
I = ((sword_t) nondet_0) <= ((sword_t) z);

Fastest checker: explicit
Fails for (1, 1, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = max(x, x);
Program 1:
t1 = m & z;
t2 = x * t1;
t3 = ((sword_t) x) >> ((sword_t) z);
I = nondet_0 <= t1;

Fastest checker: explicit
Fails for (0, 4, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y & 0x8;
I = max(x, y);
Program 1:
t1 = m / 0x9;
t2 = ((sword_t) nondet_0) < ((sword_t) n);
t3 = ((sword_t) nondet_0) <= ((sword_t) t1);
I = y - x;

Fastest checker: explicit
Fails for (0, 0, 1, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y < m;
t2 = ((sword_t) z) <= ((sword_t) 0xa);
I = t1 ? t1 : x;
Program 1:
t1 = ((sword_t) m) <= ((sword_t) z);
I = ((sword_t) n) >> ((sword_t) z);

Fastest checker: explicit
Fails for (0, 9, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = n << nondet_0;
I = x << y;
Program 1:
t1 = !m || m;
t2 = ~z;
I = t2 == 0xe;

Fastest checker: explicit
Fails for (0, 15, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = n ^ nondet_0;
I = x & x;
Program 1:
t1 = n - y;
t2 = !z || 0x0;
t3 = n - 0x0;
I = nondet_0 <= t3;

Fastest checker: explicit
Fails for (0, 1, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = n < nondet_0;
t2 = x - x;
t3 = t1 ^ x;
I = x << m;
Program 1:
t1 = n <= m;
t2 = ((sword_t) n) <= ((sword_t) nondet_0);
t3 = y + x;
I = ((sword_t) y) <= ((sword_t) z);

Fastest checker: explicit
Fails for (0, 1, 1, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = z | nondet_0;
t2 = nondet_0 << x;
I = x | t1;
Program 1:
I = ~y;

Fastest checker: explicit
Fails for (1, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = max(n, x);
t2 = min(0x9, x);
I = -t2;
Program 1:
t1 = -nondet_0;
t2 = ~y;
I = m * t1;

Fastest checker: explicit
Fails for (0, 15, 1, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) 0xc) >> ((sword_t) n);
t2 = z * 0xc;
t3 = min(m, x);
t4 = n + t3;
I = x + x;
Program 1:
I = x + z;

Fastest checker: explicit
Fails for (0, 15, 0, 1, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = x + n;
t2 = nondet_0 < y;
t3 = m != 0xb;
t4 = x < t3;
t5 = t4 | x;
I = 0xb * x;
Program 1:
t1 = 0x3 | nondet_0;
t2 = 0x3 & m;
t3 = -nondet_0;
t4 = nondet_0 >> x;
t5 = y - x;
t6 = y < 0x3;
I = ((sword_t) t5) < ((sword_t) x);

Fastest checker: explicit
Fails for (0, 1, 3, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = x + n;
Program 1:
t1 = 0x3 | nondet_0;
t2 = 0x3 & m;
t3 = n <= t1;
t4 = nondet_0 ? 0x3 : m;
t5 = nondet_0 == nondet_0;
t6 = nondet_0 + x;
t7 = n + t6;
t8 = 0x3 + n;
t9 = n - y;
I = y < x;

Fastest checker: explicit
Fails for (0, 15, 2, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = x + n;
Program 1:
t1 = n - y;
t2 = ((sword_t) y) <= ((sword_t) 0xc);
t3 = 0xc + x;
t4 = nondet_0 + nondet_0;
t5 = nondet_0 + x;
t6 = n + t5;
t7 = y & x;
t8 = y < x;
t9 = min(t8, 0xc);
I = 0xc - nondet_0;

Fastest checker: explicit
Fails for (0, 1, 2, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) z) <= ((sword_t) x);
I = n + x;
Program 1:
t1 = 0xc + y;
t2 = m * 0xc;
t3 = 0xc != z;
t4 = 0xc - m;
t5 = !x || nondet_0;
t6 = n + y;
t7 = y + 0xc;
t8 = 0xc + x;
t9 = t7 + t5;
t10 = n + y;
t11 = y - x;
t12 = ((sword_t) m) <= ((sword_t) z);
I = x + m;

Fastest checker: explicit
Fails for (0, 9, 9, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = -nondet_0;
t2 = z * nondet_0;
t3 = -t2;
I = x * x;
Program 1:
t1 = nondet_0 != n;
t2 = t1 != y;
t3 = t2 != t2;
t4 = ~z;
t5 = x == z;
I = -m;

Fastest checker: explicit
Fails for (0, 1, 0, 2, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = y - x;
t2 = ((sword_t) z) <= ((sword_t) nondet_0);
t3 = !t2 || 0xd;
t4 = m * n;
I = x << z;
Program 1:
t1 = ~y;
t2 = -x;
t3 = y - y;
t4 = min(t2, t2);
I = ((sword_t) z) < ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 8, 8, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ((sword_t) x) <= ((sword_t) y);
t2 = z ? 0x8 : y;
t3 = ((sword_t) nondet_0) < ((sword_t) z);
I = t3 < x;
Program 1:
t1 = 0x0 + 0x0;
t2 = -y;
t3 = t1 == y;
t4 = ((sword_t) x) >> ((sword_t) t2);
I = !z || n;

Fastest checker: explicit
Fails for (8, 0, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 | 0xa;
t2 = m & y;
t3 = x << 0xa;
t4 = t3 >> y;
I = t3 >> 0xa;
Program 1:
t1 = y - x;
I = z <= 0x5;

Fastest checker: explicit
Fails for (0, 11, 11, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = m ^ y;
t2 = max(m, n);
t3 = ((sword_t) n) <= ((sword_t) nondet_0);
t4 = t3 | t3;
t5 = 0xa * z;
I = x + x;
Program 1:
t1 = 0xf ^ m;
t2 = m << nondet_0;
t3 = 0xf ^ y;
t4 = x + z;
t5 = y < 0xf;
I = nondet_0 <= m;

Fastest checker: explicit
Fails for (0, 1, 15, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~n;
t2 = t1 >> z;
t3 = m == y;
I = x * x;
Program 1:
t1 = x - y;
t2 = n << n;
t3 = !z || nondet_0;
t4 = ((sword_t) y) < ((sword_t) x);
I = nondet_0 - n;

Fastest checker: explicit
Fails for (1, 1, 1, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0xc + z;
t2 = nondet_0 | x;
t3 = t1 << 0xc;
t4 = t3 == x;
I = x * x;
Program 1:
t1 = m ? nondet_0 : 0x5;
t2 = ~z;
I = ((sword_t) y) < ((sword_t) x);

Fastest checker: explicit
Fails for (0, 3, 5, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = nondet_0 ^ 0x9;
t2 = -0x9;
t3 = m + t1;
t4 = !z || x;
t5 = z + 0x9;
t6 = x ? 0x9 : x;
t7 = n + z;
t8 = x * y;
t9 = nondet_0 ? n : x;
t10 = ((sword_t) x) <= ((sword_t) x);
I = x + x;
Program 1:
t1 = z ? n : y;
t2 = y < x;
I = z <= t2;

Fastest checker: explicit
Fails for (0, 15, 15, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = x + x;
Program 1:
t1 = z != n;
t2 = ((sword_t) z) < ((sword_t) n);
t3 = x << z;
I = ((sword_t) x) >> ((sword_t) t2);

Fastest checker: explicit
Fails for (0, 12, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 <= nondet_0;
t2 = max(y, n);
t3 = x % t1;
t4 = m - z;
t5 = ~t3;
t6 = nondet_0 >> t3;
I = n - x;
Program 1:
t1 = m ? z : m;
t2 = ((sword_t) y) <= ((sword_t) m);
t3 = z + nondet_0;
t4 = ~t3;
t5 = ~y;
I = x <= t4;

Fastest checker: explicit
Fails for (15, 1, 0, 0, 0, 0)

[]
Fastest checker: genetic
Program 0:
t1 = ~y;
t2 = -y;
I = x << t1;
Program 1:
t1 = z << x;
I = ((sword_t) z) <= ((sword_t) t1);

Fastest checker: explicit
Fails for (0, 5, 0, 0, 0, 0)

[]







Timeout
Perf counters:
{'genetic': 26, 'explicit': 26, 'timeout': 1, 'iterations': 27}
Perf timers:
verify: 0.48s
checker: 118.94s
gcc: 0.83s
_: 120.00s
synth: 118.51s
