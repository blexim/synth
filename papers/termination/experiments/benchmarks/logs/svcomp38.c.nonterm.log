Using seed: 1337
[]
Fastest checker: genetic
Evars: 6, 5, 7, 6
Program 0:
t1 = x < x;
I = 0x4 * x;

Fastest checker: explicit
Fails for (0, 3, 7, 5)

[]
Fastest checker: genetic
Evars: 3, 7, 6, 5
Program 0:
t1 = 0x2 >>> y;
t2 = x * y;
I = x <= t1;

Fastest checker: explicit
Fails for (0, 2, 0, 6)

[]
Fastest checker: genetic
Evars: 3, 4, 5, 1
Program 0:
I = y s< z;

Fastest checker: explicit
Fails for (0, 1, 4, 6)

[]
Fastest checker: genetic
Evars: 1, 7, 7, 5
Program 0:
t1 = y >> nondet_0;
t2 = t1 <= 0x1;
I = nondet_0 == 0x1;

Fastest checker: explicit
Fails for (1, 4, 4, 6)

[]
Fastest checker: genetic
Evars: 6, 5, 5, 6
Program 0:
t1 = y - 0x6;
t2 = nondet_0 <= t1;
I = nondet_0 == 0x6;

Fastest checker: explicit
Fails for (6, 4, 4, 6)

[]
Fastest checker: genetic
Evars: 0, 6, 4, 5
Program 0:
I = z < x;

Fastest checker: explicit
Fails for (0, 7, 4, 6)

[]
Fastest checker: genetic
Evars: 3, 7, 0, 0
Program 0:
t1 = y != y;
I = t1 == z;

Fastest checker: explicit
Fails for (0, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 3, 2, 7, 4
Program 0:
t1 = y != y;
I = 0x4 == z;

Fastest checker: explicit
Fails for (0, 1, 0, 4)

[]
Fastest checker: genetic
Evars: 1, 2, 7, 4
Program 0:
t1 = nondet_0 < nondet_0;
t2 = x + 0x7;
I = t2 s<= t1;

Fastest checker: explicit
Fails for (0, 1, 1, 4)

[]
Fastest checker: genetic
Evars: 4, 1, 5, 1
Program 0:
I = x == z;

Fastest checker: explicit
Fails for (0, 4, 1, 4)

[]
Fastest checker: genetic
Evars: 0, 5, 6, 7
Program 0:
t1 = y >>> 0x7;
t2 = t1 >> y;
t3 = z + y;
t4 = 0x7 + x;
t5 = z + t4;
I = 0x7 <= x;

Fastest checker: explicit
Fails for (0, 7, 0, 1)

[]
Fastest checker: genetic
Evars: 4, 2, 4, 0
Program 0:
t1 = 0x0 == 0x0;
t2 = x >>> nondet_0;
I = t2 ==> 0x0;

Fastest checker: explicit
Fails for (1, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 5, 2, 4, 0
Program 0:
I = nondet_0 == 0x5;

Fastest checker: explicit
Fails for (5, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 5, 5, 7
Program 0:
t1 = min(x, x);
t2 = x < t1;
I = nondet_0 / 0x7;

Fastest checker: explicit
Fails for (7, 1, 1, 1)

[]
Fastest checker: genetic
Evars: 7, 0, 7, 7
Program 0:
t1 = -z;
I = z / 0x7;

Fastest checker: explicit
Fails for (0, 1, 0, 7)

[]
Fastest checker: genetic
Evars: 3, 7, 0, 6
Program 0:
t1 = x + nondet_0;
t2 = 0x5 <= z;
I = x <= t2;

Fastest checker: explicit
Fails for (0, 1, 1, 7)

[]
Fastest checker: genetic
Evars: 0, 3, 1, 7
Program 0:
t1 = x / 0x5;
I = t1 & y;

Fastest checker: explicit
Fails for (0, 5, 1, 7)

[]
Fastest checker: genetic
Evars: 2, 7, 6, 7
Program 0:
t1 = nondet_0 <= z;
I = nondet_0 == 0x2;

Fastest checker: explicit
Fails for (2, 5, 1, 7)

[]
Fastest checker: genetic
Evars: 5, 3, 6, 1
Program 0:
t1 = z == y;
t2 = nondet_0 s< 0x6;
I = y == 0x6;

Fastest checker: explicit
Fails for (0, 1, 6, 7)

[]
Fastest checker: genetic
Evars: 2, 0, 7, 0
Program 0:
t1 = nondet_0 < nondet_0;
I = z ? t1 : nondet_0;

Fastest checker: explicit
Fails for (1, 1, 0, 0)

[]
Fastest checker: genetic
Evars: 0, 0, 4, 7
Program 0:
t1 = nondet_0 ? y : y;
t2 = 0x2 | z;
I = x == t2;

Fastest checker: explicit
Fails for (0, 2, 0, 0)

[]
Fastest checker: genetic
Evars: 3, 6, 5, 0
Program 0:
t1 = y << 0x2;
I = t1 << z;

Fastest checker: explicit
Fails for (0, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 4, 5, 7, 1
Program 0:
t1 = min(y, nondet_0);
I = z < t1;

Fastest checker: explicit
Fails for (1, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 5, 7, 4, 5
Program 0:
t1 = min(y, nondet_0);
I = x < t1;

Fastest checker: explicit
Fails for (4, 3, 5, 0)

[]
Fastest checker: genetic
Evars: 3, 6, 0, 1
Program 0:
t1 = 0x2 s< nondet_0;
t2 = t1 ==> nondet_0;
t3 = 0x2 s< t1;
I = x & t1;

Fastest checker: explicit
Fails for (3, 5, 5, 0)

[]
Fastest checker: genetic
Evars: 5, 1, 6, 1
Program 0:
t1 = max(0x3, nondet_0);
t2 = z * 0x3;
t3 = ~y;
t4 = t3 == z;
I = t3 * t4;

Fastest checker: explicit
Fails for (0, 1, 6, 1)

[]
Fastest checker: genetic
Evars: 1, 6, 5, 7
Program 0:
t1 = y / x;
I = 0x3 <= t1;

Fastest checker: explicit
Fails for (0, 2, 6, 1)

[]
Fastest checker: genetic
Evars: 2, 6, 6, 1
Program 0:
t1 = ~z;
I = y == t1;

Fastest checker: explicit
Fails for (0, 6, 6, 1)

[]
Fastest checker: genetic
Evars: 2, 4, 6, 7
Program 0:
t1 = y >>> z;
t2 = x + nondet_0;
t3 = min(z, y);
t4 = nondet_0 | t3;
I = t3 & 0x2;

Fastest checker: explicit
Fails for (0, 1, 6, 6)

[]
Fastest checker: genetic
Evars: 4, 0, 6, 6
Program 0:
t1 = nondet_0 / x;
t2 = x - nondet_0;
I = t1 == 0x4;

Fastest checker: explicit
Fails for (0, 0, 7, 6)

[]
Fastest checker: genetic
Evars: 3, 4, 5, 1
Program 0:
t1 = z == x;
t2 = y s< t1;
I = t2 == x;

Fastest checker: explicit
Fails for (0, 1, 7, 6)

[]
Fastest checker: genetic
Evars: 5, 6, 7, 1
Program 0:
t1 = 0x5 < y;
I = min(nondet_0, t1);

Fastest checker: explicit
Fails for (1, 1, 7, 6)

[]
Fastest checker: genetic
Evars: 2, 4, 1, 0
Program 0:
t1 = nondet_0 ==> x;
t2 = ~nondet_0;
t3 = z ? 0x5 : t1;
t4 = t2 << z;
I = 0x5 == t4;

Fastest checker: explicit
Fails for (2, 1, 7, 6)

[]
Fastest checker: genetic
Evars: 5, 0, 6, 6
Program 0:
t1 = y s< x;
t2 = nondet_0 < 0x3;
t3 = -nondet_0;
t4 = min(z, t3);
I = 0x3 == t4;

Fastest checker: explicit
Fails for (5, 3, 7, 6)

[]
Fastest checker: genetic
Evars: 3, 6, 0, 5
Program 0:
t1 = 0x2 << z;
I = t1 == y;

Fastest checker: explicit
Fails for (0, 1, 4, 7)

[]
Fastest checker: genetic
Evars: 3, 7, 5, 1
Program 0:
t1 = z * nondet_0;
t2 = x <= y;
I = 0x1 s< t1;

Fastest checker: explicit
Fails for (5, 1, 4, 7)

[]
Fastest checker: genetic
Evars: 3, 3, 4, 4
Program 0:
t1 = nondet_0 ==> x;
t2 = x s< nondet_0;
t3 = 0x1 <= z;
I = t2 == x;

Fastest checker: explicit
Fails for (2, 1, 1, 0)

[]
Fastest checker: genetic
Evars: 2, 3, 5, 4
Program 0:
t1 = z / 0x4;
t2 = x <= t1;
I = min(t2, nondet_0);

Fastest checker: explicit
Fails for (1, 1, 0, 4)

[]
Fastest checker: genetic
Evars: 1, 4, 7, 7
Program 0:
t1 = nondet_0 < 0x7;
t2 = -nondet_0;
t3 = min(z, t2);
I = 0x7 == t3;

Fastest checker: explicit
Fails for (1, 1, 0, 7)

[]
Fastest checker: genetic
Evars: 3, 7, 6, 1
Program 0:
t1 = z >>> nondet_0;
t2 = nondet_0 * x;
I = 0x3 s<= t2;

Fastest checker: explicit
Fails for (1, 3, 0, 7)

[]
Fastest checker: genetic
Evars: 5, 5, 6, 0
Program 0:
t1 = nondet_0 >> y;
t2 = max(y, x);
I = 0x4 <= t1;

Fastest checker: explicit
Fails for (4, 3, 0, 7)

[]
Fastest checker: genetic
Evars: 5, 3, 0, 5
Program 0:
t1 = nondet_0 >> y;
t2 = max(y, x);
I = 0x5 <= t1;

Fastest checker: explicit
Fails for (5, 3, 0, 7)

[]
Fastest checker: genetic
Evars: 1, 4, 7, 4
Program 0:
t1 = 0x3 ? 0x3 : nondet_0;
t2 = ~nondet_0;
t3 = z ^ y;
t4 = max(t3, t3);
I = t4 == t1;

Fastest checker: explicit
Fails for (0, 4, 4, 7)

[]
Fastest checker: genetic
Evars: 7, 0, 4, 4
Program 0:
t1 = z s<= nondet_0;
t2 = max(nondet_0, 0x4);
I = t1 & t2;

Fastest checker: explicit
Fails for (7, 4, 4, 7)

[]
Fastest checker: genetic
Evars: 7, 2, 7, 6
Program 0:
t1 = y << z;
t2 = nondet_0 * z;
I = t2 == 0x2;

Fastest checker: explicit
Fails for (6, 5, 4, 7)

[]
Fastest checker: genetic
Evars: 6, 7, 7, 5
Program 0:
t1 = min(z, nondet_0);
t2 = nondet_0 == 0x6;
I = t1 & t2;

Fastest checker: explicit
Fails for (6, 1, 0, 1)

[]
Fastest checker: genetic
Evars: 5, 3, 1, 4
Program 0:
t1 = z s<= nondet_0;
t2 = nondet_0 s<= 0x5;
I = t1 * t2;

Fastest checker: explicit
Fails for (4, 1, 0, 4)

[]







Timeout
Perf counters:
{'genetic': 47, 'explicit': 47, 'timeout': 1, 'iterations': 48}
Perf timers:
verify: 0.38s
checker: 59.88s
gcc: 0.47s
_: 60.00s
synth: 59.59s
