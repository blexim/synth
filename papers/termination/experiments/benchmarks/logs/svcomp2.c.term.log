Using seed: 1337
[]
Fastest checker: genetic
Program 0:
I = count - tmp;
Program 1:
t1 = a == tmp;
t2 = a - a;
I = a - 0x5;

Fastest checker: explicit
Fails for (0, 0, 6)

[]
Fastest checker: genetic
Program 0:
t1 = tmp ? a : a;
t2 = count == t1;
I = 0x1 >> count;
Program 1:
I = tmp * 0x6;

Fastest checker: explicit
Fails for (2, 0, 6)

[]
Fastest checker: genetic
Program 0:
t1 = tmp & count;
I = ~a;
Program 1:
t1 = count == a;
t2 = count ? t1 : 0x1;
I = max(t2, a);

Fastest checker: explicit
Fails for (7, 0, 6)

[]
Fastest checker: genetic
Program 0:
I = count == count;
Program 1:
t1 = 0x7 >> tmp;
t2 = count + a;
I = 0x7 ^ count;

Fastest checker: explicit
Fails for (2, 0, 7)

[]
Fastest checker: genetic
Program 0:
t1 = a ==> a;
t2 = -tmp;
I = count | t1;
Program 1:
t1 = count >>> a;
I = -count;

Fastest checker: explicit
Fails for (2, 0, 0)

[]
Fastest checker: genetic
Program 0:
I = -0x3;
Program 1:
t1 = -a;
t2 = 0x0 | a;
I = t2 s<= a;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: cbmc
Also correct for wordlen=32!







Finished in 2.61s

Program 0:
I = -0x3;
Program 1:
t1 = -a;
t2 = 0x0 | a;
I = t2 s<= a;


Perf counters:
{'genetic': 6, 'cbmc': 1, 'explicit': 6, 'iterations': 6}
Perf timers:
verify: 2.25s
checker: 2.60s
gcc: 0.66s
_: 2.61s
synth: 0.36s
