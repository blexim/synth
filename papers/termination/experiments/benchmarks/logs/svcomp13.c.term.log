Using seed: 1337
[]
Fastest checker: genetic
Program 0:
t1 = 0x1 + 0x1;
t2 = t1 - t1;
I = t2 == i;
Program 1:
t1 = max(0x4, i);
I = i - 0x4;

Fastest checker: explicit
Fails for (4, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x0 ? j : j;
I = t1 * t1;
Program 1:
t1 = i & i;
t2 = j == t1;
I = t2 << t1;

Fastest checker: explicit
Fails for (5, 0)

[]
Fastest checker: genetic
Program 0:
I = 0x0 s<= 0x0;
Program 1:
t1 = ~0x2;
t2 = min(i, i);
I = i <= t1;

Fastest checker: explicit
Fails for (4, 6)

[]
Fastest checker: genetic
Program 0:
t1 = i s<= j;
t2 = 0x2 | 0x2;
I = t1 >>> i;
Program 1:
I = j ? 0x4 : j;

Fastest checker: explicit
Correct for wordlen=3
Fastest checker: explicit
Trying to generalize...
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Fastest checker: explicit
Couldn't generalize :-(
Increasing wordlen to 6
[]
Fastest checker: genetic
Program 0:
t1 = i ? j : i;
I = i >>> j;
Program 1:
I = i < j;

Fastest checker: explicit
Fails for (32, 43)

[]
Fastest checker: genetic
Program 0:
t1 = j % i;
t2 = 0x5 ==> i;
I = 0x5 | i;
Program 1:
t1 = 0x4 - j;
t2 = i | t1;
I = t1 != t2;

Fastest checker: explicit
Fails for (36, 43)

[]
Fastest checker: genetic
Program 0:
t1 = j / 0x5;
I = i >>> j;
Program 1:
t1 = min(i, i);
t2 = ~0x5;
I = 0x5 - t2;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
I = ~i;
Program 1:
t1 = 0x4 >> i;
t2 = i | 0x4;
I = i + i;

Fastest checker: explicit
Fails for (32, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x5 == i;
t2 = 0x5 ^ 0x5;
I = j | t1;
Program 1:
t1 = -j;
t2 = t1 >> 0x5;
I = j ^ 0x5;

Fastest checker: explicit
Fails for (33, 0)

[]
Fastest checker: genetic
Program 0:
I = 0x0 s<= 0x0;
Program 1:
t1 = ~0x2;
t2 = min(i, i);
I = i <= t1;

Fastest checker: explicit
Fails for (32, 62)

[]
Fastest checker: genetic
Program 0:
t1 = 0x4 s< 0x4;
t2 = i ? j : i;
I = -0x4;
Program 1:
t1 = max(i, i);
I = j ^ 0x7;

Fastest checker: explicit
Fails for (39, 62)

[]
Fastest checker: genetic
Program 0:
I = 0x19 ? 0x19 : 0x19;
Program 1:
t1 = min(0x3f, 0x3f);
I = i - 0x3f;

Fastest checker: explicit
Fails for (32, 63)

[]
Fastest checker: genetic
Program 0:
t1 = ~i;
t2 = max(t1, t1);
I = 0x11 | i;
Program 1:
I = 0x13 - j;

Fastest checker: explicit
Fails for (19, 20)

[]
Fastest checker: genetic
Program 0:
t1 = j < j;
I = i ? 0x15 : j;
Program 1:
t1 = j s< i;
t2 = min(0x38, t1);
t3 = j >>> i;
I = i + 0x38;

Fastest checker: explicit
Fails for (63, 1)

[]
Fastest checker: genetic
Program 0:
I = i >>> 0x14;
Program 1:
t1 = i + i;
I = 0x0 + i;

Fastest checker: explicit
Fails for (0, 4)

[]
Fastest checker: genetic
Program 0:
t1 = j s<= 0x27;
t2 = j <= i;
t3 = i << j;
t4 = j + 0x27;
I = t4 >>> 0x27;
Program 1:
t1 = 0x8 s< j;
t2 = 0x8 + 0x8;
I = 0x8 + i;

Fastest checker: explicit
Fails for (24, 25)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
t2 = j <= j;
t3 = i != 0x27;
t4 = t1 + i;
I = ~0x27;
Program 1:
I = 0x8 - j;

Fastest checker: explicit
Fails for (8, 26)

[]
Fastest checker: genetic
Program 0:
t1 = 0x27 | 0x27;
I = j + i;
Program 1:
t1 = 0x32 s< j;
t2 = i + 0x32;
I = t2 == j;

Fastest checker: explicit
Fails for (10, 26)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
I = j + i;
Program 1:
t1 = 0x8 s< j;
t2 = 0x8 + t1;
t3 = i * j;
t4 = j s<= j;
I = i + 0x8;

Fastest checker: explicit
Fails for (32, 56)

[]
Fastest checker: genetic
Program 0:
t1 = 0x2 != 0x2;
t2 = j <= 0x2;
I = t1 s< t2;
Program 1:
t1 = i >>> j;
I = t1 & i;

Fastest checker: explicit
Fails for (2, 3)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x15;
t2 = t1 + i;
I = j < 0x15;
Program 1:
I = i & i;

Fastest checker: explicit
Fails for (20, 21)

[]
Fastest checker: genetic
Program 0:
t1 = j != 0x27;
t2 = j <= i;
I = t1 == j;
Program 1:
I = j + i;

Fastest checker: explicit
Fails for (1, 22)

[]
Fastest checker: genetic
Program 0:
t1 = ~j;
t2 = j <= i;
t3 = i + i;
I = j + t1;
Program 1:
t1 = i s<= j;
t2 = 0x32 | j;
I = i - 0x32;

Fastest checker: explicit
Fails for (32, 50)

[]
Fastest checker: genetic
Program 0:
I = j | 0x27;
Program 1:
t1 = i - 0x34;
t2 = min(t1, t1);
t3 = j ==> i;
I = 0x34 + i;

Fastest checker: explicit
Fails for (0, 12)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x8;
t2 = j <= 0x8;
t3 = t1 % t1;
I = 0x8 <= i;
Program 1:
t1 = min(0x11, 0x11);
t2 = j ==> i;
I = 0x11 + i;

Fastest checker: explicit
Fails for (32, 47)

[]
Fastest checker: genetic
Program 0:
I = j | 0x27;
Program 1:
t1 = j + j;
I = i - 0x8;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Program 0:
t1 = j + 0x1a;
t2 = j <= i;
t3 = t1 << j;
t4 = t2 + t3;
t5 = j + 0x1a;
I = 0x1a + j;
Program 1:
t1 = 0xe s< j;
I = i - 0xe;

Fastest checker: explicit
Fails for (37, 8)

[]
Fastest checker: genetic
Program 0:
I = i <= i;
Program 1:
t1 = 0x2f s< j;
t2 = t1 / 0x2f;
t3 = 0x2f + i;
t4 = t3 + i;
t5 = 0x2f s< i;
t6 = 0x2f / 0x2f;
I = 0x2f & t6;

Fastest checker: explicit
Fails for (0, 9)

[]
Fastest checker: genetic
Program 0:
I = j ^ 0x39;
Program 1:
I = 0x1b + i;

Fastest checker: explicit
Fails for (56, 9)

[]
Fastest checker: genetic
Program 0:
t1 = j + i;
t2 = i + j;
I = 0x27 | i;
Program 1:
t1 = 0x3b | 0x3b;
I = i + 0x3b;

Fastest checker: explicit
Fails for (0, 5)

[]
Fastest checker: genetic
Program 0:
I = 0x27 | 0x27;
Program 1:
t1 = i + 0x1c;
I = t1 == j;

Fastest checker: explicit
Fails for (32, 6)

[]
Fastest checker: genetic
Program 0:
t1 = i <= i;
I = 0x27 + 0x27;
Program 1:
t1 = 0x8 s< j;
t2 = i * j;
t3 = 0x8 + i;
I = t3 + i;

Fastest checker: explicit
Fails for (0, 28)

[]
Fastest checker: genetic
Program 0:
t1 = j | i;
I = j + i;
Program 1:
t1 = 0x20 s< j;
t2 = 0x20 / 0x20;
t3 = j << t1;
t4 = i + t2;
t5 = ~0x20;
t6 = i + 0x20;
I = 0x20 + 0x20;

Fastest checker: explicit
Correct for wordlen=6
Fastest checker: cbmc
Trying to generalize...
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Fastest checker: cbmc
Couldn't generalize :-(
Increasing wordlen to 12
[]
Fastest checker: genetic
Program 0:
t1 = 0xe >>> j;
t2 = -t1;
I = min(0xe, i);
Program 1:
t1 = ~j;
I = i | 0x26;

Fastest checker: explicit
Fails for (2048, 3278)

[]
Fastest checker: genetic
Program 0:
I = 0x19 ? 0x19 : 0x19;
Program 1:
t1 = min(0x3f, 0x3f);
I = i - 0x3f;

Fastest checker: cbmc
Fails for (4095, 63)

[]
Fastest checker: genetic
Program 0:
t1 = ~i;
t2 = max(t1, t1);
I = 0x11 | i;
Program 1:
I = 0x13 - j;

Fastest checker: explicit
Fails for (19, 64)

[]
Fastest checker: genetic
Program 0:
I = j | 0x15;
Program 1:
t1 = j | 0x17;
I = j ^ 0x17;

Fastest checker: explicit
Fails for (23, 64)

[]
Fastest checker: genetic
Program 0:
t1 = i == 0x18;
I = i / i;
Program 1:
t1 = i + 0x19;
t2 = 0x19 s<= i;
I = t2 s<= t1;

Fastest checker: cbmc
Fails for (2048, 0)

[]
Fastest checker: genetic
Program 0:
t1 = 0x6 + j;
t2 = ~j;
I = t2 * i;
Program 1:
I = i & i;

Fastest checker: explicit
Fails for (0, 1)

[]
Fastest checker: genetic
Program 0:
I = i | 0x3;
Program 1:
t1 = j s<= i;
t2 = min(0x1, t1);
t3 = j s<= j;
I = 0x1 + i;

Fastest checker: cbmc
Fails for (2302, 4095)

[]
Fastest checker: genetic
Program 0:
I = i >>> 0x14;
Program 1:
t1 = i + i;
I = 0x0 + i;

Fastest checker: explicit
Fails for (0, 256)

[]
Fastest checker: genetic
Program 0:
t1 = j s<= 0x27;
t2 = j <= i;
t3 = i << j;
t4 = j + 0x27;
I = t4 >>> 0x27;
Program 1:
t1 = 0x8 s< j;
t2 = 0x8 + 0x8;
I = 0x8 + i;

Fastest checker: explicit
Fails for (4056, 256)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
t2 = j <= j;
t3 = i != 0x27;
t4 = t1 + i;
I = ~0x27;
Program 1:
I = 0x8 - j;

Fastest checker: explicit
Fails for (8, 257)

[]
Fastest checker: genetic
Program 0:
t1 = 0x27 | 0x27;
I = j + i;
Program 1:
t1 = 0x32 s< j;
t2 = i + 0x32;
I = t2 == j;

Fastest checker: cbmc
Fails for (3070, 4046)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
I = j + i;
Program 1:
t1 = 0x8 s< j;
t2 = 0x8 + t1;
t3 = i * j;
t4 = j s<= j;
I = i + 0x8;

Fastest checker: explicit
Fails for (2048, 4088)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x15;
t2 = t1 + i;
I = j < 0x15;
Program 1:
I = i & i;

Fastest checker: explicit
Fails for (20, 21)

[]
Fastest checker: genetic
Program 0:
t1 = j != 0x27;
t2 = j <= i;
I = t1 == j;
Program 1:
I = j + i;

Fastest checker: explicit
Fails for (1, 22)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x3b;
t2 = i + 0x3b;
I = i != j;
Program 1:
t1 = 0x8 s< j;
t2 = i / 0x8;
t3 = 0x8 + j;
t4 = 0x8 + 0x8;
t5 = t4 - j;
I = t4 / t4;

Fastest checker: explicit
Fails for (16, 22)

[]
Fastest checker: genetic
Program 0:
t1 = ~j;
t2 = j <= i;
t3 = i + i;
I = j + t1;
Program 1:
t1 = i s<= j;
t2 = 0x32 | j;
I = i - 0x32;

Fastest checker: explicit
Fails for (0, 50)

[]
Fastest checker: genetic
Program 0:
I = j | 0x27;
Program 1:
t1 = i - 0x34;
t2 = min(t1, t1);
t3 = j ==> i;
I = 0x34 + i;

Fastest checker: cbmc
Fails for (3090, 4044)

[]
Fastest checker: genetic
Program 0:
t1 = j + 0x1a;
t2 = j <= i;
t3 = t1 << j;
t4 = t2 + t3;
t5 = j + 0x1a;
I = 0x1a + j;
Program 1:
t1 = 0xe s< j;
I = i - 0xe;

Fastest checker: explicit
Fails for (4069, 4070)

[]
Fastest checker: genetic
Program 0:
I = j < 0x27;
Program 1:
t1 = 0x8 >>> j;
t2 = 0x8 / 0x8;
I = 0x8 + i;

Fastest checker: explicit
Fails for (38, 39)

[]
Fastest checker: genetic
Program 0:
t1 = i <= i;
I = 0x27 + 0x27;
Program 1:
t1 = 0x8 s< j;
t2 = i * j;
t3 = 0x8 + i;
I = t3 + i;

Fastest checker: cbmc
Fails for (2080, 4092)

[]
Fastest checker: genetic
Program 0:
I = j | i;
Program 1:
t1 = i s<= j;
t2 = min(0x8, j);
I = i - 0x8;

Fastest checker: explicit
Fails for (4095, 1)

[]
Fastest checker: genetic
Program 0:
t1 = j s< i;
I = i >>> i;
Program 1:
t1 = 0x8 ^ j;
t2 = i + i;
I = j >>> 0x8;

Fastest checker: explicit
Fails for (0, 12)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
I = i + t1;
Program 1:
t1 = i - j;
I = 0x3b + t1;

Fastest checker: explicit
Fails for (4039, 18)

[]
Fastest checker: genetic
Program 0:
t1 = j | i;
I = j + i;
Program 1:
t1 = 0x20 s< j;
t2 = 0x20 / 0x20;
t3 = j << t1;
t4 = i + t2;
t5 = ~0x20;
t6 = i + 0x20;
I = 0x20 + 0x20;

Fastest checker: cbmc
Fails for (2124, 4064)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x2b;
t2 = j ==> i;
t3 = t1 <= j;
t4 = 0x2b == t3;
I = 0x2b + j;
Program 1:
I = 0x4 - j;

Fastest checker: explicit
Fails for (4052, 4064)

[]
Fastest checker: genetic
Program 0:
t1 = j | i;
t2 = j + 0x1;
I = 0x1 + j;
Program 1:
t1 = 0x8 ==> i;
I = i - 0x8;

Fastest checker: explicit
Fails for (4094, 4095)

[]
Fastest checker: genetic
Program 0:
t1 = 0x27 | 0x27;
t2 = j == 0x27;
t3 = j | 0x27;
I = 0x27 <= 0x27;
Program 1:
t1 = 0x27 s<= j;
t2 = 0x27 + i;
I = 0x27 s< t2;

Fastest checker: cbmc
Fails for (2081, 4057)

[]
Fastest checker: genetic
Program 0:
t1 = j | 0x27;
I = 0x27 + 0x27;
Program 1:
t1 = min(0x8, 0x8);
I = i - 0x8;

Fastest checker: explicit
Fails for (0, 8)

[]
Fastest checker: genetic
Program 0:
I = 0x199 ? 0x199 : 0x199;
Program 1:
t1 = min(0x47f, 0x47f);
I = i - 0x47f;








Timeout
Perf counters:
{'genetic': 62, 'cbmc': 18, 'explicit': 70, 'timeout': 1, 'iterations': 62}
Perf timers:
gcc: 1.56s
verify: 43.05s
checker: 44.81s
generalize: 19.79s
synth: 1.91s
_: 45.01s
